{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1344,\"strength\":2,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":2168034812.842987,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.8051667106095786,\"hacking_speed\":1.7961511739911327,\"hacking_money\":3.016360727720912,\"hacking_grow\":1.8064203663438207,\"hacking\":2.7551510324657116,\"strength\":1.994288084443578,\"defense\":1.734163551690068,\"dexterity\":2.3034027375323327,\"agility\":1.5173931077288096,\"charisma\":1.9075799068590749,\"hacking_exp\":3.6373992379513718,\"strength_exp\":1.8280974107399466,\"defense_exp\":1.8280974107399466,\"dexterity_exp\":1.8280974107399466,\"agility_exp\":1.8280974107399466,\"charisma_exp\":1.8280974107399466,\"company_rep\":2.4130885821767296,\"faction_rep\":1.8280974107399466,\"crime_money\":1.4451362930750566,\"crime_success\":1.4451362930750566,\"hacknet_node_money\":3.644769212662769,\"hacknet_node_purchase_cost\":0.5293618350502993,\"hacknet_node_ram_cost\":0.6919762549677115,\"hacknet_node_core_cost\":0.6919762549677115,\"hacknet_node_level_cost\":0.5881798167225548,\"work_money\":1.5896499223825624,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":37,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":38,\"name\":\"NeuroFlux Governor\"},{\"level\":39,\"name\":\"NeuroFlux Governor\"},{\"level\":40,\"name\":\"NeuroFlux Governor\"},{\"level\":41,\"name\":\"NeuroFlux Governor\"},{\"level\":42,\"name\":\"NeuroFlux Governor\"},{\"level\":43,\"name\":\"NeuroFlux Governor\"},{\"level\":44,\"name\":\"NeuroFlux Governor\"},{\"level\":45,\"name\":\"NeuroFlux Governor\"}],\"city\":\"New Tokyo\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"The Black Hand\",\"NiteSec\",\"Aevum\",\"Sector-12\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[],\"has4SData\":true,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":65838665549.81484,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":150889637232.37622,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":65837665549.81484,\"work\":0,\"servers\":-1408000000,\"other\":-6314300000,\"augmentations\":-77329671682.56197}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-4,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":467508332915.7738,\"hacknet\":28657099743.547802,\"hacknet_expenses\":-8945377313.337729,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-79684299921.53091,\"total\":143156953790.6515,\"work\":11265785.3217544,\"servers\":-60565880676.051956,\"other\":-12256300000,\"augmentations\":-191567886742.57654}},\"playtimeSinceLastAug\":32765000,\"playtimeSinceLastBitnode\":1111125000,\"lastAugReset\":1698071275713,\"lastNodeReset\":-1,\"purchasedServers\":[\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-25\"],\"scriptProdSinceLastAug\":146425277217.5584,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1696993342778},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1697002312401},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1697003975843},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1697004035834},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1697042616276},{\"ID\":\"TOR\",\"unlockedOn\":1697052216278},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1697124200234},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1697173256423},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1697174276424},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1697178716426},{\"ID\":\"FROZE\",\"unlockedOn\":1697506902150},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1697774759350},{\"ID\":\"TRAVEL\",\"unlockedOn\":1697776259361},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1697834840599},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1697837600601},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1697852480599},{\"ID\":\"NITESEC\",\"unlockedOn\":1697899461604},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1697999209955},{\"ID\":\"4S\",\"unlockedOn\":1698014329956},{\"ID\":\"DONATION\",\"unlockedOn\":1698071303360}],\"terminalCommandHistory\":[\"ls -l\",\" home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"connect darkweb; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV1.exe; buy DeepscanV2.exe;  buy serverProfiler.exe ; buy Autolink.exe; home;\",\" home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"connect darkweb; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV1.exe; buy DeepscanV2.exe;  buy serverProfiler.exe ; buy Autolink.exe; home;\",\" home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"connect darkweb; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV1.exe; buy DeepscanV2.exe;  buy serverProfiler.exe ; buy Autolink.exe; home;\",\" home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"scan-analyze 10\",\"backdoor\",\" home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"run sniff-servers.js\",\"run sniff-servers.js -f\",\"ls -l *.lit\",\"ls -l -g .lit\",\"clear;ls -l -g .lit\",\"clear;ls -l -g .lit .msg\",\"clear;ls -l \",\"cat server-list.txt\",\"rm *.lit\",\"rm -g .lit\",\"rm man-and-machine.lit\",\"run sniff-servers.js -f\",\"ls -l\",\" home; clear; killall; run hack-servers.js my-first-hack.js -h\",\" home; clear; killall; run hack-servers.js my-first-hack.js -h -f\",\"cat hack-servers.js\",\" home; clear; killall; run hack-servers.js my-first-hack.js -h -f\",\" home; clear; killall; run hack-servers.js my-first-hack.js -h -fetch\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h -fetch\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h -f\",\"run sniff-servers.js\",\"cat hackLib.js\",\"connect darkweb\",\"buy formulas.exe\",\"help formulas.exe\",\"help formulas\",\"run formulas.exe\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h -f\",\"ls -g .msg\",\"ls -g .txt\",\"rm server-list.txt\",\"ls\",\"run deploy-hack.js darkweb\",\"killall; run deploy-hack.js darkweb\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h -f\",\"cat hackLib.js\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h -f\",\"ls\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h -f\"],\"lastUpdate\":1698104040830,\"lastSave\":1698103933431,\"totalPlaytime\":1111125000,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":105404,\"factionWorkType\":\"hacking\",\"factionName\":\"Aevum\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"103d6a1d75d61f\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"5.7.5.1\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\",\"sector-12-crime.lit\",\"brighter-than-the-sun.lit\",\"democracy-is-dead.lit\",\"new-triads.lit\",\"the-hidden-world.lit\",\"the-new-god.lit\",\"simulated-reality.lit\",\"secret-societies.lit\",\"synthetic-muscles.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\",\"A-Green-Tomorrow.lit\",\"history-of-synthoids.lit\",\"man-and-machine.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"ServerProfiler.exe\",\"AutoLink.exe\",\"SQLInject.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"sniff-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d 2023-10-22\\r\\nimport { buildScannedServerList, fileFetch, getScanDepth } from './hackLib';\\r\\n/**\\r\\n * @param {NS} ns Netscript namespace\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    let scanDepth = parseInt(ns.args[0].toString());\\r\\n    let serverList = ns.args[1]?.toString().split(',');\\r\\n    const doFetch = (ns.args.includes('-f') || ns.args.includes('-fetch')) ? true : false;\\r\\n    if (isNaN(scanDepth))\\r\\n        scanDepth = await getScanDepth(ns);\\r\\n    if (serverList.length === 0)\\r\\n        serverList = await buildScannedServerList(ns, scanDepth);\\r\\n    const homefilelist = await (async () => ns.ls('home'))();\\r\\n    serverList.forEach((hostname) => {\\r\\n        if (doFetch)\\r\\n            fileFetch(ns, hostname, homefilelist);\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25pZmYtc2VydmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zbmlmZi1zZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLCtCQUErQjtBQUcvQixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU1RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNoRCxJQUFJLFVBQVUsR0FBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3RCxNQUFNLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFFLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3RGLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUFFLFNBQVMsR0FBRyxNQUFNLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6RCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUFFLFVBQVUsR0FBRyxNQUFNLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN0RixNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBRSxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMxRCxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBZ0IsRUFBRSxFQUFFO1FBQ3BDLElBQUksT0FBTztZQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkIDIwMjMtMTAtMjJcclxuXHJcbmltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJztcclxuaW1wb3J0IHsgYnVpbGRTY2FubmVkU2VydmVyTGlzdCwgZmlsZUZldGNoLCBnZXRTY2FuRGVwdGggfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIFxyXG4gKiBAcGFyYW0ge05TfSBucyBOZXRzY3JpcHQgbmFtZXNwYWNlXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIGxldCBzY2FuRGVwdGggPSBwYXJzZUludChucy5hcmdzWzBdLnRvU3RyaW5nKCkpO1xyXG4gICAgbGV0IHNlcnZlckxpc3Q6IHN0cmluZ1tdID0gbnMuYXJnc1sxXT8udG9TdHJpbmcoKS5zcGxpdCgnLCcpO1xyXG4gICAgY29uc3QgZG9GZXRjaCA9IChucy5hcmdzLmluY2x1ZGVzKCctZicpIHx8IG5zLmFyZ3MuaW5jbHVkZXMoJy1mZXRjaCcpICk/IHRydWUgOiBmYWxzZTtcclxuICAgIGlmIChpc05hTihzY2FuRGVwdGgpKSBzY2FuRGVwdGggPSBhd2FpdCBnZXRTY2FuRGVwdGgobnMpO1xyXG4gICAgaWYgKHNlcnZlckxpc3QubGVuZ3RoID09PSAwKSBzZXJ2ZXJMaXN0ID0gYXdhaXQgYnVpbGRTY2FubmVkU2VydmVyTGlzdChucywgc2NhbkRlcHRoKTtcclxuICAgIGNvbnN0IGhvbWVmaWxlbGlzdCA9IGF3YWl0IChhc3luYyAoKSA9PiAgbnMubHMoJ2hvbWUnKSkoKTtcclxuICAgIHNlcnZlckxpc3QuZm9yRWFjaCgoaG9zdG5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGlmIChkb0ZldGNoKSBmaWxlRmV0Y2gobnMsIGhvc3RuYW1lLCBob21lZmlsZWxpc3QpO1xyXG4gICAgfSk7XHJcbn0iXX0=\",\"filename\":\"sniff-servers.js\",\"server\":\"home\"}}],[\"delete-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from './hackLib';\\r\\n/** @param {NS} ns Netscript namespace */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args.includes(`-a`)) {\\r\\n        deleteAllServers(ns);\\r\\n    }\\r\\n    else if (ns.args[0]) {\\r\\n        const purchasedServer = ns.args[0].toString();\\r\\n        deleteServer(ns, purchasedServer);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`ERROR: no server specified for deletion! ${colors.Red}(use -a to delete all purchased servers)${colors.Reset}`);\\r\\n    }\\r\\n}\\r\\nexport async function deleteServer(ns, server) {\\r\\n    try {\\r\\n        ns.killall(server);\\r\\n        ns.deleteServer(server);\\r\\n        ns.tprint(`INFO: deleted server ${colors.Cyan}${server}${colors.Reset}`);\\r\\n    }\\r\\n    catch {\\r\\n        ns.tprint(`ERROR: failed to delete server ${colors.Cyan}${server}${colors.Reset}`);\\r\\n    }\\r\\n}\\r\\nexport async function deleteAllServers(ns) {\\r\\n    ns.getPurchasedServers().forEach((server) => {\\r\\n        deleteServer(ns, server);\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlLXNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWxldGUtc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDbEMseUNBQXlDO0FBRXpDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN4QixnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUN2QjtTQUNJLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNqQixNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFBO1FBQzdDLFlBQVksQ0FBQyxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUM7S0FDckM7U0FDSTtRQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsNENBQTRDLE1BQU0sQ0FBQyxHQUFHLDJDQUEyQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUM5SDtBQUVMLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLFlBQVksQ0FBQyxFQUFNLEVBQUUsTUFBYztJQUNyRCxJQUFJO1FBQ0EsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQixFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLEVBQUUsQ0FBQyxNQUFNLENBQUMsd0JBQXdCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQzVFO0lBQUMsTUFBTTtRQUNKLEVBQUUsQ0FBQyxNQUFNLENBQUMsa0NBQWtDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQ3RGO0FBQ0wsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsRUFBTTtJQUN6QyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRTtRQUNoRCxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJztcclxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnLi9oYWNrTGliJ1xyXG4vKiogQHBhcmFtIHtOU30gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZSAqL1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAobnMuYXJncy5pbmNsdWRlcyhgLWFgKSkge1xyXG4gICAgICAgIGRlbGV0ZUFsbFNlcnZlcnMobnMpXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChucy5hcmdzWzBdKSB7XHJcbiAgICAgICAgY29uc3QgcHVyY2hhc2VkU2VydmVyID0gbnMuYXJnc1swXS50b1N0cmluZygpXHJcbiAgICAgICAgZGVsZXRlU2VydmVyKG5zLCBwdXJjaGFzZWRTZXJ2ZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbnMudHByaW50KGBFUlJPUjogbm8gc2VydmVyIHNwZWNpZmllZCBmb3IgZGVsZXRpb24hICR7Y29sb3JzLlJlZH0odXNlIC1hIHRvIGRlbGV0ZSBhbGwgcHVyY2hhc2VkIHNlcnZlcnMpJHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICB9XHJcbiAgICBcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZVNlcnZlcihuczogTlMsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIG5zLmtpbGxhbGwoc2VydmVyKTtcclxuICAgICAgICBucy5kZWxldGVTZXJ2ZXIoc2VydmVyKTtcclxuICAgICAgICBucy50cHJpbnQoYElORk86IGRlbGV0ZWQgc2VydmVyICR7Y29sb3JzLkN5YW59JHtzZXJ2ZXJ9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICB9IGNhdGNoIHtcclxuICAgICAgICBucy50cHJpbnQoYEVSUk9SOiBmYWlsZWQgdG8gZGVsZXRlIHNlcnZlciAke2NvbG9ycy5DeWFufSR7c2VydmVyfSR7Y29sb3JzLlJlc2V0fWApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlQWxsU2VydmVycyhuczogTlMpIHtcclxuICAgIG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5mb3JFYWNoKChzZXJ2ZXI6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGRlbGV0ZVNlcnZlcihucywgc2VydmVyKTtcclxuICAgIH0pO1xyXG59Il19\",\"filename\":\"delete-server.js\",\"server\":\"home\"}}],[\"deploy-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultHackToDeploy, defaultHackTargetHostname, deployHack, nukeServer, openPorts } from './hackLib';\\r\\n/**  @param {NS} ns  */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args.length !== 0) {\\r\\n        const hostname = ns.args[0].toString();\\r\\n        const hackToDeploy = ns.args[1]?.toString() || defaultHackToDeploy;\\r\\n        const hackTarget = ns.args[2]?.toString() || defaultHackTargetHostname;\\r\\n        await openPorts(ns, hostname);\\r\\n        await nukeServer(ns, hostname);\\r\\n        await deployHack(ns, hostname, hackToDeploy, hackTarget);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`ERROR: no hostname provided! aborting deployment...`);\\r\\n        ns.tprint(`ERROR: usage: \\\\`run deploy-hack.js <hostname> ?<hackToDeploy> ?<hackTarget>\\\\``);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZGVwbG95LWhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLG1CQUFtQixFQUFFLHlCQUF5QixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRTlHLHVCQUF1QjtBQUV2QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLE1BQU0sUUFBUSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDL0MsTUFBTSxZQUFZLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxtQkFBbUIsQ0FBQztRQUMzRSxNQUFNLFVBQVUsR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLHlCQUF5QixDQUFDO1FBQy9FLE1BQU0sU0FBUyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM5QixNQUFNLFVBQVUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDL0IsTUFBTSxVQUFVLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDNUQ7U0FDSTtRQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMscURBQXFELENBQUMsQ0FBQztRQUNqRSxFQUFFLENBQUMsTUFBTSxDQUFDLCtFQUErRSxDQUFDLENBQUE7S0FDN0Y7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBkZWZhdWx0SGFja1RvRGVwbG95LCBkZWZhdWx0SGFja1RhcmdldEhvc3RuYW1lLCBkZXBsb3lIYWNrLCBudWtlU2VydmVyLCBvcGVuUG9ydHMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqICBAcGFyYW0ge05TfSBucyAgKi9cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKG5zLmFyZ3MubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgY29uc3QgaG9zdG5hbWU6IHN0cmluZyA9IG5zLmFyZ3NbMF0udG9TdHJpbmcoKTtcclxuICAgICAgICBjb25zdCBoYWNrVG9EZXBsb3k6IHN0cmluZyA9IG5zLmFyZ3NbMV0/LnRvU3RyaW5nKCkgfHwgZGVmYXVsdEhhY2tUb0RlcGxveTtcclxuICAgICAgICBjb25zdCBoYWNrVGFyZ2V0OiBzdHJpbmcgPSBucy5hcmdzWzJdPy50b1N0cmluZygpIHx8IGRlZmF1bHRIYWNrVGFyZ2V0SG9zdG5hbWU7XHJcbiAgICAgICAgYXdhaXQgb3BlblBvcnRzKG5zLCBob3N0bmFtZSk7XHJcbiAgICAgICAgYXdhaXQgbnVrZVNlcnZlcihucywgaG9zdG5hbWUpO1xyXG4gICAgICAgIGF3YWl0IGRlcGxveUhhY2sobnMsIGhvc3RuYW1lLCBoYWNrVG9EZXBsb3ksIGhhY2tUYXJnZXQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbnMudHByaW50KGBFUlJPUjogbm8gaG9zdG5hbWUgcHJvdmlkZWQhIGFib3J0aW5nIGRlcGxveW1lbnQuLi5gKTtcclxuICAgICAgICBucy50cHJpbnQoYEVSUk9SOiB1c2FnZTogXFxgcnVuIGRlcGxveS1oYWNrLmpzIDxob3N0bmFtZT4gPzxoYWNrVG9EZXBsb3k+ID88aGFja1RhcmdldD5cXGBgKVxyXG4gICAgfVxyXG59Il19\",\"filename\":\"deploy-hack.js\",\"server\":\"home\"}}],[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"home\"}}],[\"scan-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { buildScannedServerList, colors } from './hackLib';\\r\\n/** @param {NS} ns Netscript namespace */\\r\\nexport async function main(ns) {\\r\\n    // for testing in bitburner Terminal\\r\\n    let depth = ns.args[0].toString() || 3;\\r\\n    let serverList = await buildScannedServerList(ns, ~~depth);\\r\\n    ns.tprintf(`found ${colors.Cyan}${serverList.length}${colors.Reset} servers`);\\r\\n    ns.tprintf(`${colors.Cyan}${serverList}${colors.Reset}`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi1zZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NjYW4tc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRTNELHlDQUF5QztBQUN6QyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLG9DQUFvQztJQUNwQyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxJQUFJLFVBQVUsR0FBRyxNQUFNLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLE1BQU0sQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQTtJQUM3RSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDN0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkIDEwLzEyLzIzXHJcbi8vIHNjYW5zIGFsbCBzZXJ2ZXJzIGFuZCBidWlsZHMgYSBsaXN0IG9mIHNlcnZlcnMgdG8gaGFja1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IGJ1aWxkU2Nhbm5lZFNlcnZlckxpc3QsIGNvbG9ycyB9IGZyb20gJy4vaGFja0xpYic7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZSAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIC8vIGZvciB0ZXN0aW5nIGluIGJpdGJ1cm5lciBUZXJtaW5hbFxyXG4gICAgbGV0IGRlcHRoID0gbnMuYXJnc1swXS50b1N0cmluZygpIHx8IDM7XHJcbiAgICBsZXQgc2VydmVyTGlzdCA9IGF3YWl0IGJ1aWxkU2Nhbm5lZFNlcnZlckxpc3QobnMsIH5+ZGVwdGgpO1xyXG4gICAgbnMudHByaW50ZihgZm91bmQgJHtjb2xvcnMuQ3lhbn0ke3NlcnZlckxpc3QubGVuZ3RofSR7Y29sb3JzLlJlc2V0fSBzZXJ2ZXJzYClcclxuICAgIG5zLnRwcmludGYoYCR7Y29sb3JzLkN5YW59JHtzZXJ2ZXJMaXN0fSR7Y29sb3JzLlJlc2V0fWApO1xyXG59XHJcblxyXG5cclxuIl19\",\"filename\":\"scan-servers.js\",\"server\":\"home\"}}],[\"open-ports.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { openPorts } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let hostname = ns.args[0]?.toString();\\r\\n    openPorts(ns, hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Blbi1wb3J0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9vcGVuLXBvcnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFdEMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUN0QyxTQUFTLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZCAxMC8xNi8yM1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IG9wZW5Qb3J0cyB9IGZyb20gJy4vaGFja0xpYic7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBsZXQgaG9zdG5hbWUgPSBucy5hcmdzWzBdPy50b1N0cmluZygpO1xyXG4gICAgb3BlblBvcnRzKG5zLCBob3N0bmFtZSk7XHJcbn1cclxuXHJcbiJdfQ==\",\"filename\":\"open-ports.js\",\"server\":\"home\"}}],[\"hack-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * created by j__r0d 2023-10-11\\r\\n * command to start script:\\r\\n *   home; clear; killall; run hack - servers.js my - first - hack.js - h\\r\\n *\\r\\n * TODO: write a logger script that will log all the things - might be unnecessary?  i'm only after a better way to format the terminal output\\r\\n * TODO: properly calculate hack target -- from Documentation/beginner's guide:\\r\\n *      `your hacking target should be the  with highest max money that's required hacking level is under 1/2 of your hacking level.`\\r\\n *      `Keep security level low. Security level affects everything when hacking. Two important Netscript functions for this are getServerSecurityLevel() and getServerMinSecurityLevel()`\\r\\n * TODO: instead of a bunch of helper scripts, make a Library of helper functions (ie: hackLib.openPorts(ns, hostname))\\r\\n */\\r\\nimport * as hl from './hackLib';\\r\\nimport { colors } from './hackLib';\\r\\n/**\\r\\n * @param {NS} ns Netscript namespace\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    const hackToDeploy = ns.args[0]?.toString();\\r\\n    const doFetch = (ns.args.includes('-f') || ns.args.includes('-fetch')) ? true : false;\\r\\n    // buy a tor router and then all of the executables as money becomes available\\r\\n    // this doesn't work yet, waiting for the API to unlock? I think?\\r\\n    if (ns.hasTorRouter()) {\\r\\n        ns.tprint(`TOR router found...`);\\r\\n        //eventually i should be able to do this through script, but for now here is a command that will buy all the executables, skipping those that are not yet affordable\\r\\n        //connect darkweb; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV1.exe; buy DeepscanV2.exe;  buy serverProfiler.exe ; buy Autolink.exe; home;\\r\\n    }\\r\\n    else {\\r\\n    }\\r\\n    ns.tprint(`INFO: hack initiated...`);\\r\\n    const scanDepth = await hl.getScanDepth(ns);\\r\\n    await (async () => {\\r\\n        if (hackToDeploy) {\\r\\n            const serverList = await hl.buildScannedServerList(ns, scanDepth);\\r\\n            ns.tprint(`INFO: found ${colors.Cyan}${serverList.length}${colors.Reset} servers during scan of depth ${colors.Magenta}${scanDepth}${colors.Reset}...`);\\r\\n            ns.tprint(`INFO: selecting best 🎯 server...`);\\r\\n            const hackTarget = `joesguns`; //serverWithMostMoney(ns, serverList); --need to account for hacking level, and choose the best server that has high money but low hacking level\\r\\n            ns.tprint(`INFO: ...${colors.Green}${hackTarget}${colors.Reset} selected!`);\\r\\n            ns.tprint(`INFO: attempting to hack servers...`);\\r\\n            await ((async () => serverList.forEach((hostname) => {\\r\\n                if (!ns.hasRootAccess(hostname)) {\\r\\n                    ns.tprint(`WARN: ${colors.Cyan}${hostname}${colors.Reset} does not have root access. attempting root...`);\\r\\n                    hl.openPorts(ns, hostname);\\r\\n                    hl.nukeServer(ns, hostname);\\r\\n                }\\r\\n                else {\\r\\n                    hl.deployHack(ns, hostname, hackToDeploy, hackTarget);\\r\\n                }\\r\\n            }))());\\r\\n            // check for existing purchased servers and start them, or purchase them if they don't exist and there's enough money\\r\\n            ns.tprint(`INFO: checking for purchased servers...`);\\r\\n            const ramToPurchase = 1024;\\r\\n            if (ns.getPurchasedServers().length === 0) {\\r\\n                ns.tprint(`INFO: ...no purchased servers found. checking for available monies...`);\\r\\n                if (ns.getServerMoneyAvailable(`home`) > (ns.getPurchasedServerCost(ramToPurchase) * ns.getPurchasedServerLimit())) {\\r\\n                    ns.tprint(`INFO: enough monies secured; attempting to purchase servers...`);\\r\\n                    const pid = ns.run(`purchase-server.js`, 1, hackToDeploy, hackTarget, ramToPurchase);\\r\\n                    while (ns.isRunning(pid)) {\\r\\n                        await ns.sleep(100);\\r\\n                    }\\r\\n                    ;\\r\\n                }\\r\\n                else {\\r\\n                    ns.tprint(`ERROR: not enough monies to purchase servers! keep hacking...`);\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                ns.tprint(`INFO: found purchased servers; deploying hack...`);\\r\\n                ns.run(`start-purchased-servers.js`, 1, hackToDeploy, hackTarget);\\r\\n            }\\r\\n            if (ns.args.includes(`-h`))\\r\\n                ns.run(`start-home-server.js`, 1, hackToDeploy, hackTarget, `-k`);\\r\\n            else\\r\\n                ns.tprint(`INFO: skipping home server. use 2nd arg '-h' to include home server in hacktivities.`);\\r\\n            ns.toast(`hacks deployed!`);\\r\\n        }\\r\\n        else {\\r\\n            ns.tprint(`ERROR: no hack script to deploy. include script name! use 2nd arg '-h' to include home server in hacktivities.`);\\r\\n            ns.toast(`no hacks deployed!`, 'error');\\r\\n        }\\r\\n        ;\\r\\n    })();\\r\\n    if (doFetch) {\\r\\n        ns.tprint(`INFO: fetching files from servers...`);\\r\\n        const pid = ns.run(`sniff-servers.js`, 1, scanDepth, `-fetch`);\\r\\n        while (ns.isRunning(pid)) {\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n        ;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1zZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhY2stc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztHQVVHO0FBR0gsT0FBTyxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQzs7R0FFRztBQUVILE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxZQUFZLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUNwRCxNQUFNLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBRXRGLDhFQUE4RTtJQUM5RSxpRUFBaUU7SUFDakUsSUFBSSxFQUFFLENBQUMsWUFBWSxFQUFFLEVBQUU7UUFDbkIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ2pDLG9LQUFvSztRQUNwSyxzTEFBc0w7S0FDekw7U0FDSTtLQUNKO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sU0FBUyxHQUFHLE1BQU0sRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM1QyxNQUFNLENBQUUsS0FBSyxJQUFJLEVBQUU7UUFDZixJQUFJLFlBQVksRUFBRTtZQUNkLE1BQU0sVUFBVSxHQUFHLE1BQU0sRUFBRSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUNsRSxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsTUFBTSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLGlDQUFpQyxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQztZQUV4SixFQUFFLENBQUMsTUFBTSxDQUFDLG1DQUFtQyxDQUFDLENBQUE7WUFDOUMsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLENBQUMsZ0pBQWdKO1lBQy9LLEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxNQUFNLENBQUMsS0FBSyxHQUFHLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxZQUFZLENBQUMsQ0FBQztZQUU1RSxFQUFFLENBQUMsTUFBTSxDQUFDLHFDQUFxQyxDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBZ0IsRUFBRSxFQUFFO2dCQUN4RCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtvQkFDN0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLGdEQUFnRCxDQUFDLENBQUM7b0JBQzFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO29CQUMzQixFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztpQkFDL0I7cUJBQ0k7b0JBQ0QsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztpQkFDekQ7WUFDTCxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVQLHFIQUFxSDtZQUNySCxFQUFFLENBQUMsTUFBTSxDQUFDLHlDQUF5QyxDQUFDLENBQUE7WUFDcEQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDO1lBQzNCLElBQUksRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDdkMsRUFBRSxDQUFDLE1BQU0sQ0FBQyx1RUFBdUUsQ0FBQyxDQUFBO2dCQUNsRixJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxFQUFFO29CQUNoSCxFQUFFLENBQUMsTUFBTSxDQUFDLGdFQUFnRSxDQUFDLENBQUE7b0JBQzNFLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUE7b0JBQ3BGLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTt3QkFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7cUJBQUU7b0JBQUEsQ0FBQztpQkFDckQ7cUJBQ0k7b0JBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQywrREFBK0QsQ0FBQyxDQUFDO2lCQUM5RTthQUNKO2lCQUFNO2dCQUNILEVBQUUsQ0FBQyxNQUFNLENBQUMsa0RBQWtELENBQUMsQ0FBQTtnQkFDN0QsRUFBRSxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQ3JFO1lBR0QsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7Z0JBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQzs7Z0JBQ3pGLEVBQUUsQ0FBQyxNQUFNLENBQUMsc0ZBQXNGLENBQUMsQ0FBQztZQUV2RyxFQUFFLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDL0I7YUFDSTtZQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0hBQWdILENBQUMsQ0FBQztZQUM1SCxFQUFFLENBQUMsS0FBSyxDQUFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxDQUFBO1NBQzFDO1FBQUEsQ0FBQztJQUNOLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFTCxJQUFJLE9BQU8sRUFBRTtRQUNULEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNsRCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFDOUQsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQUM7UUFBQSxDQUFDO0tBQ3BEO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBcclxuICogY3JlYXRlZCBieSBqX19yMGQgMjAyMy0xMC0xMVxyXG4gKiBjb21tYW5kIHRvIHN0YXJ0IHNjcmlwdDogXHJcbiAqICAgaG9tZTsgY2xlYXI7IGtpbGxhbGw7IHJ1biBoYWNrIC0gc2VydmVycy5qcyBteSAtIGZpcnN0IC0gaGFjay5qcyAtIGhcclxuICogXHJcbiAqIFRPRE86IHdyaXRlIGEgbG9nZ2VyIHNjcmlwdCB0aGF0IHdpbGwgbG9nIGFsbCB0aGUgdGhpbmdzIC0gbWlnaHQgYmUgdW5uZWNlc3Nhcnk/ICBpJ20gb25seSBhZnRlciBhIGJldHRlciB3YXkgdG8gZm9ybWF0IHRoZSB0ZXJtaW5hbCBvdXRwdXRcclxuICogVE9ETzogcHJvcGVybHkgY2FsY3VsYXRlIGhhY2sgdGFyZ2V0IC0tIGZyb20gRG9jdW1lbnRhdGlvbi9iZWdpbm5lcidzIGd1aWRlOiBcclxuICogICAgICBgeW91ciBoYWNraW5nIHRhcmdldCBzaG91bGQgYmUgdGhlICB3aXRoIGhpZ2hlc3QgbWF4IG1vbmV5IHRoYXQncyByZXF1aXJlZCBoYWNraW5nIGxldmVsIGlzIHVuZGVyIDEvMiBvZiB5b3VyIGhhY2tpbmcgbGV2ZWwuYFxyXG4gKiAgICAgIGBLZWVwIHNlY3VyaXR5IGxldmVsIGxvdy4gU2VjdXJpdHkgbGV2ZWwgYWZmZWN0cyBldmVyeXRoaW5nIHdoZW4gaGFja2luZy4gVHdvIGltcG9ydGFudCBOZXRzY3JpcHQgZnVuY3Rpb25zIGZvciB0aGlzIGFyZSBnZXRTZXJ2ZXJTZWN1cml0eUxldmVsKCkgYW5kIGdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwoKWBcclxuICogVE9ETzogaW5zdGVhZCBvZiBhIGJ1bmNoIG9mIGhlbHBlciBzY3JpcHRzLCBtYWtlIGEgTGlicmFyeSBvZiBoZWxwZXIgZnVuY3Rpb25zIChpZTogaGFja0xpYi5vcGVuUG9ydHMobnMsIGhvc3RuYW1lKSlcclxuICovXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCAqIGFzIGhsIGZyb20gJy4vaGFja0xpYic7XHJcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJy4vaGFja0xpYic7XHJcblxyXG4vKiogXHJcbiAqIEBwYXJhbSB7TlN9IG5zIE5ldHNjcmlwdCBuYW1lc3BhY2VcclxuICovXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIGNvbnN0IGhhY2tUb0RlcGxveTogc3RyaW5nID0gbnMuYXJnc1swXT8udG9TdHJpbmcoKTtcclxuICAgIGNvbnN0IGRvRmV0Y2ggPSAobnMuYXJncy5pbmNsdWRlcygnLWYnKSB8fCBucy5hcmdzLmluY2x1ZGVzKCctZmV0Y2gnKSkgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgLy8gYnV5IGEgdG9yIHJvdXRlciBhbmQgdGhlbiBhbGwgb2YgdGhlIGV4ZWN1dGFibGVzIGFzIG1vbmV5IGJlY29tZXMgYXZhaWxhYmxlXHJcbiAgICAvLyB0aGlzIGRvZXNuJ3Qgd29yayB5ZXQsIHdhaXRpbmcgZm9yIHRoZSBBUEkgdG8gdW5sb2NrPyBJIHRoaW5rP1xyXG4gICAgaWYgKG5zLmhhc1RvclJvdXRlcigpKSB7XHJcbiAgICAgICAgbnMudHByaW50KGBUT1Igcm91dGVyIGZvdW5kLi4uYCk7XHJcbiAgICAgICAgLy9ldmVudHVhbGx5IGkgc2hvdWxkIGJlIGFibGUgdG8gZG8gdGhpcyB0aHJvdWdoIHNjcmlwdCwgYnV0IGZvciBub3cgaGVyZSBpcyBhIGNvbW1hbmQgdGhhdCB3aWxsIGJ1eSBhbGwgdGhlIGV4ZWN1dGFibGVzLCBza2lwcGluZyB0aG9zZSB0aGF0IGFyZSBub3QgeWV0IGFmZm9yZGFibGVcclxuICAgICAgICAvL2Nvbm5lY3QgZGFya3dlYjsgYnV5IEZUUENyYWNrLmV4ZTsgYnV5IHJlbGF5U01UUC5leGU7IGJ1eSBIVFRQV29ybS5leGU7IGJ1eSBTUUxJbmplY3QuZXhlOyBidXkgRGVlcHNjYW5WMS5leGU7IGJ1eSBEZWVwc2NhblYyLmV4ZTsgIGJ1eSBzZXJ2ZXJQcm9maWxlci5leGUgOyBidXkgQXV0b2xpbmsuZXhlOyBob21lO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIG5zLnRwcmludChgSU5GTzogaGFjayBpbml0aWF0ZWQuLi5gKTtcclxuICAgIGNvbnN0IHNjYW5EZXB0aCA9IGF3YWl0IGhsLmdldFNjYW5EZXB0aChucyk7IFxyXG4gICAgYXdhaXQgKCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGhhY2tUb0RlcGxveSkge1xyXG4gICAgICAgICAgICBjb25zdCBzZXJ2ZXJMaXN0ID0gYXdhaXQgaGwuYnVpbGRTY2FubmVkU2VydmVyTGlzdChucywgc2NhbkRlcHRoKTtcclxuICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiBmb3VuZCAke2NvbG9ycy5DeWFufSR7c2VydmVyTGlzdC5sZW5ndGh9JHtjb2xvcnMuUmVzZXR9IHNlcnZlcnMgZHVyaW5nIHNjYW4gb2YgZGVwdGggJHtjb2xvcnMuTWFnZW50YX0ke3NjYW5EZXB0aH0ke2NvbG9ycy5SZXNldH0uLi5gKTtcclxuXHJcbiAgICAgICAgICAgIG5zLnRwcmludChgSU5GTzogc2VsZWN0aW5nIGJlc3Qg8J+OryBzZXJ2ZXIuLi5gKVxyXG4gICAgICAgICAgICBjb25zdCBoYWNrVGFyZ2V0ID0gYGpvZXNndW5zYDsgLy9zZXJ2ZXJXaXRoTW9zdE1vbmV5KG5zLCBzZXJ2ZXJMaXN0KTsgLS1uZWVkIHRvIGFjY291bnQgZm9yIGhhY2tpbmcgbGV2ZWwsIGFuZCBjaG9vc2UgdGhlIGJlc3Qgc2VydmVyIHRoYXQgaGFzIGhpZ2ggbW9uZXkgYnV0IGxvdyBoYWNraW5nIGxldmVsXHJcbiAgICAgICAgICAgIG5zLnRwcmludChgSU5GTzogLi4uJHtjb2xvcnMuR3JlZW59JHtoYWNrVGFyZ2V0fSR7Y29sb3JzLlJlc2V0fSBzZWxlY3RlZCFgKTtcclxuXHJcbiAgICAgICAgICAgIG5zLnRwcmludChgSU5GTzogYXR0ZW1wdGluZyB0byBoYWNrIHNlcnZlcnMuLi5gKTtcclxuICAgICAgICAgICAgYXdhaXQgKChhc3luYyAoKSA9PiBzZXJ2ZXJMaXN0LmZvckVhY2goKGhvc3RuYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghbnMuaGFzUm9vdEFjY2Vzcyhob3N0bmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBucy50cHJpbnQoYFdBUk46ICR7Y29sb3JzLkN5YW59JHtob3N0bmFtZX0ke2NvbG9ycy5SZXNldH0gZG9lcyBub3QgaGF2ZSByb290IGFjY2Vzcy4gYXR0ZW1wdGluZyByb290Li4uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGwub3BlblBvcnRzKG5zLCBob3N0bmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGwubnVrZVNlcnZlcihucywgaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGwuZGVwbG95SGFjayhucywgaG9zdG5hbWUsIGhhY2tUb0RlcGxveSwgaGFja1RhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKSgpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGZvciBleGlzdGluZyBwdXJjaGFzZWQgc2VydmVycyBhbmQgc3RhcnQgdGhlbSwgb3IgcHVyY2hhc2UgdGhlbSBpZiB0aGV5IGRvbid0IGV4aXN0IGFuZCB0aGVyZSdzIGVub3VnaCBtb25leVxyXG4gICAgICAgICAgICBucy50cHJpbnQoYElORk86IGNoZWNraW5nIGZvciBwdXJjaGFzZWQgc2VydmVycy4uLmApXHJcbiAgICAgICAgICAgIGNvbnN0IHJhbVRvUHVyY2hhc2UgPSAxMDI0O1xyXG4gICAgICAgICAgICBpZiAobnMuZ2V0UHVyY2hhc2VkU2VydmVycygpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiAuLi5ubyBwdXJjaGFzZWQgc2VydmVycyBmb3VuZC4gY2hlY2tpbmcgZm9yIGF2YWlsYWJsZSBtb25pZXMuLi5gKVxyXG4gICAgICAgICAgICAgICAgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKGBob21lYCkgPiAobnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChyYW1Ub1B1cmNoYXNlKSAqIG5zLmdldFB1cmNoYXNlZFNlcnZlckxpbWl0KCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiBlbm91Z2ggbW9uaWVzIHNlY3VyZWQ7IGF0dGVtcHRpbmcgdG8gcHVyY2hhc2Ugc2VydmVycy4uLmApXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGlkID0gbnMucnVuKGBwdXJjaGFzZS1zZXJ2ZXIuanNgLCAxLCBoYWNrVG9EZXBsb3ksIGhhY2tUYXJnZXQsIHJhbVRvUHVyY2hhc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5zLmlzUnVubmluZyhwaWQpKSB7IGF3YWl0IG5zLnNsZWVwKDEwMCkgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnRwcmludChgRVJST1I6IG5vdCBlbm91Z2ggbW9uaWVzIHRvIHB1cmNoYXNlIHNlcnZlcnMhIGtlZXAgaGFja2luZy4uLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiBmb3VuZCBwdXJjaGFzZWQgc2VydmVyczsgZGVwbG95aW5nIGhhY2suLi5gKVxyXG4gICAgICAgICAgICAgICAgbnMucnVuKGBzdGFydC1wdXJjaGFzZWQtc2VydmVycy5qc2AsIDEsIGhhY2tUb0RlcGxveSwgaGFja1RhcmdldCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICBpZiAobnMuYXJncy5pbmNsdWRlcyhgLWhgKSkgbnMucnVuKGBzdGFydC1ob21lLXNlcnZlci5qc2AsIDEsIGhhY2tUb0RlcGxveSwgaGFja1RhcmdldCwgYC1rYCk7XHJcbiAgICAgICAgICAgIGVsc2UgbnMudHByaW50KGBJTkZPOiBza2lwcGluZyBob21lIHNlcnZlci4gdXNlIDJuZCBhcmcgJy1oJyB0byBpbmNsdWRlIGhvbWUgc2VydmVyIGluIGhhY2t0aXZpdGllcy5gKTtcclxuXHJcbiAgICAgICAgICAgIG5zLnRvYXN0KGBoYWNrcyBkZXBsb3llZCFgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChgRVJST1I6IG5vIGhhY2sgc2NyaXB0IHRvIGRlcGxveS4gaW5jbHVkZSBzY3JpcHQgbmFtZSEgdXNlIDJuZCBhcmcgJy1oJyB0byBpbmNsdWRlIGhvbWUgc2VydmVyIGluIGhhY2t0aXZpdGllcy5gKTtcclxuICAgICAgICAgICAgbnMudG9hc3QoYG5vIGhhY2tzIGRlcGxveWVkIWAsICdlcnJvcicpXHJcbiAgICAgICAgfTtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgaWYgKGRvRmV0Y2gpIHtcclxuICAgICAgICBucy50cHJpbnQoYElORk86IGZldGNoaW5nIGZpbGVzIGZyb20gc2VydmVycy4uLmApO1xyXG4gICAgICAgIGNvbnN0IHBpZCA9IG5zLnJ1bihgc25pZmYtc2VydmVycy5qc2AsIDEsIHNjYW5EZXB0aCwgYC1mZXRjaGApXHJcbiAgICAgICAgd2hpbGUgKG5zLmlzUnVubmluZyhwaWQpKSB7IGF3YWl0IG5zLnNsZWVwKDEwMCl9O1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIl19\",\"filename\":\"hack-servers.js\",\"server\":\"home\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"home\"}}],[\"purchase-server-8gb.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // How much RAM each purchased server will have. In this case, it'll\\r\\n    // be 8GB.\\r\\n    const ram = 8;\\r\\n    // Iterator we'll use for our loop\\r\\n    let i = 1; // changed to 1 by j__r0d because 1 is a better place to start than 0 for this counter\\r\\n    // Continuously try to purchase servers until we've reached the maximum\\r\\n    // amount of servers\\r\\n    while (i < ns.getPurchasedServerLimit()) {\\r\\n        // Check if we have enough money to purchase a server\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\r\\n            // If we have enough money, then:\\r\\n            //  1. Purchase the server\\r\\n            //  2. Copy our hacking script onto the newly-purchased server\\r\\n            //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n            //  4. Increment our iterator to indicate that we've bought a new server\\r\\n            let hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n            ns.scp(\\\"early-hack-template.js\\\", hostname);\\r\\n            ns.exec(\\\"early-hack-template.js\\\", hostname, 3);\\r\\n            ++i;\\r\\n        }\\r\\n        //Make the script wait for a second before looping again.\\r\\n        //Removing this line will cause an infinite loop and crash the game.\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2Utc2VydmVyLThnYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wdXJjaGFzZS1zZXJ2ZXItOGdiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLG9FQUFvRTtJQUNwRSxVQUFVO0lBQ1YsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBRWQsa0NBQWtDO0lBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLHNGQUFzRjtJQUVqRyx1RUFBdUU7SUFDdkUsb0JBQW9CO0lBQ3BCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1FBQ3JDLHFEQUFxRDtRQUNyRCxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckUsaUNBQWlDO1lBQ2pDLDBCQUEwQjtZQUMxQiw4REFBOEQ7WUFDOUQsMEVBQTBFO1lBQzFFLHdFQUF3RTtZQUN4RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDcEQsRUFBRSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUMzQyxFQUFFLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQyxFQUFFLENBQUMsQ0FBQztTQUNQO1FBQ0QseURBQXlEO1FBQ3pELG9FQUFvRTtRQUNwRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDeEI7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdGhlIGNvbnRlbnRzIG9mIHRoaXMgc2NyaXB0IGNhbWUgZnJvbSB0aGUgQmVnaW5uZXIncyBHdWlkZSBpbiB0aGUgZ2FtZSdzIGRvY3VtZW50YXRpb24uLi5cclxuaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIC8vIEhvdyBtdWNoIFJBTSBlYWNoIHB1cmNoYXNlZCBzZXJ2ZXIgd2lsbCBoYXZlLiBJbiB0aGlzIGNhc2UsIGl0J2xsXHJcbiAgICAvLyBiZSA4R0IuXHJcbiAgICBjb25zdCByYW0gPSA4O1xyXG5cclxuICAgIC8vIEl0ZXJhdG9yIHdlJ2xsIHVzZSBmb3Igb3VyIGxvb3BcclxuICAgIGxldCBpID0gMTsgLy8gY2hhbmdlZCB0byAxIGJ5IGpfX3IwZCBiZWNhdXNlIDEgaXMgYSBiZXR0ZXIgcGxhY2UgdG8gc3RhcnQgdGhhbiAwIGZvciB0aGlzIGNvdW50ZXJcclxuXHJcbiAgICAvLyBDb250aW51b3VzbHkgdHJ5IHRvIHB1cmNoYXNlIHNlcnZlcnMgdW50aWwgd2UndmUgcmVhY2hlZCB0aGUgbWF4aW11bVxyXG4gICAgLy8gYW1vdW50IG9mIHNlcnZlcnNcclxuICAgIHdoaWxlIChpIDwgbnMuZ2V0UHVyY2hhc2VkU2VydmVyTGltaXQoKSkge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgZW5vdWdoIG1vbmV5IHRvIHB1cmNoYXNlIGEgc2VydmVyXHJcbiAgICAgICAgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKFwiaG9tZVwiKSA+IG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QocmFtKSkge1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGVub3VnaCBtb25leSwgdGhlbjpcclxuICAgICAgICAgICAgLy8gIDEuIFB1cmNoYXNlIHRoZSBzZXJ2ZXJcclxuICAgICAgICAgICAgLy8gIDIuIENvcHkgb3VyIGhhY2tpbmcgc2NyaXB0IG9udG8gdGhlIG5ld2x5LXB1cmNoYXNlZCBzZXJ2ZXJcclxuICAgICAgICAgICAgLy8gIDMuIFJ1biBvdXIgaGFja2luZyBzY3JpcHQgb24gdGhlIG5ld2x5LXB1cmNoYXNlZCBzZXJ2ZXIgd2l0aCAzIHRocmVhZHNcclxuICAgICAgICAgICAgLy8gIDQuIEluY3JlbWVudCBvdXIgaXRlcmF0b3IgdG8gaW5kaWNhdGUgdGhhdCB3ZSd2ZSBib3VnaHQgYSBuZXcgc2VydmVyXHJcbiAgICAgICAgICAgIGxldCBob3N0bmFtZSA9IG5zLnB1cmNoYXNlU2VydmVyKFwicHNlcnYtXCIgKyBpLCByYW0pO1xyXG4gICAgICAgICAgICBucy5zY3AoXCJlYXJseS1oYWNrLXRlbXBsYXRlLmpzXCIsIGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgbnMuZXhlYyhcImVhcmx5LWhhY2stdGVtcGxhdGUuanNcIiwgaG9zdG5hbWUsIDMpO1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vTWFrZSB0aGUgc2NyaXB0IHdhaXQgZm9yIGEgc2Vjb25kIGJlZm9yZSBsb29waW5nIGFnYWluLlxyXG4gICAgICAgIC8vUmVtb3ZpbmcgdGhpcyBsaW5lIHdpbGwgY2F1c2UgYW4gaW5maW5pdGUgbG9vcCBhbmQgY3Jhc2ggdGhlIGdhbWUuXHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XHJcbiAgICB9XHJcbn0iXX0=\",\"filename\":\"purchase-server-8gb.js\",\"server\":\"home\"}}],[\"purchase-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { deployHack, purchaseServer, colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\n/**\\r\\n * @param {NS} ns\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    const hackToDeploy = ns.args[0].toString();\\r\\n    const hackTarget = ns.args[1].toString();\\r\\n    const ram = ns.args[2] ? parseInt(ns.args[2].toString()) : 16;\\r\\n    // Continuously try to purchase servers until we've reached the maximum\\r\\n    // amount of servers, + 1 to account for 1-based indexing\\r\\n    let i = 1;\\r\\n    while (i < ns.getPurchasedServerLimit() + 1) {\\r\\n        // TODO: implement an upgrade feature that will upgrade existing servers \\r\\n        // if the purchased-server script is called with a higher RAM value than the existing RAM on the server\\r\\n        if (ns.getServerMoneyAvailable(`home`) > ns.getPurchasedServerCost(ram)) {\\r\\n            const hostname = await purchaseServer(ns, `pserv-` + i, ram);\\r\\n            ns.tprint(`INFO: purchased server ${colors.Cyan}${hostname}${colors.Reset} with ${colors.Green}${ram}GB${colors.Reset} RAM`);\\r\\n            await deployHack(ns, hostname, hackToDeploy, hackTarget);\\r\\n            ++i;\\r\\n        }\\r\\n        //Make the script wait for 100 milli-seconds before looping again.\\r\\n        //Removing this line will cause an infinite loop and crash the game.\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2Utc2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3B1cmNoYXNlLXNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBaUIsTUFBTSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzdFLHFCQUFxQjtBQUVyQjs7R0FFRztBQUVILE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxZQUFZLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNuRCxNQUFNLFVBQVUsR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pELE1BQU0sR0FBRyxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUV0RSx1RUFBdUU7SUFDdkUseURBQXlEO0lBQ3pELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLENBQUMsRUFBRTtRQUV6Qyx5RUFBeUU7UUFDekUsdUdBQXVHO1FBRXZHLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNyRSxNQUFNLFFBQVEsR0FBVyxNQUFNLGNBQWMsQ0FBQyxFQUFFLEVBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNwRSxFQUFFLENBQUMsTUFBTSxDQUFDLDBCQUEwQixNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxTQUFTLE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxLQUFLLE1BQU0sQ0FBQyxLQUFLLE1BQU0sQ0FBQyxDQUFDO1lBQzdILE1BQU0sVUFBVSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3pELEVBQUUsQ0FBQyxDQUFDO1NBQ1A7UUFDRCxrRUFBa0U7UUFDbEUsb0VBQW9FO1FBQ3BFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN2QjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0aGUgY29udGVudHMgb2YgdGhpcyBzY3JpcHQgY2FtZSBmcm9tIHRoZSBCZWdpbm5lcidzIEd1aWRlIGluIHRoZSBnYW1lJ3MgZG9jdW1lbnRhdGlvbi4uLlxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IGRlcGxveUhhY2ssIHB1cmNoYXNlU2VydmVyLCB1cGdyYWRlU2VydmVyLCBjb2xvcnN9IGZyb20gJy4vaGFja0xpYic7XHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7TlN9IG5zIFxyXG4gKi9cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgY29uc3QgaGFja1RvRGVwbG95OiBzdHJpbmcgPSBucy5hcmdzWzBdLnRvU3RyaW5nKCk7XHJcbiAgICBjb25zdCBoYWNrVGFyZ2V0OiBzdHJpbmcgPSBucy5hcmdzWzFdLnRvU3RyaW5nKCk7XHJcbiAgICBjb25zdCByYW06IG51bWJlciA9IG5zLmFyZ3NbMl0gPyBwYXJzZUludChucy5hcmdzWzJdLnRvU3RyaW5nKCkpIDogMTY7XHJcblxyXG4gICAgLy8gQ29udGludW91c2x5IHRyeSB0byBwdXJjaGFzZSBzZXJ2ZXJzIHVudGlsIHdlJ3ZlIHJlYWNoZWQgdGhlIG1heGltdW1cclxuICAgIC8vIGFtb3VudCBvZiBzZXJ2ZXJzLCArIDEgdG8gYWNjb3VudCBmb3IgMS1iYXNlZCBpbmRleGluZ1xyXG4gICAgbGV0IGkgPSAxO1xyXG4gICAgd2hpbGUgKGkgPCBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpICsgMSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFRPRE86IGltcGxlbWVudCBhbiB1cGdyYWRlIGZlYXR1cmUgdGhhdCB3aWxsIHVwZ3JhZGUgZXhpc3Rpbmcgc2VydmVycyBcclxuICAgICAgICAvLyBpZiB0aGUgcHVyY2hhc2VkLXNlcnZlciBzY3JpcHQgaXMgY2FsbGVkIHdpdGggYSBoaWdoZXIgUkFNIHZhbHVlIHRoYW4gdGhlIGV4aXN0aW5nIFJBTSBvbiB0aGUgc2VydmVyXHJcblxyXG4gICAgICAgIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShgaG9tZWApID4gbnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChyYW0pKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhvc3RuYW1lOiBzdHJpbmcgPSBhd2FpdCBwdXJjaGFzZVNlcnZlcihucyxgcHNlcnYtYCArIGksIHJhbSk7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChgSU5GTzogcHVyY2hhc2VkIHNlcnZlciAke2NvbG9ycy5DeWFufSR7aG9zdG5hbWV9JHtjb2xvcnMuUmVzZXR9IHdpdGggJHtjb2xvcnMuR3JlZW59JHtyYW19R0Ike2NvbG9ycy5SZXNldH0gUkFNYCk7XHJcbiAgICAgICAgICAgIGF3YWl0IGRlcGxveUhhY2sobnMsIGhvc3RuYW1lLCBoYWNrVG9EZXBsb3ksIGhhY2tUYXJnZXQpO1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vTWFrZSB0aGUgc2NyaXB0IHdhaXQgZm9yIDEwMCBtaWxsaS1zZWNvbmRzIGJlZm9yZSBsb29waW5nIGFnYWluLlxyXG4gICAgICAgIC8vUmVtb3ZpbmcgdGhpcyBsaW5lIHdpbGwgY2F1c2UgYW4gaW5maW5pdGUgbG9vcCBhbmQgY3Jhc2ggdGhlIGdhbWUuXHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwKTtcclxuICAgIH1cclxufSJdfQ==\",\"filename\":\"purchase-server.js\",\"server\":\"home\"}}],[\"start-home-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(`INFO: deploying hack on ${colors.Cyan}home${colors.Reset} server...`);\\r\\n    const hackToDeploy = ns.args[0]?.toString();\\r\\n    const hackTarget = ns.args[1]?.toString();\\r\\n    const killallFlag = ns.args[2]?.toString() === '-k';\\r\\n    let hostname = 'home';\\r\\n    if (killallFlag)\\r\\n        ns.killall();\\r\\n    let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n    ns.run(hackToDeploy, ~~threadsToUse, hackTarget);\\r\\n    if (ns.scriptRunning(hackToDeploy, 'home'))\\r\\n        ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtaG9tZS1zZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RhcnQtaG9tZS1zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUVsQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLDJCQUEyQixNQUFNLENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLFlBQVksQ0FBQyxDQUFDO0lBQ2pGLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDNUMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUMxQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQztJQUNwRCxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFDdEIsSUFBSSxXQUFXO1FBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDL0gsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0NBQWdDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQztBQUNwSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlZCBieSBqX19yMGQgMTAvMTEvMjNcclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInXHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50cHJpbnQoYElORk86IGRlcGxveWluZyBoYWNrIG9uICR7Y29sb3JzLkN5YW59aG9tZSR7Y29sb3JzLlJlc2V0fSBzZXJ2ZXIuLi5gKTtcclxuICAgIGNvbnN0IGhhY2tUb0RlcGxveSA9IG5zLmFyZ3NbMF0/LnRvU3RyaW5nKCk7IFxyXG4gICAgY29uc3QgaGFja1RhcmdldCA9IG5zLmFyZ3NbMV0/LnRvU3RyaW5nKCk7XHJcbiAgICBjb25zdCBraWxsYWxsRmxhZyA9IG5zLmFyZ3NbMl0/LnRvU3RyaW5nKCkgPT09ICctayc7XHJcbiAgICBsZXQgaG9zdG5hbWUgPSAnaG9tZSc7XHJcbiAgICBpZiAoa2lsbGFsbEZsYWcpIG5zLmtpbGxhbGwoKTtcclxuICAgIGxldCB0aHJlYWRzVG9Vc2UgPSBNYXRoLm1heCgxLCAobnMuZ2V0U2VydmVyTWF4UmFtKGhvc3RuYW1lKSAtIG5zLmdldFNlcnZlclVzZWRSYW0oaG9zdG5hbWUpKSAvIG5zLmdldFNjcmlwdFJhbShoYWNrVG9EZXBsb3kpKTtcclxuICAgIG5zLnJ1bihoYWNrVG9EZXBsb3ksIH5+dGhyZWFkc1RvVXNlLCBoYWNrVGFyZ2V0KTtcclxuICAgIGlmIChucy5zY3JpcHRSdW5uaW5nKGhhY2tUb0RlcGxveSwgJ2hvbWUnKSkgbnMudHByaW50KGBJTkZPOiAuLi5oYWNrIGRlcGxveWVkIHVzaW5nICR7Y29sb3JzLk1hZ2VudGF9JHt+fnRocmVhZHNUb1VzZX0ke2NvbG9ycy5SZXNldH0gdGhyZWFkc2ApO1xyXG59Il19\",\"filename\":\"start-home-server.js\",\"server\":\"home\"}}],[\"start-purchased-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint('INFO: deploying hack on purchased servers...');\\r\\n    const hackToDeploy = ns.args[0].toString();\\r\\n    const hackTarget = ns.args[1].toString();\\r\\n    let hackedCount = 0;\\r\\n    let i = 1;\\r\\n    // TODO: ack okay this could be easier using ns.getPurchasedServers() ...\\r\\n    while (i < ns.getPurchasedServerLimit() + 1) {\\r\\n        let hostname = `pserv-`.concat(i.toString());\\r\\n        ns.killall(hostname);\\r\\n        let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n        ns.scp(hackToDeploy, hostname);\\r\\n        ns.exec(hackToDeploy, hostname, ~~threadsToUse, hackTarget);\\r\\n        if (ns.scriptRunning(hackToDeploy, hostname)) {\\r\\n            ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads on ${colors.Cyan}${hostname}${colors.Reset}`);\\r\\n            ++hackedCount;\\r\\n        }\\r\\n        ;\\r\\n        ++i;\\r\\n    }\\r\\n    ns.tprint(`INFO: hacks deployed on ${colors.Green}${hackedCount}${colors.Reset} purchased servers`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtcHVyY2hhc2VkLXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RhcnQtcHVyY2hhc2VkLXNlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUVsQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLDhDQUE4QyxDQUFDLENBQUM7SUFDMUQsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFHVix5RUFBeUU7SUFDekUsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixFQUFFLEdBQUMsQ0FBQyxFQUFFO1FBQ3ZDLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDN0MsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyQixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQy9ILEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQy9CLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQzNELElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLEVBQUU7WUFDMUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxLQUFLLGVBQWUsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7WUFDL0ksRUFBRSxXQUFXLENBQUM7U0FDakI7UUFBQSxDQUFDO1FBQ0YsRUFBRSxDQUFDLENBQUM7S0FDUDtJQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsMkJBQTJCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsV0FBVyxHQUFHLE1BQU0sQ0FBQyxLQUFLLG9CQUFvQixDQUFDLENBQUM7QUFDeEcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkIDEwLzExLzIzXHJcbmltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJztcclxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnLi9oYWNrTGliJ1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudHByaW50KCdJTkZPOiBkZXBsb3lpbmcgaGFjayBvbiBwdXJjaGFzZWQgc2VydmVycy4uLicpO1xyXG4gICAgY29uc3QgaGFja1RvRGVwbG95ID0gbnMuYXJnc1swXS50b1N0cmluZygpO1xyXG4gICAgY29uc3QgaGFja1RhcmdldCA9IG5zLmFyZ3NbMV0udG9TdHJpbmcoKTtcclxuICAgIGxldCBoYWNrZWRDb3VudCA9IDA7XHJcbiAgICBsZXQgaSA9IDE7XHJcblxyXG4gICAgXHJcbiAgICAvLyBUT0RPOiBhY2sgb2theSB0aGlzIGNvdWxkIGJlIGVhc2llciB1c2luZyBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCkgLi4uXHJcbiAgICB3aGlsZSAoaSA8IG5zLmdldFB1cmNoYXNlZFNlcnZlckxpbWl0KCkrMSkge1xyXG4gICAgICAgIGxldCBob3N0bmFtZSA9IGBwc2Vydi1gLmNvbmNhdChpLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIG5zLmtpbGxhbGwoaG9zdG5hbWUpO1xyXG4gICAgICAgIGxldCB0aHJlYWRzVG9Vc2UgPSBNYXRoLm1heCgxLCAobnMuZ2V0U2VydmVyTWF4UmFtKGhvc3RuYW1lKSAtIG5zLmdldFNlcnZlclVzZWRSYW0oaG9zdG5hbWUpKSAvIG5zLmdldFNjcmlwdFJhbShoYWNrVG9EZXBsb3kpKTtcclxuICAgICAgICBucy5zY3AoaGFja1RvRGVwbG95LCBob3N0bmFtZSk7ICBcclxuICAgICAgICBucy5leGVjKGhhY2tUb0RlcGxveSwgaG9zdG5hbWUsIH5+dGhyZWFkc1RvVXNlLCBoYWNrVGFyZ2V0KVxyXG4gICAgICAgIGlmIChucy5zY3JpcHRSdW5uaW5nKGhhY2tUb0RlcGxveSwgaG9zdG5hbWUpKSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChgSU5GTzogLi4uaGFjayBkZXBsb3llZCB1c2luZyAke2NvbG9ycy5NYWdlbnRhfSR7fn50aHJlYWRzVG9Vc2V9JHtjb2xvcnMuUmVzZXR9IHRocmVhZHMgb24gJHtjb2xvcnMuQ3lhbn0ke2hvc3RuYW1lfSR7Y29sb3JzLlJlc2V0fWApXHJcbiAgICAgICAgICAgICsraGFja2VkQ291bnQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICArK2k7XHJcbiAgICB9XHJcbiAgICBucy50cHJpbnQoYElORk86IGhhY2tzIGRlcGxveWVkIG9uICR7Y29sb3JzLkdyZWVufSR7aGFja2VkQ291bnR9JHtjb2xvcnMuUmVzZXR9IHB1cmNoYXNlZCBzZXJ2ZXJzYCk7XHJcbn0iXX0=\",\"filename\":\"start-purchased-servers.js\",\"server\":\"home\"}}],[\"hackLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// a library of functions used to hack servers and other fun things\\r\\n// created by j__r0d 2023-10-22\\r\\nexport const defaultHackToDeploy = `my-first-hack.js`;\\r\\nexport const defaultHackTargetHostname = `joesguns`;\\r\\nexport const colors = {\\r\\n    Black: '\\\\u001b[30m',\\r\\n    Red: '\\\\u001b[31m',\\r\\n    Green: '\\\\u001b[32m',\\r\\n    Yellow: '\\\\u001b[33m',\\r\\n    Blue: '\\\\u001b[34m',\\r\\n    Magenta: '\\\\u001b[35m',\\r\\n    Cyan: '\\\\u001b[36m',\\r\\n    White: '\\\\u001b[37m',\\r\\n    BrightBlack: '\\\\u001b[30;1m',\\r\\n    BrightRed: '\\\\u001b[31;1m',\\r\\n    BrightGreen: '\\\\u001b[32;1m',\\r\\n    BrightYellow: '\\\\u001b[33;1m',\\r\\n    BrightBlue: '\\\\u001b[34;1m',\\r\\n    BrightMagenta: '\\\\u001b[35;1m',\\r\\n    BrightCyan: '\\\\u001b[36;1m',\\r\\n    BrightWhite: '\\\\u001b[37;1m',\\r\\n    Reset: '\\\\u001b[0m',\\r\\n};\\r\\n/**\\r\\n * @remarks This function is a recursive function that scans servers to a given tree depth and returns a list of all servers to hack.\\r\\n * @param {NS} ns\\r\\n * @param depth scan depth; defaults to 1\\r\\n * @param serverList [Optional] running list of servers (is returned at end of recursion)\\r\\n * @param scannedServers [Optional] list of servers already scanned\\r\\n * @returns Array of all servers found up to specified depth.  The server hostnames in the returned array are string values.\\r\\n * @remarks I gave Copilot this comment block and asked it to write the function for me, using what existing code I had as a base, so it would use the canAddServer function.\\r\\n *\\r\\n * if list is empty, do a scan(), which runs scan on home server and make a list of all scannedServers\\r\\n * add scannedServers to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done one scan and serverAdd\\r\\n * check that depth > 0\\r\\n * scan each of the serverList servers to get neighborsList and add neighborsList to scannedServers\\r\\n * add neighborsList to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done another scan\\r\\n * scan each of the neighborsList servers to get secondNeighborsList and add secondNeighborsList to scannedServers\\r\\n * add secondNeighborsList to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done another scan\\r\\n * if depth is ever 0, return serverList\\r\\n */\\r\\nexport async function buildScannedServerList(ns, depth, serverList = [], scannedServers = []) {\\r\\n    if (serverList.length === 0) {\\r\\n        scannedServers = ns.scan();\\r\\n        serverList = scannedServers.filter(server => canAddServer(server, serverList));\\r\\n        --depth;\\r\\n    }\\r\\n    while (depth > 0) {\\r\\n        const newServers = [];\\r\\n        for (const server of serverList) {\\r\\n            const neighbors = await (async () => ns.scan(server))();\\r\\n            const newNeighbors = neighbors.filter(server => canAddServer(server, serverList.concat(newServers)));\\r\\n            newServers.push(...newNeighbors);\\r\\n            scannedServers.push(...newNeighbors);\\r\\n        }\\r\\n        serverList.push(...newServers);\\r\\n        --depth;\\r\\n    }\\r\\n    return serverList;\\r\\n}\\r\\n/**\\r\\n * @remarks checks a server hostname against a list of forbidden servers and prefixes, and a list of servers already in the server list.\\r\\n * @param serverHostname hostname of server to check against forbidden servers and prefixes\\r\\n * @param serverListName list of servers to check against for duplicates\\r\\n * @returns boolean value indicating whether the server can be added to the server list\\r\\n * @remarks the code in this function was created by Copilot after I asked a few questions about a better way to do this.\\r\\n * below was my attempt....clearly I wasn't thinking in the same direction at all, however copilot _did_ use this code to generate its own code.\\r\\n * ```js\\r\\n *     export function canAddServer(serverName: string, serverListName: string[]) {\\r\\n *         if (!(serverListName.includes(serverName)) || !(serverName == 'home' || 'darkweb') || !serverName.includes('pserv')) {\\r\\n *             return true;\\r\\n *         }\\r\\n *         else {\\r\\n *             return false;\\r\\n *         }\\r\\n *     };\\r\\n * ```\\r\\n */\\r\\nexport function canAddServer(serverHostname, serverListName) {\\r\\n    const forbiddenServers = ['home', 'darkweb'];\\r\\n    const forbiddenServerPrefixes = ['pserv-'];\\r\\n    const isForbiddenServer = forbiddenServers.some(forbiddenServer => forbiddenServer === serverHostname);\\r\\n    const isForbiddenServerPrefix = forbiddenServerPrefixes.some(prefix => serverHostname.startsWith(prefix));\\r\\n    const isDuplicateServer = serverListName.includes(serverHostname);\\r\\n    return !isForbiddenServer && !isDuplicateServer && !isForbiddenServerPrefix;\\r\\n}\\r\\n;\\r\\n/**\\r\\n * @remarks deploys a hack script to a server and starts it running, using the maximum number of threads available.\\r\\n * @param ns Netscript namespace\\r\\n * @param hostname server's hostname\\r\\n * @param hackToDeploy hack script to deploy\\r\\n * @param hackTarget target server for the deployed hack\\r\\n */\\r\\nexport async function deployHack(ns, hostname, hackToDeploy = \\\"my-first-hack.js\\\", hackTarget = `joesguns`) {\\r\\n    ns.tprint(`INFO: deploying hack to server: ${colors.Cyan}${hostname}${colors.Reset}`);\\r\\n    ns.killall(hostname); // free up RAM\\r\\n    ns.scp(hackToDeploy, hostname); // always over-write the existing script with the latest version\\r\\n    let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n    ns.exec(hackToDeploy, hostname, ~~threadsToUse, hackTarget);\\r\\n    if (ns.scriptRunning(hackToDeploy, hostname))\\r\\n        ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads!`);\\r\\n}\\r\\n/**\\r\\n * @remarks fetches all fetch-able files from a server that are not already in the home directory.\\r\\n * @param ns Netscript namespace\\r\\n * @param hostname hostname of server from which to fetch files\\r\\n * @param homefilelist the list of files in the home directory\\r\\n */\\r\\nexport async function fileFetch(ns, hostname, homefilelist = []) {\\r\\n    ns.ls(hostname).forEach((file) => {\\r\\n        if (!homefilelist.includes(file))\\r\\n            try {\\r\\n                ns.scp(file, `home`, hostname);\\r\\n                ns.tprint(`INFO: ...${file} fetched from ${hostname}`);\\r\\n            }\\r\\n            catch {\\r\\n                ns.tprint(`ERROR: ...can't fetch ${file} from ${hostname}!`);\\r\\n            }\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * @remarks determines whether DeepscanV1.exe and/or DeepscanV2.exe are available, and provides the maximum scan depth possible depending on the outcome.\\r\\n * @param ns Netscript namespace\\r\\n * @returns maximum scan depth based on the executables available, returns a number\\r\\n */\\r\\nexport async function getScanDepth(ns) {\\r\\n    let scanDepth = 3;\\r\\n    if (ns.fileExists(`DeepscanV1.exe`))\\r\\n        scanDepth = 5;\\r\\n    if (ns.fileExists(`DeepscanV2.exe`))\\r\\n        scanDepth = 10;\\r\\n    return scanDepth;\\r\\n}\\r\\n/**\\r\\n * @remarks attempts to nuke a server, and outputs results to the terminal.\\r\\n * @param ns Netscript namespace\\r\\n * @param hostname hostname of server to nuke\\r\\n */\\r\\nexport async function nukeServer(ns, hostname) {\\r\\n    try {\\r\\n        ns.nuke(hostname);\\r\\n        ns.tprint(`INFO: ...💣 successful. root access granted!`);\\r\\n    }\\r\\n    catch {\\r\\n        ns.tprint(`ERROR: ...root access denied! ❌ cannot hack ${colors.Cyan}${hostname}${colors.Reset}!`);\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * @remarks This function opens a specified number of ports on a server.\\r\\n * @param ns Netscript namespace\\r\\n * @param hostname hostname of server on which to open ports\\r\\n */\\r\\nexport async function openPorts(ns, hostname) {\\r\\n    const programs = [\\r\\n        `brutessh.exe`,\\r\\n        `ftpcrack.exe`,\\r\\n        `relaysmtp.exe`,\\r\\n        `httpworm.exe`,\\r\\n        `sqlinject.exe`\\r\\n    ];\\r\\n    const maxPorts = programs.length;\\r\\n    const portsRequired = ns.getServerNumPortsRequired(hostname);\\r\\n    for (let i = 0; i < portsRequired && i < maxPorts; i++) {\\r\\n        //ns.tprint(`INFO: ...opening port ${colors.Magenta}${i+1}${colors.Reset}...`); // i+1 because ports are 1-indexed\\r\\n        try {\\r\\n            if (ns.fileExists(programs[i])) {\\r\\n                switch (i) {\\r\\n                    case 0:\\r\\n                        ns.brutessh(hostname);\\r\\n                        break;\\r\\n                    case 1:\\r\\n                        ns.ftpcrack(hostname);\\r\\n                        break;\\r\\n                    case 2:\\r\\n                        ns.relaysmtp(hostname);\\r\\n                        break;\\r\\n                    case 3:\\r\\n                        ns.httpworm(hostname);\\r\\n                        break;\\r\\n                    case 4:\\r\\n                        ns.sqlinject(hostname);\\r\\n                        break;\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                throw (`${colors.Yellow}${programs[i]}${colors.Reset} unavailable, cannot open port ${colors.Magenta}${i + 1}${colors.Reset}`);\\r\\n            }\\r\\n        }\\r\\n        catch (err) {\\r\\n            ns.tprint(`ERROR: ${err} ...aborting`);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * @remarks purchases a server with the specified hostname and RAM, and returns the hostname of the purchased server.\\r\\n * @param ns Netscript namespace\\r\\n * @param hostname name of the server to purchase\\r\\n * @param ram amount of RAM to purchase\\r\\n * @returns the hostname of the purchased server, as a string\\r\\n */\\r\\nexport async function purchaseServer(ns, hostname, ram) {\\r\\n    ns.purchaseServer(hostname, ram);\\r\\n    return hostname;\\r\\n}\\r\\nexport async function startPurchasedServers(ns, hackToDeploy, hackTarget, ramToPurchase) {\\r\\n}\\r\\n// this doesn't do anything yet, but needs to be implemented\\r\\nexport async function upgradeServer(ns, hostname, ram) {\\r\\n    ns.upgradePurchasedServer(hostname, ram);\\r\\n}\\r\\n/**\\r\\n * @remarks If the money available on the current server is greater than the money available on the accumulator server,\\r\\n * @remarks the callback function returns the name of the current server (b), otherwise it returns the name of the accumulator server (a).\\r\\n * @remarks This process continues until all servers in the array have been compared, at which point the name of the server with the highest amount of money available is returned.\\r\\n * @param ns Netscript namespace\\r\\n * @param serverList list of servers to compare\\r\\n * @returns The server hostname that has the most money available, the server hostname will be a string.\\r\\n */\\r\\nconst serverWithMostMoney = (ns, serverList) => {\\r\\n    const servers = serverList.filter((server) => server !== `home` && !/pserv-\\\\d/.test(server));\\r\\n    return servers.reduce((accumulator, currentValue) => {\\r\\n        return ns.getServerMoneyAvailable(currentValue) > ns.getServerMoneyAvailable(accumulator)\\r\\n            ? currentValue\\r\\n            : accumulator;\\r\\n    });\\r\\n};\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja0xpYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrTGliLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1FQUFtRTtBQUNuRSwrQkFBK0I7QUFJL0IsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsa0JBQWtCLENBQUM7QUFDdEQsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsVUFBVSxDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRztJQUNsQixLQUFLLEVBQUUsWUFBWTtJQUNuQixHQUFHLEVBQUUsWUFBWTtJQUNqQixLQUFLLEVBQUUsWUFBWTtJQUNuQixNQUFNLEVBQUUsWUFBWTtJQUNwQixJQUFJLEVBQUUsWUFBWTtJQUNsQixPQUFPLEVBQUUsWUFBWTtJQUNyQixJQUFJLEVBQUUsWUFBWTtJQUNsQixLQUFLLEVBQUUsWUFBWTtJQUNuQixXQUFXLEVBQUUsY0FBYztJQUMzQixTQUFTLEVBQUUsY0FBYztJQUN6QixXQUFXLEVBQUUsY0FBYztJQUMzQixZQUFZLEVBQUUsY0FBYztJQUM1QixVQUFVLEVBQUUsY0FBYztJQUMxQixhQUFhLEVBQUUsY0FBYztJQUM3QixVQUFVLEVBQUUsY0FBYztJQUMxQixXQUFXLEVBQUUsY0FBYztJQUMzQixLQUFLLEVBQUUsV0FBVztDQUNyQixDQUFBO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxzQkFBc0IsQ0FBQyxFQUFNLEVBQUUsS0FBYSxFQUFFLGFBQXVCLEVBQUUsRUFBRSxpQkFBMkIsRUFBRTtJQUN4SCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3pCLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDM0IsVUFBVSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDL0UsRUFBRSxLQUFLLENBQUM7S0FDWDtJQUVELE9BQU8sS0FBSyxHQUFHLENBQUMsRUFBRTtRQUNkLE1BQU0sVUFBVSxHQUFhLEVBQUUsQ0FBQztRQUVoQyxLQUFLLE1BQU0sTUFBTSxJQUFJLFVBQVUsRUFBRTtZQUM3QixNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN4RCxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyRyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUM7WUFDakMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDO1NBQ3hDO1FBRUQsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1FBQy9CLEVBQUUsS0FBSyxDQUFDO0tBQ1g7SUFFRCxPQUFPLFVBQVUsQ0FBQztBQUN0QixDQUFDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxjQUFzQixFQUFFLGNBQXdCO0lBQ3pFLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDN0MsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTNDLE1BQU0saUJBQWlCLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsZUFBZSxLQUFLLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZHLE1BQU0sdUJBQXVCLEdBQUcsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzFHLE1BQU0saUJBQWlCLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUVsRSxPQUFPLENBQUMsaUJBQWlCLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLHVCQUF1QixDQUFDO0FBQ2hGLENBQUM7QUFBQSxDQUFDO0FBRUY7Ozs7OztHQU1HO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxVQUFVLENBQUMsRUFBTSxFQUFFLFFBQWdCLEVBQUUsZUFBdUIsa0JBQWtCLEVBQUUsYUFBcUIsVUFBVTtJQUNqSSxFQUFFLENBQUMsTUFBTSxDQUFDLG1DQUFtQyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUV0RixFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsY0FBYztJQUNwQyxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLGdFQUFnRTtJQUNoRyxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQy9ILEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRTVELElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDO1FBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxLQUFLLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZKLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsU0FBUyxDQUFDLEVBQU0sRUFBRSxRQUFnQixFQUFFLGVBQXlCLEVBQUU7SUFDakYsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRTtRQUNyQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDNUIsSUFBSTtnQkFDQSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxJQUFJLGlCQUFpQixRQUFRLEVBQUUsQ0FBQyxDQUFDO2FBQzFEO1lBQ0QsTUFBTTtnQkFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLHlCQUF5QixJQUFJLFNBQVMsUUFBUSxHQUFHLENBQUMsQ0FBQzthQUFFO0lBQy9FLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLFlBQVksQ0FBQyxFQUFNO0lBQ3JDLElBQUksU0FBUyxHQUFXLENBQUMsQ0FBQztJQUMxQixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUM7UUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ25ELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUFFLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDcEQsT0FBTyxTQUFTLENBQUM7QUFDckIsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLFVBQVUsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDakQsSUFBSTtRQUNBLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0tBQzdEO0lBQ0QsTUFBTTtRQUNGLEVBQUUsQ0FBQyxNQUFNLENBQUMsK0NBQStDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0tBQ3RHO0FBQ1QsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLFNBQVMsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDcEQsTUFBTSxRQUFRLEdBQUc7UUFDYixjQUFjO1FBQ2QsY0FBYztRQUNkLGVBQWU7UUFDZixjQUFjO1FBQ2QsZUFBZTtLQUNsQixDQUFDO0lBQ0YsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUNqQyxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsSUFBSSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BELGtIQUFrSDtRQUNsSCxJQUFJO1lBQ0EsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUM1QixRQUFRLENBQUMsRUFBRTtvQkFDUCxLQUFLLENBQUM7d0JBQ0YsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDdEIsTUFBTTtvQkFDVixLQUFLLENBQUM7d0JBQ0YsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDdEIsTUFBTTtvQkFDVixLQUFLLENBQUM7d0JBQ0YsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDdkIsTUFBTTtvQkFDVixLQUFLLENBQUM7d0JBQ0YsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDdEIsTUFBTTtvQkFDVixLQUFLLENBQUM7d0JBQ0YsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDdkIsTUFBTTtpQkFDYjthQUNKO2lCQUFNO2dCQUNILE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLGtDQUFrQyxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7YUFDaEk7U0FDSjtRQUFDLE9BQU0sR0FBRyxFQUFFO1lBQ1QsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDLENBQUM7WUFDdkMsTUFBTTtTQUNUO0tBQ0o7QUFDTCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxjQUFjLENBQUMsRUFBTSxFQUFFLFFBQWdCLEVBQUUsR0FBVztJQUN0RSxFQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNqQyxPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxxQkFBcUIsQ0FBQyxFQUFNLEVBQUUsWUFBb0IsRUFBRSxVQUFrQixFQUFFLGFBQXFCO0FBRW5ILENBQUM7QUFFRCw0REFBNEQ7QUFDNUQsTUFBTSxDQUFDLEtBQUssVUFBVSxhQUFhLENBQUMsRUFBTSxFQUFFLFFBQWdCLEVBQUUsR0FBVztJQUNyRSxFQUFFLENBQUMsc0JBQXNCLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEVBQU0sRUFBRSxVQUFlLEVBQUUsRUFBRTtJQUNwRCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3JHLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQW1CLEVBQUUsWUFBb0IsRUFBRSxFQUFFO1FBQ2hFLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLENBQUM7WUFDckYsQ0FBQyxDQUFDLFlBQVk7WUFDZCxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ3RCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gYSBsaWJyYXJ5IG9mIGZ1bmN0aW9ucyB1c2VkIHRvIGhhY2sgc2VydmVycyBhbmQgb3RoZXIgZnVuIHRoaW5nc1xyXG4vLyBjcmVhdGVkIGJ5IGpfX3IwZCAyMDIzLTEwLTIyXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG5leHBvcnQgY29uc3QgZGVmYXVsdEhhY2tUb0RlcGxveSA9IGBteS1maXJzdC1oYWNrLmpzYDtcclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRIYWNrVGFyZ2V0SG9zdG5hbWUgPSBgam9lc2d1bnNgO1xyXG5leHBvcnQgY29uc3QgY29sb3JzID0ge1xyXG4gICAgQmxhY2s6ICdcXHUwMDFiWzMwbScsXHJcbiAgICBSZWQ6ICdcXHUwMDFiWzMxbScsXHJcbiAgICBHcmVlbjogJ1xcdTAwMWJbMzJtJyxcclxuICAgIFllbGxvdzogJ1xcdTAwMWJbMzNtJyxcclxuICAgIEJsdWU6ICdcXHUwMDFiWzM0bScsXHJcbiAgICBNYWdlbnRhOiAnXFx1MDAxYlszNW0nLFxyXG4gICAgQ3lhbjogJ1xcdTAwMWJbMzZtJyxcclxuICAgIFdoaXRlOiAnXFx1MDAxYlszN20nLFxyXG4gICAgQnJpZ2h0QmxhY2s6ICdcXHUwMDFiWzMwOzFtJyxcclxuICAgIEJyaWdodFJlZDogJ1xcdTAwMWJbMzE7MW0nLFxyXG4gICAgQnJpZ2h0R3JlZW46ICdcXHUwMDFiWzMyOzFtJyxcclxuICAgIEJyaWdodFllbGxvdzogJ1xcdTAwMWJbMzM7MW0nLFxyXG4gICAgQnJpZ2h0Qmx1ZTogJ1xcdTAwMWJbMzQ7MW0nLFxyXG4gICAgQnJpZ2h0TWFnZW50YTogJ1xcdTAwMWJbMzU7MW0nLFxyXG4gICAgQnJpZ2h0Q3lhbjogJ1xcdTAwMWJbMzY7MW0nLFxyXG4gICAgQnJpZ2h0V2hpdGU6ICdcXHUwMDFiWzM3OzFtJyxcclxuICAgIFJlc2V0OiAnXFx1MDAxYlswbScsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcmVtYXJrcyBUaGlzIGZ1bmN0aW9uIGlzIGEgcmVjdXJzaXZlIGZ1bmN0aW9uIHRoYXQgc2NhbnMgc2VydmVycyB0byBhIGdpdmVuIHRyZWUgZGVwdGggYW5kIHJldHVybnMgYSBsaXN0IG9mIGFsbCBzZXJ2ZXJzIHRvIGhhY2suXHJcbiAqIEBwYXJhbSB7TlN9IG5zIFxyXG4gKiBAcGFyYW0gZGVwdGggc2NhbiBkZXB0aDsgZGVmYXVsdHMgdG8gMVxyXG4gKiBAcGFyYW0gc2VydmVyTGlzdCBbT3B0aW9uYWxdIHJ1bm5pbmcgbGlzdCBvZiBzZXJ2ZXJzIChpcyByZXR1cm5lZCBhdCBlbmQgb2YgcmVjdXJzaW9uKVxyXG4gKiBAcGFyYW0gc2Nhbm5lZFNlcnZlcnMgW09wdGlvbmFsXSBsaXN0IG9mIHNlcnZlcnMgYWxyZWFkeSBzY2FubmVkXHJcbiAqIEByZXR1cm5zIEFycmF5IG9mIGFsbCBzZXJ2ZXJzIGZvdW5kIHVwIHRvIHNwZWNpZmllZCBkZXB0aC4gIFRoZSBzZXJ2ZXIgaG9zdG5hbWVzIGluIHRoZSByZXR1cm5lZCBhcnJheSBhcmUgc3RyaW5nIHZhbHVlcy4gXHJcbiAqIEByZW1hcmtzIEkgZ2F2ZSBDb3BpbG90IHRoaXMgY29tbWVudCBibG9jayBhbmQgYXNrZWQgaXQgdG8gd3JpdGUgdGhlIGZ1bmN0aW9uIGZvciBtZSwgdXNpbmcgd2hhdCBleGlzdGluZyBjb2RlIEkgaGFkIGFzIGEgYmFzZSwgc28gaXQgd291bGQgdXNlIHRoZSBjYW5BZGRTZXJ2ZXIgZnVuY3Rpb24uXHJcbiAqIFxyXG4gKiBpZiBsaXN0IGlzIGVtcHR5LCBkbyBhIHNjYW4oKSwgd2hpY2ggcnVucyBzY2FuIG9uIGhvbWUgc2VydmVyIGFuZCBtYWtlIGEgbGlzdCBvZiBhbGwgc2Nhbm5lZFNlcnZlcnNcclxuICogYWRkIHNjYW5uZWRTZXJ2ZXJzIHRvIHNlcnZlckxpc3QgaWYgdGhleSBjYW4gYmUgYWRkZWQgKG5vdCBmb3JiaWRkZW4sIG5vdCBhIGR1cGxpY2F0ZSwgbm90IGEgcHJlZml4KVxyXG4gKiBkZWNyZWFzZSBkZXB0aCBiZWNhdXNlIHdlJ3ZlIGRvbmUgb25lIHNjYW4gYW5kIHNlcnZlckFkZFxyXG4gKiBjaGVjayB0aGF0IGRlcHRoID4gMFxyXG4gKiBzY2FuIGVhY2ggb2YgdGhlIHNlcnZlckxpc3Qgc2VydmVycyB0byBnZXQgbmVpZ2hib3JzTGlzdCBhbmQgYWRkIG5laWdoYm9yc0xpc3QgdG8gc2Nhbm5lZFNlcnZlcnNcclxuICogYWRkIG5laWdoYm9yc0xpc3QgdG8gc2VydmVyTGlzdCBpZiB0aGV5IGNhbiBiZSBhZGRlZCAobm90IGZvcmJpZGRlbiwgbm90IGEgZHVwbGljYXRlLCBub3QgYSBwcmVmaXgpXHJcbiAqIGRlY3JlYXNlIGRlcHRoIGJlY2F1c2Ugd2UndmUgZG9uZSBhbm90aGVyIHNjYW5cclxuICogc2NhbiBlYWNoIG9mIHRoZSBuZWlnaGJvcnNMaXN0IHNlcnZlcnMgdG8gZ2V0IHNlY29uZE5laWdoYm9yc0xpc3QgYW5kIGFkZCBzZWNvbmROZWlnaGJvcnNMaXN0IHRvIHNjYW5uZWRTZXJ2ZXJzXHJcbiAqIGFkZCBzZWNvbmROZWlnaGJvcnNMaXN0IHRvIHNlcnZlckxpc3QgaWYgdGhleSBjYW4gYmUgYWRkZWQgKG5vdCBmb3JiaWRkZW4sIG5vdCBhIGR1cGxpY2F0ZSwgbm90IGEgcHJlZml4KVxyXG4gKiBkZWNyZWFzZSBkZXB0aCBiZWNhdXNlIHdlJ3ZlIGRvbmUgYW5vdGhlciBzY2FuXHJcbiAqIGlmIGRlcHRoIGlzIGV2ZXIgMCwgcmV0dXJuIHNlcnZlckxpc3RcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBidWlsZFNjYW5uZWRTZXJ2ZXJMaXN0KG5zOiBOUywgZGVwdGg6IG51bWJlciwgc2VydmVyTGlzdDogc3RyaW5nW10gPSBbXSwgc2Nhbm5lZFNlcnZlcnM6IHN0cmluZ1tdID0gW10pIHtcclxuICAgIGlmIChzZXJ2ZXJMaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHNjYW5uZWRTZXJ2ZXJzID0gbnMuc2NhbigpO1xyXG4gICAgICAgIHNlcnZlckxpc3QgPSBzY2FubmVkU2VydmVycy5maWx0ZXIoc2VydmVyID0+IGNhbkFkZFNlcnZlcihzZXJ2ZXIsIHNlcnZlckxpc3QpKTtcclxuICAgICAgICAtLWRlcHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHdoaWxlIChkZXB0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBuZXdTZXJ2ZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHNlcnZlciBvZiBzZXJ2ZXJMaXN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5laWdoYm9ycyA9IGF3YWl0IChhc3luYyAoKSA9PiBucy5zY2FuKHNlcnZlcikpKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld05laWdoYm9ycyA9IG5laWdoYm9ycy5maWx0ZXIoc2VydmVyID0+IGNhbkFkZFNlcnZlcihzZXJ2ZXIsIHNlcnZlckxpc3QuY29uY2F0KG5ld1NlcnZlcnMpKSk7XHJcbiAgICAgICAgICAgIG5ld1NlcnZlcnMucHVzaCguLi5uZXdOZWlnaGJvcnMpO1xyXG4gICAgICAgICAgICBzY2FubmVkU2VydmVycy5wdXNoKC4uLm5ld05laWdoYm9ycyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXJ2ZXJMaXN0LnB1c2goLi4ubmV3U2VydmVycyk7XHJcbiAgICAgICAgLS1kZXB0aDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2VydmVyTGlzdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIGNoZWNrcyBhIHNlcnZlciBob3N0bmFtZSBhZ2FpbnN0IGEgbGlzdCBvZiBmb3JiaWRkZW4gc2VydmVycyBhbmQgcHJlZml4ZXMsIGFuZCBhIGxpc3Qgb2Ygc2VydmVycyBhbHJlYWR5IGluIHRoZSBzZXJ2ZXIgbGlzdC5cclxuICogQHBhcmFtIHNlcnZlckhvc3RuYW1lIGhvc3RuYW1lIG9mIHNlcnZlciB0byBjaGVjayBhZ2FpbnN0IGZvcmJpZGRlbiBzZXJ2ZXJzIGFuZCBwcmVmaXhlc1xyXG4gKiBAcGFyYW0gc2VydmVyTGlzdE5hbWUgbGlzdCBvZiBzZXJ2ZXJzIHRvIGNoZWNrIGFnYWluc3QgZm9yIGR1cGxpY2F0ZXNcclxuICogQHJldHVybnMgYm9vbGVhbiB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHNlcnZlciBjYW4gYmUgYWRkZWQgdG8gdGhlIHNlcnZlciBsaXN0XHJcbiAqIEByZW1hcmtzIHRoZSBjb2RlIGluIHRoaXMgZnVuY3Rpb24gd2FzIGNyZWF0ZWQgYnkgQ29waWxvdCBhZnRlciBJIGFza2VkIGEgZmV3IHF1ZXN0aW9ucyBhYm91dCBhIGJldHRlciB3YXkgdG8gZG8gdGhpcy5cclxuICogYmVsb3cgd2FzIG15IGF0dGVtcHQuLi4uY2xlYXJseSBJIHdhc24ndCB0aGlua2luZyBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYXQgYWxsLCBob3dldmVyIGNvcGlsb3QgX2RpZF8gdXNlIHRoaXMgY29kZSB0byBnZW5lcmF0ZSBpdHMgb3duIGNvZGUuXHJcbiAqIGBgYGpzXHJcbiAqICAgICBleHBvcnQgZnVuY3Rpb24gY2FuQWRkU2VydmVyKHNlcnZlck5hbWU6IHN0cmluZywgc2VydmVyTGlzdE5hbWU6IHN0cmluZ1tdKSB7XHJcbiAqICAgICAgICAgaWYgKCEoc2VydmVyTGlzdE5hbWUuaW5jbHVkZXMoc2VydmVyTmFtZSkpIHx8ICEoc2VydmVyTmFtZSA9PSAnaG9tZScgfHwgJ2Rhcmt3ZWInKSB8fCAhc2VydmVyTmFtZS5pbmNsdWRlcygncHNlcnYnKSkge1xyXG4gKiAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICogICAgICAgICB9XHJcbiAqICAgICAgICAgZWxzZSB7XHJcbiAqICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICogICAgICAgICB9XHJcbiAqICAgICB9OyBcclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2FuQWRkU2VydmVyKHNlcnZlckhvc3RuYW1lOiBzdHJpbmcsIHNlcnZlckxpc3ROYW1lOiBzdHJpbmdbXSkge1xyXG4gICAgY29uc3QgZm9yYmlkZGVuU2VydmVycyA9IFsnaG9tZScsICdkYXJrd2ViJ107XHJcbiAgICBjb25zdCBmb3JiaWRkZW5TZXJ2ZXJQcmVmaXhlcyA9IFsncHNlcnYtJ107XHJcblxyXG4gICAgY29uc3QgaXNGb3JiaWRkZW5TZXJ2ZXIgPSBmb3JiaWRkZW5TZXJ2ZXJzLnNvbWUoZm9yYmlkZGVuU2VydmVyID0+IGZvcmJpZGRlblNlcnZlciA9PT0gc2VydmVySG9zdG5hbWUpO1xyXG4gICAgY29uc3QgaXNGb3JiaWRkZW5TZXJ2ZXJQcmVmaXggPSBmb3JiaWRkZW5TZXJ2ZXJQcmVmaXhlcy5zb21lKHByZWZpeCA9PiBzZXJ2ZXJIb3N0bmFtZS5zdGFydHNXaXRoKHByZWZpeCkpO1xyXG4gICAgY29uc3QgaXNEdXBsaWNhdGVTZXJ2ZXIgPSBzZXJ2ZXJMaXN0TmFtZS5pbmNsdWRlcyhzZXJ2ZXJIb3N0bmFtZSk7XHJcblxyXG4gICAgcmV0dXJuICFpc0ZvcmJpZGRlblNlcnZlciAmJiAhaXNEdXBsaWNhdGVTZXJ2ZXIgJiYgIWlzRm9yYmlkZGVuU2VydmVyUHJlZml4O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIGRlcGxveXMgYSBoYWNrIHNjcmlwdCB0byBhIHNlcnZlciBhbmQgc3RhcnRzIGl0IHJ1bm5pbmcsIHVzaW5nIHRoZSBtYXhpbXVtIG51bWJlciBvZiB0aHJlYWRzIGF2YWlsYWJsZS5cclxuICogQHBhcmFtIG5zIE5ldHNjcmlwdCBuYW1lc3BhY2VcclxuICogQHBhcmFtIGhvc3RuYW1lIHNlcnZlcidzIGhvc3RuYW1lXHJcbiAqIEBwYXJhbSBoYWNrVG9EZXBsb3kgaGFjayBzY3JpcHQgdG8gZGVwbG95XHJcbiAqIEBwYXJhbSBoYWNrVGFyZ2V0IHRhcmdldCBzZXJ2ZXIgZm9yIHRoZSBkZXBsb3llZCBoYWNrXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVwbG95SGFjayhuczogTlMsIGhvc3RuYW1lOiBzdHJpbmcsIGhhY2tUb0RlcGxveTogc3RyaW5nID0gXCJteS1maXJzdC1oYWNrLmpzXCIsIGhhY2tUYXJnZXQ6IHN0cmluZyA9IGBqb2VzZ3Vuc2ApIHtcclxuICAgIG5zLnRwcmludChgSU5GTzogZGVwbG95aW5nIGhhY2sgdG8gc2VydmVyOiAke2NvbG9ycy5DeWFufSR7aG9zdG5hbWV9JHtjb2xvcnMuUmVzZXR9YCk7XHJcblxyXG4gICAgbnMua2lsbGFsbChob3N0bmFtZSk7IC8vIGZyZWUgdXAgUkFNXHJcbiAgICBucy5zY3AoaGFja1RvRGVwbG95LCBob3N0bmFtZSk7IC8vIGFsd2F5cyBvdmVyLXdyaXRlIHRoZSBleGlzdGluZyBzY3JpcHQgd2l0aCB0aGUgbGF0ZXN0IHZlcnNpb25cclxuICAgIGxldCB0aHJlYWRzVG9Vc2UgPSBNYXRoLm1heCgxLCAobnMuZ2V0U2VydmVyTWF4UmFtKGhvc3RuYW1lKSAtIG5zLmdldFNlcnZlclVzZWRSYW0oaG9zdG5hbWUpKSAvIG5zLmdldFNjcmlwdFJhbShoYWNrVG9EZXBsb3kpKTtcclxuICAgIG5zLmV4ZWMoaGFja1RvRGVwbG95LCBob3N0bmFtZSwgfn50aHJlYWRzVG9Vc2UsIGhhY2tUYXJnZXQpO1xyXG4gICAgXHJcbiAgICBpZiAobnMuc2NyaXB0UnVubmluZyhoYWNrVG9EZXBsb3ksIGhvc3RuYW1lKSkgbnMudHByaW50KGBJTkZPOiAuLi5oYWNrIGRlcGxveWVkIHVzaW5nICR7Y29sb3JzLk1hZ2VudGF9JHt+fnRocmVhZHNUb1VzZX0ke2NvbG9ycy5SZXNldH0gdGhyZWFkcyFgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIGZldGNoZXMgYWxsIGZldGNoLWFibGUgZmlsZXMgZnJvbSBhIHNlcnZlciB0aGF0IGFyZSBub3QgYWxyZWFkeSBpbiB0aGUgaG9tZSBkaXJlY3RvcnkuXHJcbiAqIEBwYXJhbSBucyBOZXRzY3JpcHQgbmFtZXNwYWNlXHJcbiAqIEBwYXJhbSBob3N0bmFtZSBob3N0bmFtZSBvZiBzZXJ2ZXIgZnJvbSB3aGljaCB0byBmZXRjaCBmaWxlc1xyXG4gKiBAcGFyYW0gaG9tZWZpbGVsaXN0IHRoZSBsaXN0IG9mIGZpbGVzIGluIHRoZSBob21lIGRpcmVjdG9yeVxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbGVGZXRjaChuczogTlMsIGhvc3RuYW1lOiBzdHJpbmcsIGhvbWVmaWxlbGlzdDogc3RyaW5nW10gPSBbXSkgeyAgIFxyXG4gICAgbnMubHMoaG9zdG5hbWUpLmZvckVhY2goKGZpbGU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGlmICghaG9tZWZpbGVsaXN0LmluY2x1ZGVzKGZpbGUpKVxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgbnMuc2NwKGZpbGUsIGBob21lYCwgaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiAuLi4ke2ZpbGV9IGZldGNoZWQgZnJvbSAke2hvc3RuYW1lfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIHsgbnMudHByaW50KGBFUlJPUjogLi4uY2FuJ3QgZmV0Y2ggJHtmaWxlfSBmcm9tICR7aG9zdG5hbWV9IWApOyB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIGRldGVybWluZXMgd2hldGhlciBEZWVwc2NhblYxLmV4ZSBhbmQvb3IgRGVlcHNjYW5WMi5leGUgYXJlIGF2YWlsYWJsZSwgYW5kIHByb3ZpZGVzIHRoZSBtYXhpbXVtIHNjYW4gZGVwdGggcG9zc2libGUgZGVwZW5kaW5nIG9uIHRoZSBvdXRjb21lLlxyXG4gKiBAcGFyYW0gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZVxyXG4gKiBAcmV0dXJucyBtYXhpbXVtIHNjYW4gZGVwdGggYmFzZWQgb24gdGhlIGV4ZWN1dGFibGVzIGF2YWlsYWJsZSwgcmV0dXJucyBhIG51bWJlclxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNjYW5EZXB0aChuczogTlMpIHtcclxuICAgIGxldCBzY2FuRGVwdGg6IG51bWJlciA9IDM7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhgRGVlcHNjYW5WMS5leGVgKSkgc2NhbkRlcHRoID0gNTtcclxuICAgIGlmIChucy5maWxlRXhpc3RzKGBEZWVwc2NhblYyLmV4ZWApKSBzY2FuRGVwdGggPSAxMDtcclxuICAgIHJldHVybiBzY2FuRGVwdGg7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcmVtYXJrcyBhdHRlbXB0cyB0byBudWtlIGEgc2VydmVyLCBhbmQgb3V0cHV0cyByZXN1bHRzIHRvIHRoZSB0ZXJtaW5hbC5cclxuICogQHBhcmFtIG5zIE5ldHNjcmlwdCBuYW1lc3BhY2VcclxuICogQHBhcmFtIGhvc3RuYW1lIGhvc3RuYW1lIG9mIHNlcnZlciB0byBudWtlXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbnVrZVNlcnZlcihuczogTlMsIGhvc3RuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBucy5udWtlKGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiAuLi7wn5KjIHN1Y2Nlc3NmdWwuIHJvb3QgYWNjZXNzIGdyYW50ZWQhYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIHtcclxuICAgICAgICAgICAgbnMudHByaW50KGBFUlJPUjogLi4ucm9vdCBhY2Nlc3MgZGVuaWVkISDinYwgY2Fubm90IGhhY2sgJHtjb2xvcnMuQ3lhbn0ke2hvc3RuYW1lfSR7Y29sb3JzLlJlc2V0fSFgKTtcclxuICAgICAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcmVtYXJrcyBUaGlzIGZ1bmN0aW9uIG9wZW5zIGEgc3BlY2lmaWVkIG51bWJlciBvZiBwb3J0cyBvbiBhIHNlcnZlci4gXHJcbiAqIEBwYXJhbSBucyBOZXRzY3JpcHQgbmFtZXNwYWNlXHJcbiAqIEBwYXJhbSBob3N0bmFtZSBob3N0bmFtZSBvZiBzZXJ2ZXIgb24gd2hpY2ggdG8gb3BlbiBwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9wZW5Qb3J0cyhuczogTlMsIGhvc3RuYW1lOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHByb2dyYW1zID0gW1xyXG4gICAgICAgIGBicnV0ZXNzaC5leGVgLFxyXG4gICAgICAgIGBmdHBjcmFjay5leGVgLFxyXG4gICAgICAgIGByZWxheXNtdHAuZXhlYCxcclxuICAgICAgICBgaHR0cHdvcm0uZXhlYCxcclxuICAgICAgICBgc3FsaW5qZWN0LmV4ZWBcclxuICAgIF07XHJcbiAgICBjb25zdCBtYXhQb3J0cyA9IHByb2dyYW1zLmxlbmd0aDtcclxuICAgIGNvbnN0IHBvcnRzUmVxdWlyZWQgPSBucy5nZXRTZXJ2ZXJOdW1Qb3J0c1JlcXVpcmVkKGhvc3RuYW1lKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9ydHNSZXF1aXJlZCAmJiBpIDwgbWF4UG9ydHM7IGkrKykge1xyXG4gICAgICAgIC8vbnMudHByaW50KGBJTkZPOiAuLi5vcGVuaW5nIHBvcnQgJHtjb2xvcnMuTWFnZW50YX0ke2krMX0ke2NvbG9ycy5SZXNldH0uLi5gKTsgLy8gaSsxIGJlY2F1c2UgcG9ydHMgYXJlIDEtaW5kZXhlZFxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChucy5maWxlRXhpc3RzKHByb2dyYW1zW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBucy5icnV0ZXNzaChob3N0bmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuZnRwY3JhY2soaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5zLnJlbGF5c210cChob3N0bmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuaHR0cHdvcm0oaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5zLnNxbGluamVjdChob3N0bmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgKGAke2NvbG9ycy5ZZWxsb3d9JHtwcm9ncmFtc1tpXX0ke2NvbG9ycy5SZXNldH0gdW5hdmFpbGFibGUsIGNhbm5vdCBvcGVuIHBvcnQgJHtjb2xvcnMuTWFnZW50YX0ke2krMX0ke2NvbG9ycy5SZXNldH1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2goZXJyKSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChgRVJST1I6ICR7ZXJyfSAuLi5hYm9ydGluZ2ApO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcmVtYXJrcyBwdXJjaGFzZXMgYSBzZXJ2ZXIgd2l0aCB0aGUgc3BlY2lmaWVkIGhvc3RuYW1lIGFuZCBSQU0sIGFuZCByZXR1cm5zIHRoZSBob3N0bmFtZSBvZiB0aGUgcHVyY2hhc2VkIHNlcnZlci5cclxuICogQHBhcmFtIG5zIE5ldHNjcmlwdCBuYW1lc3BhY2VcclxuICogQHBhcmFtIGhvc3RuYW1lIG5hbWUgb2YgdGhlIHNlcnZlciB0byBwdXJjaGFzZVxyXG4gKiBAcGFyYW0gcmFtIGFtb3VudCBvZiBSQU0gdG8gcHVyY2hhc2VcclxuICogQHJldHVybnMgdGhlIGhvc3RuYW1lIG9mIHRoZSBwdXJjaGFzZWQgc2VydmVyLCBhcyBhIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHB1cmNoYXNlU2VydmVyKG5zOiBOUywgaG9zdG5hbWU6IHN0cmluZywgcmFtOiBudW1iZXIpIHtcclxuICAgIG5zLnB1cmNoYXNlU2VydmVyKGhvc3RuYW1lLCByYW0pO1xyXG4gICAgcmV0dXJuIGhvc3RuYW1lO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRQdXJjaGFzZWRTZXJ2ZXJzKG5zOiBOUywgaGFja1RvRGVwbG95OiBzdHJpbmcsIGhhY2tUYXJnZXQ6IHN0cmluZywgcmFtVG9QdXJjaGFzZTogbnVtYmVyKSB7XHJcblxyXG59XHJcblxyXG4vLyB0aGlzIGRvZXNuJ3QgZG8gYW55dGhpbmcgeWV0LCBidXQgbmVlZHMgdG8gYmUgaW1wbGVtZW50ZWRcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZ3JhZGVTZXJ2ZXIobnM6IE5TLCBob3N0bmFtZTogc3RyaW5nLCByYW06IG51bWJlcikge1xyXG4gICAgbnMudXBncmFkZVB1cmNoYXNlZFNlcnZlcihob3N0bmFtZSwgcmFtKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIElmIHRoZSBtb25leSBhdmFpbGFibGUgb24gdGhlIGN1cnJlbnQgc2VydmVyIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbW9uZXkgYXZhaWxhYmxlIG9uIHRoZSBhY2N1bXVsYXRvciBzZXJ2ZXIsIFxyXG4gKiBAcmVtYXJrcyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gcmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgY3VycmVudCBzZXJ2ZXIgKGIpLCBvdGhlcndpc2UgaXQgcmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgYWNjdW11bGF0b3Igc2VydmVyIChhKS4gXHJcbiAqIEByZW1hcmtzIFRoaXMgcHJvY2VzcyBjb250aW51ZXMgdW50aWwgYWxsIHNlcnZlcnMgaW4gdGhlIGFycmF5IGhhdmUgYmVlbiBjb21wYXJlZCwgYXQgd2hpY2ggcG9pbnQgdGhlIG5hbWUgb2YgdGhlIHNlcnZlciB3aXRoIHRoZSBoaWdoZXN0IGFtb3VudCBvZiBtb25leSBhdmFpbGFibGUgaXMgcmV0dXJuZWQuXHJcbiAqIEBwYXJhbSBucyBOZXRzY3JpcHQgbmFtZXNwYWNlXHJcbiAqIEBwYXJhbSBzZXJ2ZXJMaXN0IGxpc3Qgb2Ygc2VydmVycyB0byBjb21wYXJlXHJcbiAqIEByZXR1cm5zIFRoZSBzZXJ2ZXIgaG9zdG5hbWUgdGhhdCBoYXMgdGhlIG1vc3QgbW9uZXkgYXZhaWxhYmxlLCB0aGUgc2VydmVyIGhvc3RuYW1lIHdpbGwgYmUgYSBzdHJpbmcuXHJcbiAqL1xyXG5jb25zdCBzZXJ2ZXJXaXRoTW9zdE1vbmV5ID0gKG5zOiBOUywgc2VydmVyTGlzdDogYW55KSA9PiB7XHJcbiAgICBjb25zdCBzZXJ2ZXJzID0gc2VydmVyTGlzdC5maWx0ZXIoKHNlcnZlcjogc3RyaW5nKSA9PiBzZXJ2ZXIgIT09IGBob21lYCAmJiAhL3BzZXJ2LVxcZC8udGVzdChzZXJ2ZXIpKTtcclxuICAgIHJldHVybiBzZXJ2ZXJzLnJlZHVjZSgoYWNjdW11bGF0b3I6IHN0cmluZywgY3VycmVudFZhbHVlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICByZXR1cm4gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoY3VycmVudFZhbHVlKSA+IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKGFjY3VtdWxhdG9yKVxyXG4gICAgICAgICAgICA/IGN1cnJlbnRWYWx1ZVxyXG4gICAgICAgICAgICA6IGFjY3VtdWxhdG9yO1xyXG4gICAgfSk7XHJcbn07Il19\",\"filename\":\"hackLib.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-25\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[62501458.728716746,61398,419553,433197]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23891554.42175564,\"onlineMoneyMade\":62501458.728716746,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"home\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3411,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-891849.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,6,0,1,1,2,3,2,3,5,0,2,2],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-143121.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,0,1,2,5,3,5,3,1,1,1,3,1,4,4,0,2,2,1,1,6,1,5,3],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"4.2.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":36506500087,\"moneyMax\":912662502175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1266,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"68.1.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":42915057365,\"moneyMax\":1072876434125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1299,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"80.6.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":16678858989,\"moneyMax\":416971474725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1133,\"serverGrowth\":65,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"95.3.5.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":29476352971,\"moneyMax\":736908824275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1055,\"serverGrowth\":68,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"66.7.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":33385275394,\"moneyMax\":834631884850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1102,\"serverGrowth\":75,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"54.9.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":21184672139,\"moneyMax\":529616803475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1098,\"serverGrowth\":65,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"18.4.4.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":20773207689,\"moneyMax\":519330192225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1025,\"serverGrowth\":97,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"16.1.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":19622478836,\"moneyMax\":490561970900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1002,\"serverGrowth\":75,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"55.7.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":20615320498,\"moneyMax\":515383012450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1252,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"12.6.7.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":1646244139,\"moneyMax\":41156103475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":977,\"serverGrowth\":92,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"29.9.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1426,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"95.8.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1128833502,\"moneyMax\":28220837550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1042,\"serverGrowth\":77,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"56.2.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":803599368,\"moneyMax\":20089984200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":962,\"serverGrowth\":69,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"28.4.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"univ-energy\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":666086088,\"moneyMax\":16652152200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":61,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"86.3.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":677053668,\"moneyMax\":16926341700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":879,\"serverGrowth\":72,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-66334-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[152,126,29,57,111,46,52,3,3,124,49,67,17,48,183,138,181,112]],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"6.4.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":712980504,\"moneyMax\":17824512600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":885,\"serverGrowth\":80,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"94.2.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":944781344,\"moneyMax\":23619533600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":923,\"serverGrowth\":88,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-909147.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")))a((a())(a((())\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"99.8.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1136379073,\"moneyMax\":28409476825,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":845,\"serverGrowth\":86,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[117983545.08482856,2279,6678,7950]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422192.9295490145,\"onlineMoneyMade\":117983545.08482856,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"univ-energy\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":53,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"72.4.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":846113458,\"moneyMax\":21152836450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":69,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-183223.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,1,2,4,4,2,4,3,3,2,5,2,5,2,6,2,3,0,5],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"23.0.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":532215294,\"moneyMax\":13305382350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":870,\"serverGrowth\":87,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"27.4.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":842895957,\"moneyMax\":21072398925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":938,\"serverGrowth\":74,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"40.6.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":767088059,\"moneyMax\":19177201475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":847,\"serverGrowth\":75,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"10.4.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1192565473,\"moneyMax\":29814136825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":870,\"serverGrowth\":56,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"45.7.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":914311427,\"moneyMax\":22857785675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":852,\"serverGrowth\":67,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[22580.62425320805,198,720,960]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47918.188210962035,\"onlineMoneyMade\":22580.62425320805,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"omnia\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"40.5.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":1085485977,\"moneyMax\":27137149425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":778,\"serverGrowth\":70,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"30.1.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":919923137,\"moneyMax\":22998078425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":70,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"23.6.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":741440348,\"moneyMax\":18536008700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":802,\"serverGrowth\":70,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[57906066.915243104,1170,2938,4082]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":201616.49301059594,\"onlineMoneyMade\":57906066.915243104,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"solaris\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-172064.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,3],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"57.6.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1451351875,\"moneyMax\":36283796875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":69,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"75.6.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1672216297,\"moneyMax\":41805407425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":791,\"serverGrowth\":86,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3643298.0463843513,429,1586,2158]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":106127.94289080171,\"onlineMoneyMade\":3643298.0463843513,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"global-pharm\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"14.9.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":1133728547,\"moneyMax\":28343213675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":792,\"serverGrowth\":80,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"32.5.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1408902001,\"moneyMax\":35222550025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":79,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"46.5.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1058400002,\"moneyMax\":26460000050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":825,\"serverGrowth\":74,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[57441.46177686709,429,1599,2028]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":102404.15542094909,\"onlineMoneyMade\":57441.46177686709,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"unitalife\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"31.0.2.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":749438033,\"moneyMax\":18735950825,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":654,\"serverGrowth\":56,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[65311245.178272724,1855,6678,8003]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":421831.462999743,\"onlineMoneyMade\":65311245.178272724,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":53,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"41.1.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":645466841,\"moneyMax\":16136671025,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":497,\"serverGrowth\":49,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[310125.83355167694,198,720,918]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":46649.64522672649,\"onlineMoneyMade\":310125.83355167694,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-903557.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[22,46,34,4,11,26,3,14,29,27],[37,39,2,46,46,11,45,40,44,12],[19,6,41,29,41,38,4,23,44,36],[41,3,22,10,26,16,17,28,41,33],[39,15,1,45,33,39,18,8,32,28]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"15.7.6.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":669356095,\"moneyMax\":16733902375,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":562,\"serverGrowth\":55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[41344933.8887759,1590,6996,7844]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":423277.32919682865,\"onlineMoneyMade\":41344933.8887759,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":53,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-838282.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"00101000101010110110101110011011\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"34.0.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":259853147,\"moneyMax\":6496328675,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":417,\"serverGrowth\":49,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[6133064.057096242,210,696,966]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47263.456348130785,\"onlineMoneyMade\":6133064.057096242,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"aevum-police\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"65.7.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":183801761,\"moneyMax\":4595044025,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":404,\"serverGrowth\":38,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[10491135.751007656,338,1560,2080]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":103202.10987877463,\"onlineMoneyMade\":10491135.751007656,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"93.8.0.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1076411576,\"moneyMax\":26910289400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":730,\"serverGrowth\":77,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[7151510.253516171,1014,3094,4082]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":208532.09831175083,\"onlineMoneyMade\":7151510.253516171,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"zb-institute\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"77.5.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"computek\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":231670226,\"moneyMax\":5791755650,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":459,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3814090.526324768,264,738,930]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48286.47488380462,\"onlineMoneyMade\":3814090.526324768,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"30.7.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":571545340,\"moneyMax\":14288633500,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":632,\"serverGrowth\":61,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"18.3.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":334670907,\"moneyMax\":8366772675,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":417,\"serverGrowth\":52,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[333761.86481666425,156,708,972]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47386.21857241165,\"onlineMoneyMade\":333761.86481666425,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"catalyst\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"22.1.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":184935751,\"moneyMax\":4623393775,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":290,\"serverGrowth\":48,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[13322545.739055661,858,3042,4264]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":206758.86618324954,\"onlineMoneyMade\":13322545.739055661,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"the-hub\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-175420.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()aaaa())\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"15.8.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":225413875,\"moneyMax\":5635346875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":354,\"serverGrowth\":46,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"17.1.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":394,\"serverGrowth\":59,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[43345638.44424261,910,3120,4160]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":207468.15903464993,\"onlineMoneyMade\":43345638.44424261,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"netlink\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"17.7.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":74104269,\"moneyMax\":1852606725,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":297,\"serverGrowth\":62,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"31.9.1.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[13.404056422352394,33,125,155]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7904.523218973035,\"onlineMoneyMade\":13.404056422352394,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"n00dles\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"16.6.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[41.72931426181728,240,762,930]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48040.950435242885,\"onlineMoneyMade\":41.72931426181728,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"22.4.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[118.32047567718493,210,708,954]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47263.45634813078,\"onlineMoneyMade\":118.32047567718493,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"58.4.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.807999999999999,\"minDifficulty\":5,\"moneyAvailable\":459024.50918359053,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[177.67132192988757,204,714,936]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":46895.16967528821,\"onlineMoneyMade\":177.67132192988757,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"joesguns\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"76.0.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[9577498.210461093,429,1625,2028]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":103911.40273017512,\"onlineMoneyMade\":9577498.210461093,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"zer0\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"28.3.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[4447549.0935510835,210,660,1002]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47754.50524525423,\"onlineMoneyMade\":4447549.0935510835,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"64.2.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[17097326.28172302,403,1586,2106]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":105329.98843297618,\"onlineMoneyMade\":17097326.28172302,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"neo-net\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"77.1.4.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"computek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[38544145.10822576,728,3042,4160]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":204099.01799049773,\"onlineMoneyMade\":38544145.10822576,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"23.8.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[142.87015943642584,174,708,954]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47017.93189956906,\"onlineMoneyMade\":142.87015943642584,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"99.1.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[128.2688922497824,210,714,954]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47549.901538119455,\"onlineMoneyMade\":128.2688922497824,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"17.4.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[353.34850646895615,416,1586,2067]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":103822.74112375011,\"onlineMoneyMade\":353.34850646895615,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"phantasy\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"51.3.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[5433076.31837937,403,1560,1989]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":101428.87775027339,\"onlineMoneyMade\":5433076.31837937,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"94.2.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":31,\"minDifficulty\":10,\"moneyAvailable\":67795260,\"moneyMax\":1694881500,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":183,\"serverGrowth\":39,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[4594662.211739901,377,1612,2067]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":104532.03397515055,\"onlineMoneyMade\":4594662.211739901,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"omega-net\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"63.1.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":47086216,\"moneyMax\":1177155400,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":226,\"serverGrowth\":27,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"13.1.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[360.1970546573646,520,1521,2093]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":103734.07951732507,\"onlineMoneyMade\":360.1970546573646,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"0.7.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":506,\"serverGrowth\":29,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[667547.8895217864,546,1521,2054]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":103113.44827234959,\"onlineMoneyMade\":667547.8895217864,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"48.5.8.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1090,\"serverGrowth\":51,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"29.1.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":773,\"serverGrowth\":56,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-476919.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0],[0,0,0,0,1,0,0],[1,0,1,1,0,0,0],[0,0,0,0,0,0,0],[0,0,0,1,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"18.8.2.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":521,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"74.0.7.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":356,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[87430164.13373479,2332,6572,7950]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422915.86264755734,\"onlineMoneyMade\":87430164.13373479,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":53,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-123943-TheBlackHand.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"INBOXCACHELINUXPASTEENTER\",\"COMPUTER\"],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"72.8.6.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":208,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[78571125.77701992,1855,6784,7950]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":424361.7288446429,\"onlineMoneyMade\":78571125.77701992,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":53,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"41.6.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":537,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-416017.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,1,0,0,0,0,1],[1,0,0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,1,0,0,1,0,0,1],[0,1,0,0,0,1,0,0,0,0],[0,1,0,1,0,1,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"40.0.0.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":58,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1997790.0021885012,114,366,456]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23508.96594978453,\"onlineMoneyMade\":1997790.0021885012,\"onlineRunningTime\":1489.2100000002017,\"ramUsage\":2.4,\"server\":\"CSEC\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-532572.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":957531924,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-723433-CyberSec.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"DEBUGCLOUDPOPUPSHELLCACHE\",\"SECURITY\"],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"16.8.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"41.3.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"25.9.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"43.9.3.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[437578926.7380495,17040,55806,64326]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3498068.660141662,\"onlineMoneyMade\":437578926.7380495,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-1\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"30.8.9.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[375008268.63820636,16614,54102,62196]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3416718.226184878,\"onlineMoneyMade\":375008268.63820636,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-2\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"93.4.9.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[291077437.5813235,14058,56232,63048]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3463204.1884458973,\"onlineMoneyMade\":291077437.5813235,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-3\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"54.2.3.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[312500576.2234113,12780,57084,64752]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3471920.3063698383,\"onlineMoneyMade\":312500576.2234113,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-4\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"40.5.9.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[332142261.98513615,14484,56658,64752]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3506784.778065603,\"onlineMoneyMade\":332142261.98513615,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-5\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"74.0.9.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[187509703.6381844,14910,55806,63048]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3431245.089391447,\"onlineMoneyMade\":187509703.6381844,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-6\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"15.0.4.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[625001503.7024562,14484,54954,63048]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3431245.089391446,\"onlineMoneyMade\":625001503.7024562,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-7\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"26.6.4.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[187799302.3277718,13206,56658,65178]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3483541.796935093,\"onlineMoneyMade\":187799302.3277718,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-8\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"33.6.2.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[317803647.7457142,15336,55806,60918]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3419623.5988261914,\"onlineMoneyMade\":317803647.7457142,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-9\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"32.1.5.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[437504100.83738667,14910,54528,64326]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3457393.44316327,\"onlineMoneyMade\":437504100.83738667,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-10\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"27.3.0.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[85728201.4948676,16614,55806,63900]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3500974.032782976,\"onlineMoneyMade\":85728201.4948676,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-11\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"85.0.0.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[250003334.43670622,16614,56232,60918]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3405096.7356196237,\"onlineMoneyMade\":250003334.43670622,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-12\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"63.9.5.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[389895280.3871064,16614,55806,62622]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3492257.914859034,\"onlineMoneyMade\":389895280.3871064,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-13\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"93.0.1.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[62508099.66948091,12354,56232,63048]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3416718.2261848776,\"onlineMoneyMade\":62508099.66948091,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-14\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"84.1.0.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[148217239.6398465,17892,55806,63900]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3457393.4431632706,\"onlineMoneyMade\":148217239.6398465,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-15\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"17.8.5.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[187503818.6586031,14910,54954,62196]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3402191.3629783094,\"onlineMoneyMade\":187503818.6586031,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-16\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"55.1.2.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[431912246.63688004,14484,55806,63474]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3448677.325239328,\"onlineMoneyMade\":431912246.63688004,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-17\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"58.1.4.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[420082373.8677295,16188,55380,64752]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3544554.6224026806,\"onlineMoneyMade\":420082373.8677295,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-18\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"22.4.7.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[312503542.1042539,14058,56658,65178]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3506784.7780656028,\"onlineMoneyMade\":312503542.1042539,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-19\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"66.4.4.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[312510843.19448626,12354,57084,62622]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3454488.070521956,\"onlineMoneyMade\":312510843.19448626,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-20\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"14.1.6.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[375004793.67365783,14058,54102,61344]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3358610.7733586044,\"onlineMoneyMade\":375004793.67365783,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-21\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"15.1.8.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[105732103.67802417,13632,54102,61344]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3312124.811097585,\"onlineMoneyMade\":105732103.67802417,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-22\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"25.6.8.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[480734898.1287324,16188,54528,64752]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3495163.287500349,\"onlineMoneyMade\":480734898.1287324,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-23\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"55.5.3.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[62507551.72546276,12780,55806,61344]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3370232.2639238588,\"onlineMoneyMade\":62507551.72546276,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-24\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}},\"pserv-25\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-25\",\"httpPortOpen\":false,\"ip\":\"82.3.0.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-25\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[201354546.55130574,11076,56232,63900]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3396380.6176956818,\"onlineMoneyMade\":201354546.55130574,\"onlineRunningTime\":1489.0100000002017,\"ramUsage\":2.4,\"server\":\"pserv-25\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":426,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.5529,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":31.1948,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":5.368,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":11.0158,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":3.4048,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":168.6683,\"isBanned\":false,\"isMember\":true,\"playerReputation\":169283.2530425278}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":147.6366,\"isBanned\":false,\"isMember\":true,\"playerReputation\":156017.46842940233}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":349445.53384136525}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":165.1554,\"isBanned\":false,\"isMember\":true,\"playerReputation\":172267.70843078956}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":30.8584,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":95.6933,\"isBanned\":false,\"isMember\":true,\"playerReputation\":122963.09363744652}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":146.6793,\"isBanned\":false,\"isMember\":true,\"playerReputation\":155341.2893395351}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":27401.283511108406,\"lastPrice\":27482.72996299485,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":false,\"otlkMag\":16.36571854143464,\"otlkMagForecast\":33.97618863115526,\"cap\":177588513,\"spreadPerc\":0.2,\"shareTxForMovement\":35004,\"shareTxUntilMovement\":35004,\"totalShares\":140400000,\"maxShares\":28100000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":43117.88264998211,\"lastPrice\":43003.65845662986,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":true,\"otlkMag\":21.50013893891171,\"otlkMagForecast\":71.42004424887789,\"cap\":145499483,\"spreadPerc\":0.1,\"shareTxForMovement\":65252,\"shareTxUntilMovement\":65252,\"totalShares\":81800000,\"maxShares\":16400000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":35436.486494837874,\"lastPrice\":35593.360903139386,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":14.304217414218227,\"otlkMagForecast\":62.562596108957,\"cap\":32364327,\"spreadPerc\":0.4,\"shareTxForMovement\":89586,\"shareTxUntilMovement\":89586,\"totalShares\":98600000,\"maxShares\":19700000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":29546.58557074088,\"lastPrice\":29668.042993853556,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":10.026888439691952,\"otlkMagForecast\":39.47154588280014,\"cap\":473673288,\"spreadPerc\":0.3,\"shareTxForMovement\":38774,\"shareTxUntilMovement\":38774,\"totalShares\":67200000,\"maxShares\":13400000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":35918.19776061771,\"lastPrice\":36056.76092018097,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":12.979995560280841,\"otlkMagForecast\":63.627334862245306,\"cap\":194795813,\"spreadPerc\":0.2,\"shareTxForMovement\":51987,\"shareTxUntilMovement\":51987,\"totalShares\":43300000,\"maxShares\":8700000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":98230.97880921504,\"lastPrice\":98901.90636996133,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":true,\"otlkMag\":20.85470255092644,\"otlkMagForecast\":70.70620228213512,\"cap\":1582520652,\"spreadPerc\":0.5,\"shareTxForMovement\":49652,\"shareTxUntilMovement\":49652,\"totalShares\":25500000,\"maxShares\":5100000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":31784.499036224755,\"lastPrice\":31939.277132755673,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":10.515869738106943,\"otlkMagForecast\":38.701860252979955,\"cap\":76758864,\"spreadPerc\":0.2,\"shareTxForMovement\":36457,\"shareTxUntilMovement\":36457,\"totalShares\":93800000,\"maxShares\":18800000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":68291.49677562238,\"lastPrice\":68822.71766952953,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.23,\"b\":false,\"otlkMag\":21.630338064195634,\"otlkMagForecast\":29.88423523749424,\"cap\":690468177,\"spreadPerc\":0.8,\"shareTxForMovement\":46876,\"shareTxUntilMovement\":46876,\"totalShares\":61600000,\"maxShares\":12300000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":18091.379515020177,\"lastPrice\":18185.198113740298,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":true,\"otlkMag\":10.785316028925807,\"otlkMagForecast\":59.711827434989196,\"cap\":219768599,\"spreadPerc\":0.8,\"shareTxForMovement\":83800,\"shareTxUntilMovement\":83800,\"totalShares\":53600000,\"maxShares\":10700000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":9750.170758537162,\"lastPrice\":9790.250875828724,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":7.6658205572334674,\"otlkMagForecast\":39.53005869815433,\"cap\":75544538,\"spreadPerc\":0.5,\"shareTxForMovement\":92193,\"shareTxUntilMovement\":92193,\"totalShares\":118500000,\"maxShares\":23700000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":15538.749987434087,\"lastPrice\":15479.035852304514,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":8.060542137079139,\"otlkMagForecast\":57.909897042169376,\"cap\":313631058,\"spreadPerc\":0.4,\"shareTxForMovement\":50468,\"shareTxUntilMovement\":50468,\"totalShares\":51200000,\"maxShares\":10200000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":27629.984503689764,\"lastPrice\":27754.04753703615,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":5.989198004037143,\"otlkMagForecast\":43.08954141532788,\"cap\":154377805,\"spreadPerc\":1,\"shareTxForMovement\":93400,\"shareTxUntilMovement\":93400,\"totalShares\":72300000,\"maxShares\":14500000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":7000.713853698324,\"lastPrice\":6970.297732830885,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":8.12494558407476,\"otlkMagForecast\":58.422755785199136,\"cap\":96613329,\"spreadPerc\":0.6,\"shareTxForMovement\":53229,\"shareTxUntilMovement\":53229,\"totalShares\":61500000,\"maxShares\":12300000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":50203.15556633345,\"lastPrice\":50365.077095836146,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":true,\"otlkMag\":10.57610264053901,\"otlkMagForecast\":59.63779018234205,\"cap\":566865668,\"spreadPerc\":0.9,\"shareTxForMovement\":84308,\"shareTxUntilMovement\":84308,\"totalShares\":32700000,\"maxShares\":6500000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":11330.162785408567,\"lastPrice\":11290.17823377307,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":5.397822915141621,\"otlkMagForecast\":44.360820913227826,\"cap\":87529411,\"spreadPerc\":0.3,\"shareTxForMovement\":114369,\"shareTxUntilMovement\":114369,\"totalShares\":69400000,\"maxShares\":13900000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":8003.391336769541,\"lastPrice\":8036.797099626789,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":6.26050824779184,\"otlkMagForecast\":45.53794642670394,\"cap\":150116538,\"spreadPerc\":1,\"shareTxForMovement\":51784,\"shareTxUntilMovement\":51784,\"totalShares\":54200000,\"maxShares\":10800000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":17359.844329106967,\"lastPrice\":17436.694930752583,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":8.518039611781301,\"otlkMagForecast\":57.35101885132108,\"cap\":68579809,\"spreadPerc\":0.6,\"shareTxForMovement\":100253,\"shareTxUntilMovement\":100253,\"totalShares\":44700000,\"maxShares\":8900000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":11755.569021135938,\"lastPrice\":11803.149305703148,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":10.981441950029845,\"otlkMagForecast\":39.83276925650226,\"cap\":52882096,\"spreadPerc\":0.8,\"shareTxForMovement\":109633,\"shareTxUntilMovement\":109633,\"totalShares\":36300000,\"maxShares\":7300000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":12000.148367501188,\"lastPrice\":12053.27203637723,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":5.168623967218004,\"otlkMagForecast\":45.156572297497256,\"cap\":60071315,\"spreadPerc\":0.6,\"shareTxForMovement\":66747,\"shareTxUntilMovement\":66747,\"totalShares\":38500000,\"maxShares\":7700000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":481.9560843893444,\"lastPrice\":474.69117949428414,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.42,\"b\":true,\"otlkMag\":1.7886498784402143,\"otlkMagForecast\":47.40427964125691,\"cap\":26828878,\"spreadPerc\":0.5,\"shareTxForMovement\":49639,\"shareTxUntilMovement\":49639,\"totalShares\":102000000,\"maxShares\":20400000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":38133.6027882432,\"lastPrice\":37825.01958897234,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.29,\"b\":true,\"otlkMag\":5.325497327654413,\"otlkMagForecast\":53.01670064434313,\"cap\":99212454,\"spreadPerc\":0.8,\"shareTxForMovement\":96516,\"shareTxUntilMovement\":96516,\"totalShares\":58900000,\"maxShares\":11800000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5882.385048821312,\"lastPrice\":5861.625900592005,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":2.188542545249952,\"otlkMagForecast\":52.93299862855871,\"cap\":30240570,\"spreadPerc\":0.4,\"shareTxForMovement\":66212,\"shareTxUntilMovement\":66212,\"totalShares\":32900000,\"maxShares\":6600000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":10728.274621419645,\"lastPrice\":10861.255549255546,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.96,\"b\":false,\"otlkMag\":12.941094931008665,\"otlkMagForecast\":40.19874031877173,\"cap\":81271745,\"spreadPerc\":1.4,\"shareTxForMovement\":33262,\"shareTxUntilMovement\":33262,\"totalShares\":48200000,\"maxShares\":9600000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":3199.1653640186164,\"lastPrice\":3231.33433870534,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.59,\"b\":false,\"otlkMag\":7.618113849682119,\"otlkMagForecast\":40.311122896417885,\"cap\":51616048,\"spreadPerc\":1.1,\"shareTxForMovement\":35756,\"shareTxUntilMovement\":35756,\"totalShares\":35900000,\"maxShares\":7200000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1369.7056205220042,\"lastPrice\":1377.7615117161226,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.93,\"b\":true,\"otlkMag\":5.9232368180968935,\"otlkMagForecast\":56.734625278523644,\"cap\":20853047,\"spreadPerc\":1,\"shareTxForMovement\":107144,\"shareTxUntilMovement\":107144,\"totalShares\":93800000,\"maxShares\":18800000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":52186.86791409923,\"lastPrice\":53011.96422774581,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.5,\"b\":true,\"otlkMag\":7.823515535231771,\"otlkMagForecast\":58.88466097283005,\"cap\":34476911,\"spreadPerc\":1.9,\"shareTxForMovement\":27562,\"shareTxUntilMovement\":27562,\"totalShares\":16800000,\"maxShares\":3400000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1495.3216275021705,\"lastPrice\":1486.111178925183,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":false,\"otlkMag\":7.277579272142417,\"otlkMagForecast\":43.21195046547109,\"cap\":2638872,\"spreadPerc\":0.9,\"shareTxForMovement\":44522,\"shareTxUntilMovement\":44522,\"totalShares\":30400000,\"maxShares\":6100000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1991.5197031784044,\"lastPrice\":1981.7440547974456,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":1.2585852336252006,\"otlkMagForecast\":53.24949644774973,\"cap\":6682987,\"spreadPerc\":0.6,\"shareTxForMovement\":113420,\"shareTxUntilMovement\":113420,\"totalShares\":14700000,\"maxShares\":2900000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2268.336213196133,\"lastPrice\":2301.47394750214,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.31,\"b\":false,\"otlkMag\":6.561167624773471,\"otlkMagForecast\":47.63895116192489,\"cap\":16721521,\"spreadPerc\":1.1,\"shareTxForMovement\":59812,\"shareTxUntilMovement\":59812,\"totalShares\":15400000,\"maxShares\":3100000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":6247.842549640335,\"lastPrice\":6155.5809880521365,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.37,\"b\":true,\"otlkMag\":5.940844402133208,\"otlkMagForecast\":55.86592245818214,\"cap\":22376175,\"spreadPerc\":1.4,\"shareTxForMovement\":34871,\"shareTxUntilMovement\":34871,\"totalShares\":31100000,\"maxShares\":6200000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":373.90546833567674,\"lastPrice\":370.02094440989606,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.66,\"b\":true,\"otlkMag\":5.283874468931414,\"otlkMagForecast\":55.06627149481445,\"cap\":16864757,\"spreadPerc\":1.2,\"shareTxForMovement\":55303,\"shareTxUntilMovement\":55303,\"totalShares\":131600000,\"maxShares\":26300000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":15012.271545101125,\"lastPrice\":15079.679036591253,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":8.800442608166753,\"otlkMagForecast\":41.62609452526038,\"cap\":213708989,\"spreadPerc\":0.3,\"shareTxForMovement\":103829,\"shareTxUntilMovement\":103829,\"totalShares\":23300000,\"maxShares\":4700000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":9105.308029481963,\"lastPrice\":9145.040643521608,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":12.160334135089933,\"otlkMagForecast\":60.871823893604684,\"cap\":108296333,\"spreadPerc\":0.9,\"shareTxForMovement\":195591,\"shareTxUntilMovement\":195591,\"totalShares\":28400000,\"maxShares\":5700000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":1435,\"lastUpdate\":1698104040631,\"ticksUntilCycle\":62}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":180,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#E3B54A\",\"primary\":\"#CAA243\",\"primarydark\":\"#7E6937\",\"successlight\":\"#82FF82\",\"success\":\"#6FDA6F\",\"successdark\":\"#64C364\",\"errorlight\":\"#FD5555\",\"error\":\"#D84A4A\",\"errordark\":\"#AC3939\",\"secondarylight\":\"#D8D0B8\",\"secondary\":\"#B1AA95\",\"secondarydark\":\"#736E5E\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#111111\",\"white\":\"#fff\",\"black\":\"#070300\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#0A0A0E\",\"backgroundsecondary\":\"#0E0E10\",\"button\":\"#222222\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1433,\"y\":1015,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Consolas\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":true,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1698104040903","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}