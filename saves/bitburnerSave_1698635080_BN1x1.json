{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":2347,\"strength\":2,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":325,\"intelligence\":0},\"exp\":{\"hacking\":24666375210364.965,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":49225.889270672815,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.9547543732914212,\"hacking_speed\":1.944991751629445,\"hacking_money\":3.2663156756008815,\"hacking_grow\":1.9561119149604034,\"hacking\":2.9834604738373836,\"strength\":2.159547554116285,\"defense\":1.877867438361987,\"dexterity\":2.4942774250043094,\"agility\":1.643134008566739,\"charisma\":2.2261555121549854,\"hacking_exp\":3.9388174100503477,\"strength_exp\":1.979585257939928,\"defense_exp\":1.979585257939928,\"dexterity_exp\":1.979585257939928,\"agility_exp\":1.979585257939928,\"charisma_exp\":2.1333990324818606,\"company_rep\":2.8160867228760567,\"faction_rep\":2.133399032481861,\"crime_money\":1.6864814486022615,\"crime_success\":1.6864814486022615,\"hacknet_node_money\":3.946798108017732,\"hacknet_node_purchase_cost\":0.48885239780330025,\"hacknet_node_ram_cost\":0.6390227422265362,\"hacknet_node_core_cost\":0.6390227422265362,\"hacknet_node_level_cost\":0.5431693308925558,\"work_money\":3.0588895681384805,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":45,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"PCMatrix\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"The Black Hand\",\"NiteSec\",\"Aevum\",\"Sector-12\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":521135.0000202242,\"ram\":64,\"totalMoneyGenerated\":3658304128.9469905,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94684.7999993488,\"ram\":64,\"totalMoneyGenerated\":1466570088.2293067,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94684.3999993488,\"ram\":64,\"totalMoneyGenerated\":1466202765.3371737,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94684.1999993488,\"ram\":64,\"totalMoneyGenerated\":3426991829.6741652,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94683.9999993488,\"ram\":64,\"totalMoneyGenerated\":1466526182.582673,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94683.7999993488,\"ram\":64,\"totalMoneyGenerated\":1466135550.0574453,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94683.5999993488,\"ram\":64,\"totalMoneyGenerated\":3426914979.1785927,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94683.3999993488,\"ram\":64,\"totalMoneyGenerated\":1466451163.696691,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94683.1999993488,\"ram\":64,\"totalMoneyGenerated\":1466065230.9674616,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94682.9999993488,\"ram\":64,\"totalMoneyGenerated\":3426868771.858714,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94682.79999934879,\"ram\":64,\"totalMoneyGenerated\":1466384903.8515575,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94682.5999993488,\"ram\":64,\"totalMoneyGenerated\":1465980670.9470646,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94682.3999993488,\"ram\":64,\"totalMoneyGenerated\":3426805691.045861,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94681.79999934879,\"ram\":64,\"totalMoneyGenerated\":1467118737.836723,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36197.30584862281,\"onlineTimeSeconds\":94681.5999993488,\"ram\":64,\"totalMoneyGenerated\":1465925391.372386,\"name\":\"hacknet-node-14\"}}],\"has4SData\":true,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{\"Alpha Enterprises\":\"Senior Software Consultant\"},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":781573635674.3226,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-757380704,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":8011565184598.311,\"hacknet\":32029246087.42108,\"hacknet_expenses\":-3882126280.6310935,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":7622522529.353947,\"total\":781572635674.3226,\"work\":155005311.19273433,\"servers\":-7259844815817.783,\"other\":-5314999999.457685,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-4,\"class\":-757380704,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":8479136017514.175,\"hacknet\":60686345819.24827,\"hacknet_expenses\":-12827503593.968801,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-72061777392.17697,\"total\":924792089461.6107,\"work\":166271096.51455247,\"servers\":-7320410696493.834,\"other\":-17571299999.457687,\"augmentations\":-191567886742.57654}},\"playtimeSinceLastAug\":531026600,\"playtimeSinceLastBitnode\":1642161400,\"lastAugReset\":1698104050678,\"lastNodeReset\":-1,\"purchasedServers\":[\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-25\"],\"scriptProdSinceLastAug\":7746968011897.785,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1696993342778},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1697002312401},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1697003975843},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1697004035834},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1697042616276},{\"ID\":\"TOR\",\"unlockedOn\":1697052216278},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1697124200234},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1697173256423},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1697174276424},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1697178716426},{\"ID\":\"FROZE\",\"unlockedOn\":1697506902150},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1697774759350},{\"ID\":\"TRAVEL\",\"unlockedOn\":1697776259361},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1697834840599},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1697837600601},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1697852480599},{\"ID\":\"NITESEC\",\"unlockedOn\":1697899461604},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1697999209955},{\"ID\":\"4S\",\"unlockedOn\":1698014329956},{\"ID\":\"DONATION\",\"unlockedOn\":1698071303360}],\"terminalCommandHistory\":[\"ls -l -g .msg\",\"buy -l\",\"home\",\"home; clear; killall; run hack-servers-2.js my-first-hack.js -h -f\",\"scan-analyze 10\",\"ls\",\"run contract-153502.cct \",\"run matrix-tester.js \",\"home\",\"run matrix-tester.js \",\"clear\",\"run matrix-tester.js \",\"clear\",\"run matrix-tester.js \",\"home; clear; killall; run hack-servers-2.js my-first-hack.js -h\",\"run matrix-tester.js \",\"home; clear; killall; run hack-servers-2.js my-first-hack.js -h\",\"run matrix-tester.js \",\"home; clear; killall; run hack-servers-2.js my-first-hack.js -h\",\"run matrix-tester.js \",\"kill matrix-tester.js; run matrix-tester.js \",\"clear\",\"kill matrix-tester.js; run matrix-tester.js \",\"ls\",\"rm connected-servers-info.js \",\"ls\",\"kill matrix-tester.js; run matrix-tester.js \",\"clear\",\"kill matrix-tester.js; run matrix-tester.js \",\"clear\",\"kill matrix-tester.js; run matrix-tester.js \",\"ls\",\"kill matrix-tester.js; run matrix-tester.js \",\"clear\",\"kill matrix-tester.js; run matrix-tester.js \",\"clear\",\"kill matrix-tester.js; run matrix-tester.js \",\"ls\",\"kill matrix-tester.js; run matrix-tester.js \",\"clear\",\"kill matrix-tester.js; run matrix-tester.js \",\"home; clear; killall; run hack-servers-2.js my-first-hack.js -h\",\"kill matrix-tester.js; run matrix-tester.js \",\"ls\",\"kill matrix-tester.js; run matrix-tester.js \",\"ls\",\"kill matrix-tester.js; run matrix-tester.js \",\"home; clear; killall; run hack-servers-2.js my-first-hack.js -h\",\"kill matrix-tester.js; run matrix-tester.js \",\"home; clear; killall; run hack-servers-2.js my-first-hack.js -h\"],\"lastUpdate\":1698635079867,\"lastSave\":1698635075672,\"totalPlaytime\":1642161400,\"currentWork\":{\"ctor\":\"ClassWork\",\"data\":{\"type\":\"CLASS\",\"singularity\":false,\"cyclesWorked\":2131743,\"earnings\":{\"money\":-682157760,\"reputation\":0,\"hackExp\":26868948.613889527,\"strExp\":0,\"defExp\":0,\"dexExp\":0,\"agiExp\":0,\"chaExp\":0,\"intExp\":17053.94399983219},\"classType\":\"Algorithms\",\"location\":\"ZB Institute of Technology\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"103d6a1d75d61f\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"5.7.5.1\",\"isConnectedTo\":true,\"maxRam\":131072,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\",\"sector-12-crime.lit\",\"brighter-than-the-sun.lit\",\"democracy-is-dead.lit\",\"new-triads.lit\",\"the-new-god.lit\",\"the-hidden-world.lit\",\"man-and-machine.lit\",\"simulated-reality.lit\",\"tensions-in-tech-race.lit\",\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\",\"A-Green-Tomorrow.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"home\"}}],[\"matrix-tester.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerMatrix } from './server-matrix';\\r\\nexport async function main(ns) {\\r\\n    const myserverMatrix = new ServerMatrix(ns);\\r\\n    await myserverMatrix.initialize();\\r\\n    ns.run(`hack-servers-2.js`, 1, 'my-first-hack.js', `-h`);\\r\\n    while (true) {\\r\\n        await ns.sleep(50000);\\r\\n        ns.tprint(`WARN: checking for new hack target...`);\\r\\n        if (myserverMatrix.hackTarget !== await myserverMatrix.findBestHackTarget()) {\\r\\n            ns.tprint(`WARN: hack target changed!!!`);\\r\\n            ns.run(`hack-servers-2.js`, 1, 'my-first-hack.js', `-h`);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0cml4LXRlc3Rlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXRyaXgtdGVzdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQVEsRUFBQyxZQUFZLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUU5QyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sY0FBYyxHQUFHLElBQUksWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2xDLEVBQUUsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pELE9BQU8sSUFBSSxFQUFFO1FBQ1QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLEVBQUUsQ0FBQyxNQUFNLENBQUMsdUNBQXVDLENBQUMsQ0FBQTtRQUNsRCxJQUFJLGNBQWMsQ0FBQyxVQUFVLEtBQUssTUFBTSxjQUFjLENBQUMsa0JBQWtCLEVBQUUsRUFBQztZQUN4RSxFQUFFLENBQUMsTUFBTSxDQUFDLDhCQUE4QixDQUFDLENBQUM7WUFDMUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDNUQ7S0FDSjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCAge1NlcnZlck1hdHJpeH0gZnJvbSAnLi9zZXJ2ZXItbWF0cml4JztcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgY29uc3QgbXlzZXJ2ZXJNYXRyaXggPSBuZXcgU2VydmVyTWF0cml4KG5zKTtcclxuICAgIGF3YWl0IG15c2VydmVyTWF0cml4LmluaXRpYWxpemUoKTtcclxuICAgIG5zLnJ1bihgaGFjay1zZXJ2ZXJzLTIuanNgLCAxLCAnbXktZmlyc3QtaGFjay5qcycsIGAtaGApO1xyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICBhd2FpdCBucy5zbGVlcCg1MDAwMCk7XHJcbiAgICAgICAgbnMudHByaW50KGBXQVJOOiBjaGVja2luZyBmb3IgbmV3IGhhY2sgdGFyZ2V0Li4uYClcclxuICAgICAgICBpZiAobXlzZXJ2ZXJNYXRyaXguaGFja1RhcmdldCAhPT0gYXdhaXQgbXlzZXJ2ZXJNYXRyaXguZmluZEJlc3RIYWNrVGFyZ2V0KCkpe1xyXG4gICAgICAgICAgICBucy50cHJpbnQoYFdBUk46IGhhY2sgdGFyZ2V0IGNoYW5nZWQhISFgKTtcclxuICAgICAgICAgICAgbnMucnVuKGBoYWNrLXNlcnZlcnMtMi5qc2AsIDEsICdteS1maXJzdC1oYWNrLmpzJywgYC1oYCk7XHJcbiAgICAgICAgfSAgICAgICAgXHJcbiAgICB9XHJcbn0iXX0=\",\"filename\":\"matrix-tester.js\",\"server\":\"home\"}}],[\"server-matrix.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"//import { ServerNode as Server } from './server-node';\\r\\nimport { colors } from './hackLib';\\r\\n/**\\r\\n * Represents a server matrix that contains a list of all servers up to a certain depth.\\r\\n */\\r\\nexport class ServerMatrix {\\r\\n    ns;\\r\\n    fullScannedServerList = [];\\r\\n    scannedDepth;\\r\\n    hackTarget;\\r\\n    constructor(ns, scanDepth = NaN) {\\r\\n        this.ns = ns;\\r\\n        if (isNaN(scanDepth))\\r\\n            scanDepth = this.getMaxPossibleScanDepth();\\r\\n        this.scannedDepth = scanDepth;\\r\\n    }\\r\\n    async initialize(ns = this.ns) {\\r\\n        ns.tprint(`INFO: serverMatrix initializing...`);\\r\\n        ns.tprint(`INFO: ➡️📃 building list of all servers to depth of ${colors.Green}${this.scannedDepth}${colors.Reset}...`);\\r\\n        await this.buildScannedServerList();\\r\\n        ns.tprint(`INFO: ...found ${colors.Cyan}${this.fullScannedServerList.length}${colors.Reset} servers!`);\\r\\n        ns.tprint(`INFO: ➡️🥇🎯 selecting best target server...`);\\r\\n        await this.findBestHackTarget().then((hackTarget) => {\\r\\n            this.hackTarget = hackTarget;\\r\\n            ns.tprint(`INFO: ...${colors.Green}${this.hackTarget.hostname}${colors.Reset} selected!`);\\r\\n        });\\r\\n    }\\r\\n    /**\\r\\n     * Builds a list of Server objects that can be found, given a scan depth\\r\\n     * @param ns - Netscript namespace\\r\\n     * @param depth - The depth of the search\\r\\n     * @param serverList - The list of servers to start the search from\\r\\n     * @returns A Promise that resolves to an array of Server objects\\r\\n     */\\r\\n    async buildScannedServerList(depth = NaN, serverList = this.fullScannedServerList) {\\r\\n        let allowedServerNameList = [];\\r\\n        if (isNaN(depth))\\r\\n            depth = this.scannedDepth;\\r\\n        if (serverList.length === 0) {\\r\\n            const scannedServerNames = this.ns.scan();\\r\\n            allowedServerNameList = scannedServerNames.filter(server => this.canAddServer(this.ns.getServer(server)));\\r\\n            this.fullScannedServerList.push(...allowedServerNameList.map(allowedHostname => this.ns.getServer(allowedHostname)));\\r\\n            --depth;\\r\\n        }\\r\\n        while (depth > 0) {\\r\\n            const newServers = [];\\r\\n            for (const server of serverList) {\\r\\n                const serverNeighborNames = this.ns.scan(server.hostname);\\r\\n                const allowedNeighborNames = serverNeighborNames.filter(server => this.canAddServer(this.ns.getServer(server), this.fullScannedServerList.concat(newServers)));\\r\\n                newServers.push(...allowedNeighborNames.map(allowedHostname => this.ns.getServer(allowedHostname)));\\r\\n                allowedServerNameList.push(...allowedNeighborNames);\\r\\n            }\\r\\n            this.fullScannedServerList.push(...newServers);\\r\\n            --depth;\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n     * Checks if a server can be added to the matrix serverList array\\r\\n     * @param serverToCheck The server to check\\r\\n     * @param serverListToCheckAgainst The server list to check against. Defaults to the current server list, but can be passed any array of Server objects\\r\\n     * @returns True if the server can be added, false otherwise\\r\\n     */\\r\\n    canAddServer(serverToCheck, serverListToCheckAgainst = this.fullScannedServerList) {\\r\\n        const forbiddenServerNames = ['home', 'darkweb'];\\r\\n        const forbiddenServerPrefixes = ['pserv-'];\\r\\n        const isForbiddenServer = forbiddenServerNames.some(forbiddenServer => forbiddenServer === serverToCheck.hostname);\\r\\n        const isForbiddenServerPrefix = forbiddenServerPrefixes.some(prefix => serverToCheck.hostname.startsWith(prefix));\\r\\n        const isDuplicateServer = serverListToCheckAgainst.some(s => s.hostname === serverToCheck.hostname);\\r\\n        return !isForbiddenServer && !isDuplicateServer && !isForbiddenServerPrefix;\\r\\n    }\\r\\n    /**\\r\\n     * Fetches all fetchable files from all servers in the matrix' serverList\\r\\n     * - `scp` only works for scripts (.js or .script), text files (.txt), and literature files (.lit)\\r\\n     * @param ns - Netscript namespace; defaults to this.ns\\r\\n     */\\r\\n    async fetchFilesFromServers(ns = this.ns) {\\r\\n        ns.tprint(`INFO: fetching files from servers:\\\\n` + this.fullScannedServerList.map(server => server.hostname).join(`, `));\\r\\n        this.fullScannedServerList.forEach(async (server) => {\\r\\n            await (async () => this.fileFetch(server))();\\r\\n        });\\r\\n    }\\r\\n    /**\\r\\n     * Fetches all fetchable files from a Server (.js or .script)\\r\\n     * @param server The server to fetch files from\\r\\n     * @param ns Netscript namespace; defaults to this.ns\\r\\n     */\\r\\n    async fileFetch(server, ns = this.ns) {\\r\\n        const homefilelist = await (async () => this.ns.ls('home'))();\\r\\n        ns.ls(server.hostname).forEach((file) => {\\r\\n            if (!homefilelist.includes(file))\\r\\n                try {\\r\\n                    ns.scp(file, `home`, server.hostname);\\r\\n                    ns.tprint(`INFO: ...${file} fetched from ${server.hostname}`);\\r\\n                }\\r\\n                catch {\\r\\n                    ns.tprint(`ERROR: ...can't fetch ${file} from ${server.hostname}!`);\\r\\n                }\\r\\n        });\\r\\n    }\\r\\n    /**\\r\\n     * Returns an array of Server objects that are suitable for hacking, i.e. servers that have more than 0 RAM\\r\\n     * @returns An array of Server object\\r\\n     */\\r\\n    async getHackableServers() {\\r\\n        return this.fullScannedServerList.filter(server => server.maxRam > 0);\\r\\n    }\\r\\n    /**\\r\\n     * @remarks determines whether DeepscanV1.exe and/or DeepscanV2.exe are available, and provides the maximum scan depth possible depending on the outcome.\\r\\n     * @param ns Netscript namespace\\r\\n     * @returns maximum scan depth based on the executables available, returns a number\\r\\n     */\\r\\n    getMaxPossibleScanDepth(ns = this.ns) {\\r\\n        let scanDepth = 3;\\r\\n        if (ns.fileExists(`DeepscanV1.exe`))\\r\\n            scanDepth = 5;\\r\\n        if (ns.fileExists(`DeepscanV2.exe`))\\r\\n            scanDepth = 10;\\r\\n        return scanDepth;\\r\\n    }\\r\\n    /**\\r\\n     * Finds the best server to hack based on the score calculated by `scoreServer`\\r\\n     * @param ns - Netscript namespace; defaults to this.ns\\r\\n     * @returns The best server to hack, or `undefined` if there are no servers to hack\\r\\n     */\\r\\n    async findBestHackTarget(ns = this.ns) {\\r\\n        let currentBestTarget = undefined;\\r\\n        let bestScore = -Infinity;\\r\\n        this.fullScannedServerList.forEach(server => {\\r\\n            const score = this.scoreServer(server);\\r\\n            if (score > bestScore) {\\r\\n                currentBestTarget = server;\\r\\n                bestScore = score;\\r\\n            }\\r\\n            //ns.tprint(`INFO: ...${colors.Cyan} ${server.hostname}${colors.Reset} scored ${colors.Green}${score}${colors.Reset}`)\\r\\n        });\\r\\n        if (currentBestTarget)\\r\\n            return currentBestTarget;\\r\\n        else\\r\\n            throw new Error(`ERROR: could not acquire hack target!`);\\r\\n    }\\r\\n    /**\\r\\n     * Calculates the score of a server based on its money and security factors.\\r\\n     * @remarks this algo came from CoPilot\\r\\n     * @param server - The server to calculate the score for.\\r\\n     * @param ns - Netscript namespace; defaults to this.ns\\r\\n     * @returns The score of the server as a number\\r\\n     */\\r\\n    scoreServer = (server, ns = this.ns) => {\\r\\n        //ns.tprint(`Calculating score for server ${server.hostname}...`);\\r\\n        const playerHackingLevel = ns.getHackingLevel();\\r\\n        //ns.tprint(`Player hacking level: ${playerHackingLevel}`);\\r\\n        const money = ns.getServerMoneyAvailable(server.hostname);\\r\\n        //ns.tprint(`Money available on ${server.hostname}: ${money}`);\\r\\n        const maxMoney = ns.getServerMaxMoney(server.hostname);\\r\\n        //ns.tprint(`Maximum money available on ${server.hostname}: ${maxMoney}`);\\r\\n        const moneyFactor = Math.pow(money / maxMoney, 2);\\r\\n        //ns.tprint(`Money factor: ${moneyFactor}`);\\r\\n        const securityLevel = ns.getServerSecurityLevel(server.hostname);\\r\\n        //ns.tprint(`Security level of ${server.hostname}: ${securityLevel}`);\\r\\n        const requiredHackLevel = ns.getServerRequiredHackingLevel(server.hostname);\\r\\n        //ns.tprint(`Hacking level required to hack ${server.hostname}: ${requiredHackLevel}`);\\r\\n        const securityFactor = requiredHackLevel > playerHackingLevel ? 0 : (securityLevel - requiredHackLevel) / securityLevel;\\r\\n        //ns.tprint(`Security factor: ${securityFactor}`);\\r\\n        const score = moneyFactor * securityFactor;\\r\\n        return score;\\r\\n    };\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLW1hdHJpeC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2ZXItbWF0cml4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLHVEQUF1RDtBQUN2RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRW5DOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFlBQVk7SUFDYixFQUFFLENBQUs7SUFDUixxQkFBcUIsR0FBYSxFQUFFLENBQUM7SUFDckMsWUFBWSxDQUFTO0lBQ3JCLFVBQVUsQ0FBVTtJQUUzQixZQUFZLEVBQU0sRUFBRSxZQUFvQixHQUFHO1FBQ3ZDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDO1lBQUUsU0FBUyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1FBQ2pFLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO0lBRWxDLENBQUM7SUFFTSxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQVMsSUFBSSxDQUFDLEVBQUU7UUFDcEMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1FBQ2hELEVBQUUsQ0FBQyxNQUFNLENBQUMsdURBQXVELE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQztRQUN2SCxNQUFNLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBRXBDLEVBQUUsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQztRQUN2RyxFQUFFLENBQUMsTUFBTSxDQUFDLDhDQUE4QyxDQUFDLENBQUE7UUFDekQsTUFBTSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNoRCxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztZQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxZQUFZLENBQUMsQ0FBQztRQUM5RixDQUFDLENBQUMsQ0FBQztJQUVQLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSyxLQUFLLENBQUMsc0JBQXNCLENBQUMsUUFBZ0IsR0FBRyxFQUFFLGFBQXVCLElBQUksQ0FBQyxxQkFBcUI7UUFDdkcsSUFBSSxxQkFBcUIsR0FBYSxFQUFFLENBQUE7UUFFeEMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFFNUMsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN6QixNQUFNLGtCQUFrQixHQUFhLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDcEQscUJBQXFCLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxHQUFHLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNySCxFQUFFLEtBQUssQ0FBQztTQUNYO1FBRUQsT0FBTyxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ2QsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1lBRWhDLEtBQUssTUFBTSxNQUFNLElBQUksVUFBVSxFQUFFO2dCQUM3QixNQUFNLG1CQUFtQixHQUFhLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDcEUsTUFBTSxvQkFBb0IsR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvSixVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDO2FBQ3ZEO1lBQ0QsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1lBQy9DLEVBQUUsS0FBSyxDQUFDO1NBQ1g7SUFDTCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSyxZQUFZLENBQUMsYUFBcUIsRUFBRSwyQkFBcUMsSUFBSSxDQUFDLHFCQUFxQjtRQUN2RyxNQUFNLG9CQUFvQixHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUzQyxNQUFNLGlCQUFpQixHQUFHLG9CQUFvQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLGVBQWUsS0FBSyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkgsTUFBTSx1QkFBdUIsR0FBRyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2xILE1BQU0saUJBQWlCLEdBQUcsd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsS0FBSyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFcEcsT0FBTyxDQUFDLGlCQUFpQixJQUFJLENBQUMsaUJBQWlCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztJQUNoRixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxLQUFTLElBQUksQ0FBQyxFQUFFO1FBQy9DLEVBQUUsQ0FBQyxNQUFNLENBQUMsc0NBQXNDLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN6SCxJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxNQUFNLEVBQUMsRUFBRTtZQUM5QyxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFjLEVBQUUsS0FBUyxJQUFJLENBQUMsRUFBRTtRQUNwRCxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDOUQsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUU7WUFDNUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO2dCQUM1QixJQUFJO29CQUNBLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQ3RDLEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxJQUFJLGlCQUFpQixNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztpQkFDakU7Z0JBQ0QsTUFBTTtvQkFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLHlCQUF5QixJQUFJLFNBQVMsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7aUJBQUU7UUFDdEYsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksS0FBSyxDQUFDLGtCQUFrQjtRQUMzQixPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFHRDs7OztPQUlHO0lBQ0ssdUJBQXVCLENBQUMsS0FBUyxJQUFJLENBQUMsRUFBRTtRQUM1QyxJQUFJLFNBQVMsR0FBVyxDQUFDLENBQUM7UUFDMUIsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDO1lBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNuRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUM7WUFBRSxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksS0FBSyxDQUFDLGtCQUFrQixDQUFDLEtBQVMsSUFBSSxDQUFDLEVBQUU7UUFDNUMsSUFBSSxpQkFBaUIsR0FBdUIsU0FBUyxDQUFDO1FBQ3RELElBQUksU0FBUyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBQzFCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDeEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN2QyxJQUFJLEtBQUssR0FBRyxTQUFTLEVBQUU7Z0JBQ25CLGlCQUFpQixHQUFHLE1BQU0sQ0FBQztnQkFDM0IsU0FBUyxHQUFHLEtBQUssQ0FBQzthQUNyQjtZQUNELHNIQUFzSDtRQUMxSCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksaUJBQWlCO1lBQUUsT0FBTyxpQkFBaUIsQ0FBQzs7WUFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxXQUFXLEdBQUcsQ0FBQyxNQUFjLEVBQUUsS0FBUyxJQUFJLENBQUMsRUFBRSxFQUFVLEVBQUU7UUFDOUQsa0VBQWtFO1FBRWxFLE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ2hELDJEQUEyRDtRQUUzRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFELCtEQUErRDtRQUUvRCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZELDBFQUEwRTtRQUUxRSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEQsNENBQTRDO1FBRTVDLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakUsc0VBQXNFO1FBRXRFLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1RSx1RkFBdUY7UUFFdkYsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxhQUFhLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxhQUFhLENBQUM7UUFDdkgsa0RBQWtEO1FBRWxELE1BQU0sS0FBSyxHQUFHLFdBQVcsR0FBRyxjQUFjLENBQUM7UUFDM0MsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQyxDQUFBO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUywgU2VydmVyIGFzIFNlcnZlciB9IGZyb20gJ0Bucyc7XHJcbi8vaW1wb3J0IHsgU2VydmVyTm9kZSBhcyBTZXJ2ZXIgfSBmcm9tICcuL3NlcnZlci1ub2RlJztcclxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnLi9oYWNrTGliJztcclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgc2VydmVyIG1hdHJpeCB0aGF0IGNvbnRhaW5zIGEgbGlzdCBvZiBhbGwgc2VydmVycyB1cCB0byBhIGNlcnRhaW4gZGVwdGguXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2VydmVyTWF0cml4IHtcclxuICAgIHByaXZhdGUgbnM6IE5TO1xyXG4gICAgcHVibGljIGZ1bGxTY2FubmVkU2VydmVyTGlzdDogU2VydmVyW10gPSBbXTtcclxuICAgIHB1YmxpYyBzY2FubmVkRGVwdGg6IG51bWJlcjtcclxuICAgIHB1YmxpYyBoYWNrVGFyZ2V0ITogU2VydmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG5zOiBOUywgc2NhbkRlcHRoOiBudW1iZXIgPSBOYU4pIHtcclxuICAgICAgICB0aGlzLm5zID0gbnM7XHJcbiAgICAgICAgaWYgKGlzTmFOKHNjYW5EZXB0aCkpIHNjYW5EZXB0aCA9IHRoaXMuZ2V0TWF4UG9zc2libGVTY2FuRGVwdGgoKTtcclxuICAgICAgICB0aGlzLnNjYW5uZWREZXB0aCA9IHNjYW5EZXB0aDtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgaW5pdGlhbGl6ZShuczogTlMgPSB0aGlzLm5zKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgbnMudHByaW50KGBJTkZPOiBzZXJ2ZXJNYXRyaXggaW5pdGlhbGl6aW5nLi4uYCk7XHJcbiAgICAgICAgbnMudHByaW50KGBJTkZPOiDinqHvuI/wn5ODIGJ1aWxkaW5nIGxpc3Qgb2YgYWxsIHNlcnZlcnMgdG8gZGVwdGggb2YgJHtjb2xvcnMuR3JlZW59JHt0aGlzLnNjYW5uZWREZXB0aH0ke2NvbG9ycy5SZXNldH0uLi5gKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmJ1aWxkU2Nhbm5lZFNlcnZlckxpc3QoKTtcclxuICAgICAgICBcclxuICAgICAgICBucy50cHJpbnQoYElORk86IC4uLmZvdW5kICR7Y29sb3JzLkN5YW59JHt0aGlzLmZ1bGxTY2FubmVkU2VydmVyTGlzdC5sZW5ndGh9JHtjb2xvcnMuUmVzZXR9IHNlcnZlcnMhYCk7XHJcbiAgICAgICAgbnMudHByaW50KGBJTkZPOiDinqHvuI/wn6WH8J+OryBzZWxlY3RpbmcgYmVzdCB0YXJnZXQgc2VydmVyLi4uYClcclxuICAgICAgICBhd2FpdCB0aGlzLmZpbmRCZXN0SGFja1RhcmdldCgpLnRoZW4oKGhhY2tUYXJnZXQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oYWNrVGFyZ2V0ID0gaGFja1RhcmdldDtcclxuICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiAuLi4ke2NvbG9ycy5HcmVlbn0ke3RoaXMuaGFja1RhcmdldC5ob3N0bmFtZX0ke2NvbG9ycy5SZXNldH0gc2VsZWN0ZWQhYCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQnVpbGRzIGEgbGlzdCBvZiBTZXJ2ZXIgb2JqZWN0cyB0aGF0IGNhbiBiZSBmb3VuZCwgZ2l2ZW4gYSBzY2FuIGRlcHRoIFxyXG4gICAgICogQHBhcmFtIG5zIC0gTmV0c2NyaXB0IG5hbWVzcGFjZVxyXG4gICAgICogQHBhcmFtIGRlcHRoIC0gVGhlIGRlcHRoIG9mIHRoZSBzZWFyY2hcclxuICAgICAqIEBwYXJhbSBzZXJ2ZXJMaXN0IC0gVGhlIGxpc3Qgb2Ygc2VydmVycyB0byBzdGFydCB0aGUgc2VhcmNoIGZyb21cclxuICAgICAqIEByZXR1cm5zIEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIGFycmF5IG9mIFNlcnZlciBvYmplY3RzXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgYnVpbGRTY2FubmVkU2VydmVyTGlzdChkZXB0aDogbnVtYmVyID0gTmFOLCBzZXJ2ZXJMaXN0OiBTZXJ2ZXJbXSA9IHRoaXMuZnVsbFNjYW5uZWRTZXJ2ZXJMaXN0KSB7XHJcbiAgICAgICAgbGV0IGFsbG93ZWRTZXJ2ZXJOYW1lTGlzdDogc3RyaW5nW10gPSBbXVxyXG5cclxuICAgICAgICBpZiAoaXNOYU4oZGVwdGgpKSBkZXB0aCA9IHRoaXMuc2Nhbm5lZERlcHRoO1xyXG5cclxuICAgICAgICBpZiAoc2VydmVyTGlzdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgY29uc3Qgc2Nhbm5lZFNlcnZlck5hbWVzOiBzdHJpbmdbXSA9IHRoaXMubnMuc2NhbigpO1xyXG4gICAgICAgICAgICBhbGxvd2VkU2VydmVyTmFtZUxpc3QgPSBzY2FubmVkU2VydmVyTmFtZXMuZmlsdGVyKHNlcnZlciA9PiB0aGlzLmNhbkFkZFNlcnZlcih0aGlzLm5zLmdldFNlcnZlcihzZXJ2ZXIpKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZnVsbFNjYW5uZWRTZXJ2ZXJMaXN0LnB1c2goLi4uYWxsb3dlZFNlcnZlck5hbWVMaXN0Lm1hcChhbGxvd2VkSG9zdG5hbWUgPT4gdGhpcy5ucy5nZXRTZXJ2ZXIoYWxsb3dlZEhvc3RuYW1lKSkpO1xyXG4gICAgICAgICAgICAtLWRlcHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2hpbGUgKGRlcHRoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdTZXJ2ZXJzOiBTZXJ2ZXJbXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBzZXJ2ZXIgb2Ygc2VydmVyTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VydmVyTmVpZ2hib3JOYW1lczogc3RyaW5nW10gPSB0aGlzLm5zLnNjYW4oc2VydmVyLmhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFsbG93ZWROZWlnaGJvck5hbWVzID0gc2VydmVyTmVpZ2hib3JOYW1lcy5maWx0ZXIoc2VydmVyID0+IHRoaXMuY2FuQWRkU2VydmVyKHRoaXMubnMuZ2V0U2VydmVyKHNlcnZlciksIHRoaXMuZnVsbFNjYW5uZWRTZXJ2ZXJMaXN0LmNvbmNhdChuZXdTZXJ2ZXJzKSkpO1xyXG4gICAgICAgICAgICAgICAgbmV3U2VydmVycy5wdXNoKC4uLmFsbG93ZWROZWlnaGJvck5hbWVzLm1hcChhbGxvd2VkSG9zdG5hbWUgPT4gdGhpcy5ucy5nZXRTZXJ2ZXIoYWxsb3dlZEhvc3RuYW1lKSkpO1xyXG4gICAgICAgICAgICAgICAgYWxsb3dlZFNlcnZlck5hbWVMaXN0LnB1c2goLi4uYWxsb3dlZE5laWdoYm9yTmFtZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZnVsbFNjYW5uZWRTZXJ2ZXJMaXN0LnB1c2goLi4ubmV3U2VydmVycyk7XHJcbiAgICAgICAgICAgIC0tZGVwdGg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGlmIGEgc2VydmVyIGNhbiBiZSBhZGRlZCB0byB0aGUgbWF0cml4IHNlcnZlckxpc3QgYXJyYXlcclxuICAgICAqIEBwYXJhbSBzZXJ2ZXJUb0NoZWNrIFRoZSBzZXJ2ZXIgdG8gY2hlY2tcclxuICAgICAqIEBwYXJhbSBzZXJ2ZXJMaXN0VG9DaGVja0FnYWluc3QgVGhlIHNlcnZlciBsaXN0IHRvIGNoZWNrIGFnYWluc3QuIERlZmF1bHRzIHRvIHRoZSBjdXJyZW50IHNlcnZlciBsaXN0LCBidXQgY2FuIGJlIHBhc3NlZCBhbnkgYXJyYXkgb2YgU2VydmVyIG9iamVjdHNcclxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHNlcnZlciBjYW4gYmUgYWRkZWQsIGZhbHNlIG90aGVyd2lzZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNhbkFkZFNlcnZlcihzZXJ2ZXJUb0NoZWNrOiBTZXJ2ZXIsIHNlcnZlckxpc3RUb0NoZWNrQWdhaW5zdDogU2VydmVyW10gPSB0aGlzLmZ1bGxTY2FubmVkU2VydmVyTGlzdCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGZvcmJpZGRlblNlcnZlck5hbWVzID0gWydob21lJywgJ2Rhcmt3ZWInXTtcclxuICAgICAgICBjb25zdCBmb3JiaWRkZW5TZXJ2ZXJQcmVmaXhlcyA9IFsncHNlcnYtJ107XHJcblxyXG4gICAgICAgIGNvbnN0IGlzRm9yYmlkZGVuU2VydmVyID0gZm9yYmlkZGVuU2VydmVyTmFtZXMuc29tZShmb3JiaWRkZW5TZXJ2ZXIgPT4gZm9yYmlkZGVuU2VydmVyID09PSBzZXJ2ZXJUb0NoZWNrLmhvc3RuYW1lKTtcclxuICAgICAgICBjb25zdCBpc0ZvcmJpZGRlblNlcnZlclByZWZpeCA9IGZvcmJpZGRlblNlcnZlclByZWZpeGVzLnNvbWUocHJlZml4ID0+IHNlcnZlclRvQ2hlY2suaG9zdG5hbWUuc3RhcnRzV2l0aChwcmVmaXgpKTtcclxuICAgICAgICBjb25zdCBpc0R1cGxpY2F0ZVNlcnZlciA9IHNlcnZlckxpc3RUb0NoZWNrQWdhaW5zdC5zb21lKHMgPT4gcy5ob3N0bmFtZSA9PT0gc2VydmVyVG9DaGVjay5ob3N0bmFtZSk7XHJcblxyXG4gICAgICAgIHJldHVybiAhaXNGb3JiaWRkZW5TZXJ2ZXIgJiYgIWlzRHVwbGljYXRlU2VydmVyICYmICFpc0ZvcmJpZGRlblNlcnZlclByZWZpeDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZldGNoZXMgYWxsIGZldGNoYWJsZSBmaWxlcyBmcm9tIGFsbCBzZXJ2ZXJzIGluIHRoZSBtYXRyaXgnIHNlcnZlckxpc3RcclxuICAgICAqIC0gYHNjcGAgb25seSB3b3JrcyBmb3Igc2NyaXB0cyAoLmpzIG9yIC5zY3JpcHQpLCB0ZXh0IGZpbGVzICgudHh0KSwgYW5kIGxpdGVyYXR1cmUgZmlsZXMgKC5saXQpXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBOZXRzY3JpcHQgbmFtZXNwYWNlOyBkZWZhdWx0cyB0byB0aGlzLm5zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhc3luYyBmZXRjaEZpbGVzRnJvbVNlcnZlcnMobnM6IE5TID0gdGhpcy5ucykge1xyXG4gICAgICAgIG5zLnRwcmludChgSU5GTzogZmV0Y2hpbmcgZmlsZXMgZnJvbSBzZXJ2ZXJzOlxcbmAgKyB0aGlzLmZ1bGxTY2FubmVkU2VydmVyTGlzdC5tYXAoc2VydmVyID0+IHNlcnZlci5ob3N0bmFtZSkuam9pbihgLCBgKSk7XHJcbiAgICAgICAgdGhpcy5mdWxsU2Nhbm5lZFNlcnZlckxpc3QuZm9yRWFjaChhc3luYyBzZXJ2ZXIgPT4ge1xyXG4gICAgICAgICAgICBhd2FpdCAoYXN5bmMgKCkgPT4gdGhpcy5maWxlRmV0Y2goc2VydmVyKSkoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZldGNoZXMgYWxsIGZldGNoYWJsZSBmaWxlcyBmcm9tIGEgU2VydmVyICguanMgb3IgLnNjcmlwdClcclxuICAgICAqIEBwYXJhbSBzZXJ2ZXIgVGhlIHNlcnZlciB0byBmZXRjaCBmaWxlcyBmcm9tXHJcbiAgICAgKiBAcGFyYW0gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZTsgZGVmYXVsdHMgdG8gdGhpcy5uc1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFzeW5jIGZpbGVGZXRjaChzZXJ2ZXI6IFNlcnZlciwgbnM6IE5TID0gdGhpcy5ucykge1xyXG4gICAgICAgIGNvbnN0IGhvbWVmaWxlbGlzdCA9IGF3YWl0IChhc3luYyAoKSA9PiB0aGlzLm5zLmxzKCdob21lJykpKCk7XHJcbiAgICAgICAgbnMubHMoc2VydmVyLmhvc3RuYW1lKS5mb3JFYWNoKChmaWxlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFob21lZmlsZWxpc3QuaW5jbHVkZXMoZmlsZSkpXHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnNjcChmaWxlLCBgaG9tZWAsIHNlcnZlci5ob3N0bmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiAuLi4ke2ZpbGV9IGZldGNoZWQgZnJvbSAke3NlcnZlci5ob3N0bmFtZX1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIHsgbnMudHByaW50KGBFUlJPUjogLi4uY2FuJ3QgZmV0Y2ggJHtmaWxlfSBmcm9tICR7c2VydmVyLmhvc3RuYW1lfSFgKTsgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBTZXJ2ZXIgb2JqZWN0cyB0aGF0IGFyZSBzdWl0YWJsZSBmb3IgaGFja2luZywgaS5lLiBzZXJ2ZXJzIHRoYXQgaGF2ZSBtb3JlIHRoYW4gMCBSQU1cclxuICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIFNlcnZlciBvYmplY3RcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIGdldEhhY2thYmxlU2VydmVycygpOiBQcm9taXNlPFNlcnZlcltdPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZnVsbFNjYW5uZWRTZXJ2ZXJMaXN0LmZpbHRlcihzZXJ2ZXIgPT4gc2VydmVyLm1heFJhbSA+IDApO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZW1hcmtzIGRldGVybWluZXMgd2hldGhlciBEZWVwc2NhblYxLmV4ZSBhbmQvb3IgRGVlcHNjYW5WMi5leGUgYXJlIGF2YWlsYWJsZSwgYW5kIHByb3ZpZGVzIHRoZSBtYXhpbXVtIHNjYW4gZGVwdGggcG9zc2libGUgZGVwZW5kaW5nIG9uIHRoZSBvdXRjb21lLlxyXG4gICAgICogQHBhcmFtIG5zIE5ldHNjcmlwdCBuYW1lc3BhY2VcclxuICAgICAqIEByZXR1cm5zIG1heGltdW0gc2NhbiBkZXB0aCBiYXNlZCBvbiB0aGUgZXhlY3V0YWJsZXMgYXZhaWxhYmxlLCByZXR1cm5zIGEgbnVtYmVyXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0TWF4UG9zc2libGVTY2FuRGVwdGgobnM6IE5TID0gdGhpcy5ucyk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHNjYW5EZXB0aDogbnVtYmVyID0gMztcclxuICAgICAgICBpZiAobnMuZmlsZUV4aXN0cyhgRGVlcHNjYW5WMS5leGVgKSkgc2NhbkRlcHRoID0gNTtcclxuICAgICAgICBpZiAobnMuZmlsZUV4aXN0cyhgRGVlcHNjYW5WMi5leGVgKSkgc2NhbkRlcHRoID0gMTA7XHJcbiAgICAgICAgcmV0dXJuIHNjYW5EZXB0aDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpbmRzIHRoZSBiZXN0IHNlcnZlciB0byBoYWNrIGJhc2VkIG9uIHRoZSBzY29yZSBjYWxjdWxhdGVkIGJ5IGBzY29yZVNlcnZlcmBcclxuICAgICAqIEBwYXJhbSBucyAtIE5ldHNjcmlwdCBuYW1lc3BhY2U7IGRlZmF1bHRzIHRvIHRoaXMubnNcclxuICAgICAqIEByZXR1cm5zIFRoZSBiZXN0IHNlcnZlciB0byBoYWNrLCBvciBgdW5kZWZpbmVkYCBpZiB0aGVyZSBhcmUgbm8gc2VydmVycyB0byBoYWNrXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhc3luYyBmaW5kQmVzdEhhY2tUYXJnZXQobnM6IE5TID0gdGhpcy5ucyk6IFByb21pc2U8U2VydmVyPiB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRCZXN0VGFyZ2V0OiBTZXJ2ZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IGJlc3RTY29yZSA9IC1JbmZpbml0eTtcclxuICAgICAgICB0aGlzLmZ1bGxTY2FubmVkU2VydmVyTGlzdC5mb3JFYWNoKHNlcnZlciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjb3JlID0gdGhpcy5zY29yZVNlcnZlcihzZXJ2ZXIpO1xyXG4gICAgICAgICAgICBpZiAoc2NvcmUgPiBiZXN0U2NvcmUpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRCZXN0VGFyZ2V0ID0gc2VydmVyO1xyXG4gICAgICAgICAgICAgICAgYmVzdFNjb3JlID0gc2NvcmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9ucy50cHJpbnQoYElORk86IC4uLiR7Y29sb3JzLkN5YW59ICR7c2VydmVyLmhvc3RuYW1lfSR7Y29sb3JzLlJlc2V0fSBzY29yZWQgJHtjb2xvcnMuR3JlZW59JHtzY29yZX0ke2NvbG9ycy5SZXNldH1gKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChjdXJyZW50QmVzdFRhcmdldCkgcmV0dXJuIGN1cnJlbnRCZXN0VGFyZ2V0O1xyXG4gICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKGBFUlJPUjogY291bGQgbm90IGFjcXVpcmUgaGFjayB0YXJnZXQhYCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBzY29yZSBvZiBhIHNlcnZlciBiYXNlZCBvbiBpdHMgbW9uZXkgYW5kIHNlY3VyaXR5IGZhY3RvcnMuXHJcbiAgICAgKiBAcmVtYXJrcyB0aGlzIGFsZ28gY2FtZSBmcm9tIENvUGlsb3QgXHJcbiAgICAgKiBAcGFyYW0gc2VydmVyIC0gVGhlIHNlcnZlciB0byBjYWxjdWxhdGUgdGhlIHNjb3JlIGZvci5cclxuICAgICAqIEBwYXJhbSBucyAtIE5ldHNjcmlwdCBuYW1lc3BhY2U7IGRlZmF1bHRzIHRvIHRoaXMubnNcclxuICAgICAqIEByZXR1cm5zIFRoZSBzY29yZSBvZiB0aGUgc2VydmVyIGFzIGEgbnVtYmVyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzY29yZVNlcnZlciA9IChzZXJ2ZXI6IFNlcnZlciwgbnM6IE5TID0gdGhpcy5ucyk6IG51bWJlciA9PiB7XHJcbiAgICAgICAgLy9ucy50cHJpbnQoYENhbGN1bGF0aW5nIHNjb3JlIGZvciBzZXJ2ZXIgJHtzZXJ2ZXIuaG9zdG5hbWV9Li4uYCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBsYXllckhhY2tpbmdMZXZlbCA9IG5zLmdldEhhY2tpbmdMZXZlbCgpO1xyXG4gICAgICAgIC8vbnMudHByaW50KGBQbGF5ZXIgaGFja2luZyBsZXZlbDogJHtwbGF5ZXJIYWNraW5nTGV2ZWx9YCk7XHJcblxyXG4gICAgICAgIGNvbnN0IG1vbmV5ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoc2VydmVyLmhvc3RuYW1lKTtcclxuICAgICAgICAvL25zLnRwcmludChgTW9uZXkgYXZhaWxhYmxlIG9uICR7c2VydmVyLmhvc3RuYW1lfTogJHttb25leX1gKTtcclxuXHJcbiAgICAgICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leShzZXJ2ZXIuaG9zdG5hbWUpO1xyXG4gICAgICAgIC8vbnMudHByaW50KGBNYXhpbXVtIG1vbmV5IGF2YWlsYWJsZSBvbiAke3NlcnZlci5ob3N0bmFtZX06ICR7bWF4TW9uZXl9YCk7XHJcblxyXG4gICAgICAgIGNvbnN0IG1vbmV5RmFjdG9yID0gTWF0aC5wb3cobW9uZXkgLyBtYXhNb25leSwgMik7XHJcbiAgICAgICAgLy9ucy50cHJpbnQoYE1vbmV5IGZhY3RvcjogJHttb25leUZhY3Rvcn1gKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2VjdXJpdHlMZXZlbCA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwoc2VydmVyLmhvc3RuYW1lKTtcclxuICAgICAgICAvL25zLnRwcmludChgU2VjdXJpdHkgbGV2ZWwgb2YgJHtzZXJ2ZXIuaG9zdG5hbWV9OiAke3NlY3VyaXR5TGV2ZWx9YCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlcXVpcmVkSGFja0xldmVsID0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoc2VydmVyLmhvc3RuYW1lKTtcclxuICAgICAgICAvL25zLnRwcmludChgSGFja2luZyBsZXZlbCByZXF1aXJlZCB0byBoYWNrICR7c2VydmVyLmhvc3RuYW1lfTogJHtyZXF1aXJlZEhhY2tMZXZlbH1gKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2VjdXJpdHlGYWN0b3IgPSByZXF1aXJlZEhhY2tMZXZlbCA+IHBsYXllckhhY2tpbmdMZXZlbCA/IDA6IChzZWN1cml0eUxldmVsIC0gcmVxdWlyZWRIYWNrTGV2ZWwpIC8gc2VjdXJpdHlMZXZlbDtcclxuICAgICAgICAvL25zLnRwcmludChgU2VjdXJpdHkgZmFjdG9yOiAke3NlY3VyaXR5RmFjdG9yfWApO1xyXG5cclxuICAgICAgICBjb25zdCBzY29yZSA9IG1vbmV5RmFjdG9yICogc2VjdXJpdHlGYWN0b3I7XHJcbiAgICAgICAgcmV0dXJuIHNjb3JlO1xyXG4gICAgfVxyXG59Il19\",\"filename\":\"server-matrix.js\",\"server\":\"home\"}}],[\"hackLib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// a library of functions used to hack servers and other fun things\\r\\n// created by j__r0d 2023-10-22, but a lot of the code was pasted in from other scripts\\r\\nexport const defaultHackToDeploy = `my-first-hack.js`;\\r\\nexport const defaultHackTargetHostname = `joesguns`;\\r\\nexport const colors = {\\r\\n    Black: '\\\\u001b[30m',\\r\\n    Red: '\\\\u001b[31m',\\r\\n    Green: '\\\\u001b[32m',\\r\\n    Yellow: '\\\\u001b[33m',\\r\\n    Blue: '\\\\u001b[34m',\\r\\n    Magenta: '\\\\u001b[35m',\\r\\n    Cyan: '\\\\u001b[36m',\\r\\n    White: '\\\\u001b[37m',\\r\\n    BrightBlack: '\\\\u001b[30;1m',\\r\\n    BrightRed: '\\\\u001b[31;1m',\\r\\n    BrightGreen: '\\\\u001b[32;1m',\\r\\n    BrightYellow: '\\\\u001b[33;1m',\\r\\n    BrightBlue: '\\\\u001b[34;1m',\\r\\n    BrightMagenta: '\\\\u001b[35;1m',\\r\\n    BrightCyan: '\\\\u001b[36;1m',\\r\\n    BrightWhite: '\\\\u001b[37;1m',\\r\\n    Reset: '\\\\u001b[0m',\\r\\n};\\r\\n/**\\r\\n * @remarks This function is a recursive function that scans servers to a given tree depth and returns a list of all servers to hack.\\r\\n * @param {NS} ns\\r\\n * @param depth scan depth; defaults to 1\\r\\n * @param serverList [Optional] running list of servers (is returned at end of recursion)\\r\\n * @param scannedServers [Optional] list of servers already scanned\\r\\n * @returns Array of all servers found up to specified depth.  The server hostnames in the returned array are string values.\\r\\n * @remarks I gave Copilot this comment block and asked it to write the function for me, using what existing code I had as a base, so it would use the canAddServer function.\\r\\n *\\r\\n * if list is empty, do a scan(), which runs scan on home server and make a list of all scannedServers\\r\\n * add scannedServers to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done one scan and serverAdd\\r\\n * check that depth > 0\\r\\n * scan each of the serverList servers to get neighborsList and add neighborsList to scannedServers\\r\\n * add neighborsList to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done another scan\\r\\n * scan each of the neighborsList servers to get secondNeighborsList and add secondNeighborsList to scannedServers\\r\\n * add secondNeighborsList to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done another scan\\r\\n * if depth is ever 0, return serverList\\r\\n */\\r\\nexport async function buildScannedServerList(ns, depth, serverList = [], scannedServers = []) {\\r\\n    if (serverList.length === 0) {\\r\\n        scannedServers = ns.scan();\\r\\n        serverList = scannedServers.filter(server => canAddServer(server, serverList));\\r\\n        --depth;\\r\\n    }\\r\\n    while (depth > 0) {\\r\\n        const newServers = [];\\r\\n        for (const server of serverList) {\\r\\n            const neighborHostnames = await (async () => ns.scan(server))();\\r\\n            const newNeighborHostnames = neighborHostnames.filter(serverHostname => canAddServer(serverHostname, serverList.concat(newServers)));\\r\\n            newServers.push(...newNeighborHostnames);\\r\\n            scannedServers.push(...newNeighborHostnames);\\r\\n        }\\r\\n        serverList.push(...newServers);\\r\\n        --depth;\\r\\n    }\\r\\n    return serverList;\\r\\n}\\r\\n/**\\r\\n * @remarks calculates the maximum amount of RAM that can be purchased for a server;\\r\\n * @remarks  based on the amount of money currently available on the home server.\\r\\n * @param ns Netscript namespace\\r\\n * @returns the maximum amount of RAM that can be purchased for a server, as a 2^n number (8, 16, 32, 64, etc.)\\r\\n */\\r\\nexport function calculateMaxRAM(ns) {\\r\\n    const moneyPerServer = ns.getServerMoneyAvailable(`home`) / ns.getPurchasedServerLimit();\\r\\n    let maxRAM = 8;\\r\\n    while (ns.getPurchasedServerCost(maxRAM * 2) < moneyPerServer) {\\r\\n        maxRAM *= 2;\\r\\n    }\\r\\n    return maxRAM;\\r\\n}\\r\\n/**\\r\\n * @remarks checks a server hostname against a list of forbidden servers and prefixes, and a list of servers already in the server list.\\r\\n * @param serverHostname hostname of server to check against forbidden servers and prefixes\\r\\n * @param serverList list of servers to check against for duplicates\\r\\n * @returns boolean value indicating whether the server can be added to the server list\\r\\n * @remarks the code in this function was created by Copilot after I asked a few questions about a better way to do this.\\r\\n * below was my attempt....clearly I wasn't thinking in the same direction at all, however copilot _did_ use this code to generate its own code.\\r\\n * ```js\\r\\n *     export function canAddServer(serverName: string, serverListName: string[]) {\\r\\n *         if (!(serverListName.includes(serverName)) || !(serverName == 'home' || 'darkweb') || !serverName.includes('pserv')) {\\r\\n *             return true;\\r\\n *         }\\r\\n *         else {\\r\\n *             return false;\\r\\n *         }\\r\\n *     };\\r\\n * ```\\r\\n */\\r\\nexport function canAddServer(serverHostname, serverList) {\\r\\n    const forbiddenServers = ['home', 'darkweb'];\\r\\n    const forbiddenServerPrefixes = ['pserv-'];\\r\\n    const isForbiddenServer = forbiddenServers.some(forbiddenServer => forbiddenServer === serverHostname);\\r\\n    const isForbiddenServerPrefix = forbiddenServerPrefixes.some(prefix => serverHostname.startsWith(prefix));\\r\\n    const isDuplicateServer = serverList.includes(serverHostname);\\r\\n    return !isForbiddenServer && !isDuplicateServer && !isForbiddenServerPrefix;\\r\\n}\\r\\n;\\r\\n/**\\r\\n * @remarks deploys a hack script to a server and starts it running, using the maximum number of threads available.\\r\\n * @param ns Netscript namespace\\r\\n * @param hostname server's hostname\\r\\n * @param hackToDeploy hack script to deploy\\r\\n * @param hackTarget target server for the deployed hack\\r\\n */\\r\\nexport async function deployHack(ns, hostname, hackToDeploy = \\\"my-first-hack.js\\\", hackTarget = `joesguns`) {\\r\\n    ns.tprint(`INFO: deploying hack to server: ${colors.Cyan}${hostname}${colors.Reset}`);\\r\\n    ns.kill(hackToDeploy, hostname); // free up RAM and overwrite any running script with the same name\\r\\n    ns.scp(hackToDeploy, hostname); // always over-write the existing script with the latest version\\r\\n    let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n    ns.exec(hackToDeploy, hostname, ~~threadsToUse, hackTarget);\\r\\n    if (ns.scriptRunning(hackToDeploy, hostname))\\r\\n        ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads!`);\\r\\n    //else throw new Error (`...hack deployment failed!`);\\r\\n}\\r\\n/**\\r\\n * @remarks fetches all fetch-able files from a server that are not already in the home directory.\\r\\n * @param ns Netscript namespace\\r\\n * @param hostname hostname of server from which to fetch files\\r\\n * @param homefilelist the list of files in the home directory\\r\\n */\\r\\nexport async function fileFetch(ns, hostname, homefilelist = []) {\\r\\n    ns.ls(hostname).forEach((file) => {\\r\\n        if (!homefilelist.includes(file))\\r\\n            try {\\r\\n                ns.scp(file, `home`, hostname);\\r\\n                ns.tprint(`INFO: ...${file} fetched from ${hostname}`);\\r\\n            }\\r\\n            catch {\\r\\n                ns.tprint(`ERROR: ...can't fetch ${file} from ${hostname}!`);\\r\\n            }\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * @remarks determines whether DeepscanV1.exe and/or DeepscanV2.exe are available, and provides the maximum scan depth possible depending on the outcome.\\r\\n * @param ns Netscript namespace\\r\\n * @returns maximum scan depth based on the executables available, returns a number\\r\\n */\\r\\nexport async function getMaxPossibleScanDepth(ns) {\\r\\n    let scanDepth = 3;\\r\\n    if (ns.fileExists(`DeepscanV1.exe`))\\r\\n        scanDepth = 5;\\r\\n    if (ns.fileExists(`DeepscanV2.exe`))\\r\\n        scanDepth = 10;\\r\\n    return scanDepth;\\r\\n}\\r\\n/**\\r\\n * @remarks attempts to nuke a server, and outputs results to the terminal.\\r\\n * @param ns Netscript namespace\\r\\n * @param hostname hostname of server to nuke\\r\\n */\\r\\nexport async function nukeServer(ns, hostname) {\\r\\n    try {\\r\\n        ns.nuke(hostname);\\r\\n        ns.tprint(`INFO: ...💣 successful. root access granted!`);\\r\\n    }\\r\\n    catch {\\r\\n        ns.tprint(`ERROR: ...root access denied! ❌ cannot hack ${colors.Cyan}${hostname}${colors.Reset}!`);\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * @remarks This function opens a specified number of ports on a server.\\r\\n * @param ns Netscript namespace\\r\\n * @param hostname hostname of server on which to open ports\\r\\n */\\r\\nexport async function openPorts(ns, hostname) {\\r\\n    const programs = [\\r\\n        `brutessh.exe`,\\r\\n        `ftpcrack.exe`,\\r\\n        `relaysmtp.exe`,\\r\\n        `httpworm.exe`,\\r\\n        `sqlinject.exe`\\r\\n    ];\\r\\n    const maxPorts = programs.length;\\r\\n    const portsRequired = ns.getServerNumPortsRequired(hostname);\\r\\n    for (let i = 0; i < portsRequired && i < maxPorts; i++) {\\r\\n        //ns.tprint(`INFO: ...opening port ${colors.Magenta}${i+1}${colors.Reset}...`); // i+1 because ports are 1-indexed\\r\\n        try {\\r\\n            if (ns.fileExists(programs[i])) {\\r\\n                switch (i) {\\r\\n                    case 0:\\r\\n                        ns.brutessh(hostname);\\r\\n                        break;\\r\\n                    case 1:\\r\\n                        ns.ftpcrack(hostname);\\r\\n                        break;\\r\\n                    case 2:\\r\\n                        ns.relaysmtp(hostname);\\r\\n                        break;\\r\\n                    case 3:\\r\\n                        ns.httpworm(hostname);\\r\\n                        break;\\r\\n                    case 4:\\r\\n                        ns.sqlinject(hostname);\\r\\n                        break;\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                throw (`${colors.Yellow}${programs[i]}${colors.Reset} unavailable, cannot open port ${colors.Magenta}${i + 1}${colors.Reset}`);\\r\\n            }\\r\\n        }\\r\\n        catch (err) {\\r\\n            ns.tprint(`ERROR: ${err} ...aborting`);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * @remarks purchases a server with the specified hostname and RAM, and returns the hostname of the purchased server.\\r\\n * @param ns Netscript namespace\\r\\n * @param hostname name of the server to purchase\\r\\n * @param ram amount of RAM to purchase\\r\\n * @returns the hostname of the purchased server, as a string\\r\\n */\\r\\nexport async function purchaseServer(ns, hostname, ram) {\\r\\n    ns.purchaseServer(hostname, ram);\\r\\n    return hostname;\\r\\n}\\r\\nexport async function startPurchasedServers(ns, hackToDeploy, hackTarget, ramToPurchase) {\\r\\n}\\r\\n// this doesn't do anything yet, but needs to be implemented\\r\\nexport async function upgradeServer(ns, hostname, ram) {\\r\\n    ns.upgradePurchasedServer(hostname, ram);\\r\\n}\\r\\n/**\\r\\n * @remarks If the money available on the current server is greater than the money available on the accumulator server,\\r\\n * @remarks the callback function returns the name of the current server (b), otherwise it returns the name of the accumulator server (a).\\r\\n * @remarks This process continues until all servers in the array have been compared, at which point the name of the server with the highest amount of money available is returned.\\r\\n * @param ns Netscript namespace\\r\\n * @param serverList list of servers to compare\\r\\n * @returns The server hostname that has the most money available, the server hostname will be a string.\\r\\n */\\r\\nconst serverWithMostMoney = (ns, serverList) => {\\r\\n    const servers = serverList.filter((server) => server !== `home` && !/pserv-\\\\d/.test(server));\\r\\n    return servers.reduce((accumulator, currentValue) => {\\r\\n        return ns.getServerMoneyAvailable(currentValue) > ns.getServerMoneyAvailable(accumulator)\\r\\n            ? currentValue\\r\\n            : accumulator;\\r\\n    });\\r\\n};\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja0xpYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYWNrTGliLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1FQUFtRTtBQUNuRSx1RkFBdUY7QUFLdkYsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsa0JBQWtCLENBQUM7QUFDdEQsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsVUFBVSxDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRztJQUNsQixLQUFLLEVBQUUsWUFBWTtJQUNuQixHQUFHLEVBQUUsWUFBWTtJQUNqQixLQUFLLEVBQUUsWUFBWTtJQUNuQixNQUFNLEVBQUUsWUFBWTtJQUNwQixJQUFJLEVBQUUsWUFBWTtJQUNsQixPQUFPLEVBQUUsWUFBWTtJQUNyQixJQUFJLEVBQUUsWUFBWTtJQUNsQixLQUFLLEVBQUUsWUFBWTtJQUNuQixXQUFXLEVBQUUsY0FBYztJQUMzQixTQUFTLEVBQUUsY0FBYztJQUN6QixXQUFXLEVBQUUsY0FBYztJQUMzQixZQUFZLEVBQUUsY0FBYztJQUM1QixVQUFVLEVBQUUsY0FBYztJQUMxQixhQUFhLEVBQUUsY0FBYztJQUM3QixVQUFVLEVBQUUsY0FBYztJQUMxQixXQUFXLEVBQUUsY0FBYztJQUMzQixLQUFLLEVBQUUsV0FBVztDQUNyQixDQUFBO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxzQkFBc0IsQ0FBQyxFQUFNLEVBQUUsS0FBYSxFQUFFLGFBQXVCLEVBQUUsRUFBRSxpQkFBMkIsRUFBRTtJQUN4SCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3pCLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDM0IsVUFBVSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDL0UsRUFBRSxLQUFLLENBQUM7S0FDWDtJQUVELE9BQU8sS0FBSyxHQUFHLENBQUMsRUFBRTtRQUNkLE1BQU0sVUFBVSxHQUFhLEVBQUUsQ0FBQztRQUVoQyxLQUFLLE1BQU0sTUFBTSxJQUFJLFVBQVUsRUFBRTtZQUM3QixNQUFNLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ2hFLE1BQU0sb0JBQW9CLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNySSxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsb0JBQW9CLENBQUMsQ0FBQztZQUN6QyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsb0JBQW9CLENBQUMsQ0FBQztTQUNoRDtRQUVELFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztRQUMvQixFQUFFLEtBQUssQ0FBQztLQUNYO0lBRUQsT0FBTyxVQUFVLENBQUM7QUFDdEIsQ0FBQztBQUVEOzs7OztHQUtHO0FBRUgsTUFBTSxVQUFVLGVBQWUsQ0FBQyxFQUFNO0lBQ2xDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztJQUN6RixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDZixPQUFRLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUksY0FBYyxFQUFFO1FBQzdELE1BQU0sSUFBSSxDQUFDLENBQUM7S0FDZjtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFDSCxNQUFNLFVBQVUsWUFBWSxDQUFDLGNBQXNCLEVBQUUsVUFBb0I7SUFDckUsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM3QyxNQUFNLHVCQUF1QixHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFM0MsTUFBTSxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEtBQUssY0FBYyxDQUFDLENBQUM7SUFDdkcsTUFBTSx1QkFBdUIsR0FBRyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDMUcsTUFBTSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRTlELE9BQU8sQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLGlCQUFpQixJQUFJLENBQUMsdUJBQXVCLENBQUM7QUFDaEYsQ0FBQztBQUFBLENBQUM7QUFFRjs7Ozs7O0dBTUc7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLFVBQVUsQ0FBQyxFQUFNLEVBQUUsUUFBZ0IsRUFBRSxlQUF1QixrQkFBa0IsRUFBRSxhQUFxQixVQUFVO0lBQ2pJLEVBQUUsQ0FBQyxNQUFNLENBQUMsbUNBQW1DLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBRXRGLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsa0VBQWtFO0lBQ2xHLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsZ0VBQWdFO0lBQ2hHLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDL0gsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFNUQsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUM7UUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLEtBQUssV0FBVyxDQUFDLENBQUM7SUFDbkosc0RBQXNEO0FBQzFELENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsU0FBUyxDQUFDLEVBQU0sRUFBRSxRQUFnQixFQUFFLGVBQXlCLEVBQUU7SUFDakYsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRTtRQUNyQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDNUIsSUFBSTtnQkFDQSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQy9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxJQUFJLGlCQUFpQixRQUFRLEVBQUUsQ0FBQyxDQUFDO2FBQzFEO1lBQ0QsTUFBTTtnQkFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLHlCQUF5QixJQUFJLFNBQVMsUUFBUSxHQUFHLENBQUMsQ0FBQzthQUFFO0lBQy9FLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLHVCQUF1QixDQUFDLEVBQU07SUFDaEQsSUFBSSxTQUFTLEdBQVcsQ0FBQyxDQUFDO0lBQzFCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUFFLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDbkQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDO1FBQUUsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUNwRCxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsVUFBVSxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNqRCxJQUFJO1FBQ0EsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLDhDQUE4QyxDQUFDLENBQUM7S0FDN0Q7SUFDRCxNQUFNO1FBQ0YsRUFBRSxDQUFDLE1BQU0sQ0FBQywrQ0FBK0MsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7S0FDdEc7QUFDVCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsU0FBUyxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNwRCxNQUFNLFFBQVEsR0FBRztRQUNiLGNBQWM7UUFDZCxjQUFjO1FBQ2QsZUFBZTtRQUNmLGNBQWM7UUFDZCxlQUFlO0tBQ2xCLENBQUM7SUFDRixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQ2pDLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsYUFBYSxJQUFJLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEQsa0hBQWtIO1FBQ2xILElBQUk7WUFDQSxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzVCLFFBQVEsQ0FBQyxFQUFFO29CQUNQLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN0QixNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN0QixNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN2QixNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN0QixNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN2QixNQUFNO2lCQUNiO2FBQ0o7aUJBQU07Z0JBQ0gsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssa0NBQWtDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUNoSTtTQUNKO1FBQUMsT0FBTSxHQUFHLEVBQUU7WUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxjQUFjLENBQUMsQ0FBQztZQUN2QyxNQUFNO1NBQ1Q7S0FDSjtBQUNMLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLGNBQWMsQ0FBQyxFQUFNLEVBQUUsUUFBZ0IsRUFBRSxHQUFXO0lBQ3RFLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLE9BQU8sUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLHFCQUFxQixDQUFDLEVBQU0sRUFBRSxZQUFvQixFQUFFLFVBQWtCLEVBQUUsYUFBcUI7QUFFbkgsQ0FBQztBQUVELDREQUE0RDtBQUM1RCxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FBQyxFQUFNLEVBQUUsUUFBZ0IsRUFBRSxHQUFXO0lBQ3JFLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLG1CQUFtQixHQUFHLENBQUMsRUFBTSxFQUFFLFVBQWUsRUFBRSxFQUFFO0lBQ3BELE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRSxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDckcsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBbUIsRUFBRSxZQUFvQixFQUFFLEVBQUU7UUFDaEUsT0FBTyxFQUFFLENBQUMsdUJBQXVCLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLFdBQVcsQ0FBQztZQUNyRixDQUFDLENBQUMsWUFBWTtZQUNkLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDdEIsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhIGxpYnJhcnkgb2YgZnVuY3Rpb25zIHVzZWQgdG8gaGFjayBzZXJ2ZXJzIGFuZCBvdGhlciBmdW4gdGhpbmdzXHJcbi8vIGNyZWF0ZWQgYnkgal9fcjBkIDIwMjMtMTAtMjIsIGJ1dCBhIGxvdCBvZiB0aGUgY29kZSB3YXMgcGFzdGVkIGluIGZyb20gb3RoZXIgc2NyaXB0c1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBTZXJ2ZXJNYXRyaXggYXMgc20gfSAgZnJvbSAnLi9zZXJ2ZXItbWF0cml4JztcclxuXHJcbmV4cG9ydCBjb25zdCBkZWZhdWx0SGFja1RvRGVwbG95ID0gYG15LWZpcnN0LWhhY2suanNgO1xyXG5leHBvcnQgY29uc3QgZGVmYXVsdEhhY2tUYXJnZXRIb3N0bmFtZSA9IGBqb2VzZ3Vuc2A7XHJcbmV4cG9ydCBjb25zdCBjb2xvcnMgPSB7XHJcbiAgICBCbGFjazogJ1xcdTAwMWJbMzBtJyxcclxuICAgIFJlZDogJ1xcdTAwMWJbMzFtJyxcclxuICAgIEdyZWVuOiAnXFx1MDAxYlszMm0nLFxyXG4gICAgWWVsbG93OiAnXFx1MDAxYlszM20nLFxyXG4gICAgQmx1ZTogJ1xcdTAwMWJbMzRtJyxcclxuICAgIE1hZ2VudGE6ICdcXHUwMDFiWzM1bScsXHJcbiAgICBDeWFuOiAnXFx1MDAxYlszNm0nLFxyXG4gICAgV2hpdGU6ICdcXHUwMDFiWzM3bScsXHJcbiAgICBCcmlnaHRCbGFjazogJ1xcdTAwMWJbMzA7MW0nLFxyXG4gICAgQnJpZ2h0UmVkOiAnXFx1MDAxYlszMTsxbScsXHJcbiAgICBCcmlnaHRHcmVlbjogJ1xcdTAwMWJbMzI7MW0nLFxyXG4gICAgQnJpZ2h0WWVsbG93OiAnXFx1MDAxYlszMzsxbScsXHJcbiAgICBCcmlnaHRCbHVlOiAnXFx1MDAxYlszNDsxbScsXHJcbiAgICBCcmlnaHRNYWdlbnRhOiAnXFx1MDAxYlszNTsxbScsXHJcbiAgICBCcmlnaHRDeWFuOiAnXFx1MDAxYlszNjsxbScsXHJcbiAgICBCcmlnaHRXaGl0ZTogJ1xcdTAwMWJbMzc7MW0nLFxyXG4gICAgUmVzZXQ6ICdcXHUwMDFiWzBtJyxcclxufVxyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIFRoaXMgZnVuY3Rpb24gaXMgYSByZWN1cnNpdmUgZnVuY3Rpb24gdGhhdCBzY2FucyBzZXJ2ZXJzIHRvIGEgZ2l2ZW4gdHJlZSBkZXB0aCBhbmQgcmV0dXJucyBhIGxpc3Qgb2YgYWxsIHNlcnZlcnMgdG8gaGFjay5cclxuICogQHBhcmFtIHtOU30gbnMgXHJcbiAqIEBwYXJhbSBkZXB0aCBzY2FuIGRlcHRoOyBkZWZhdWx0cyB0byAxXHJcbiAqIEBwYXJhbSBzZXJ2ZXJMaXN0IFtPcHRpb25hbF0gcnVubmluZyBsaXN0IG9mIHNlcnZlcnMgKGlzIHJldHVybmVkIGF0IGVuZCBvZiByZWN1cnNpb24pXHJcbiAqIEBwYXJhbSBzY2FubmVkU2VydmVycyBbT3B0aW9uYWxdIGxpc3Qgb2Ygc2VydmVycyBhbHJlYWR5IHNjYW5uZWRcclxuICogQHJldHVybnMgQXJyYXkgb2YgYWxsIHNlcnZlcnMgZm91bmQgdXAgdG8gc3BlY2lmaWVkIGRlcHRoLiAgVGhlIHNlcnZlciBob3N0bmFtZXMgaW4gdGhlIHJldHVybmVkIGFycmF5IGFyZSBzdHJpbmcgdmFsdWVzLiBcclxuICogQHJlbWFya3MgSSBnYXZlIENvcGlsb3QgdGhpcyBjb21tZW50IGJsb2NrIGFuZCBhc2tlZCBpdCB0byB3cml0ZSB0aGUgZnVuY3Rpb24gZm9yIG1lLCB1c2luZyB3aGF0IGV4aXN0aW5nIGNvZGUgSSBoYWQgYXMgYSBiYXNlLCBzbyBpdCB3b3VsZCB1c2UgdGhlIGNhbkFkZFNlcnZlciBmdW5jdGlvbi5cclxuICogXHJcbiAqIGlmIGxpc3QgaXMgZW1wdHksIGRvIGEgc2NhbigpLCB3aGljaCBydW5zIHNjYW4gb24gaG9tZSBzZXJ2ZXIgYW5kIG1ha2UgYSBsaXN0IG9mIGFsbCBzY2FubmVkU2VydmVyc1xyXG4gKiBhZGQgc2Nhbm5lZFNlcnZlcnMgdG8gc2VydmVyTGlzdCBpZiB0aGV5IGNhbiBiZSBhZGRlZCAobm90IGZvcmJpZGRlbiwgbm90IGEgZHVwbGljYXRlLCBub3QgYSBwcmVmaXgpXHJcbiAqIGRlY3JlYXNlIGRlcHRoIGJlY2F1c2Ugd2UndmUgZG9uZSBvbmUgc2NhbiBhbmQgc2VydmVyQWRkXHJcbiAqIGNoZWNrIHRoYXQgZGVwdGggPiAwXHJcbiAqIHNjYW4gZWFjaCBvZiB0aGUgc2VydmVyTGlzdCBzZXJ2ZXJzIHRvIGdldCBuZWlnaGJvcnNMaXN0IGFuZCBhZGQgbmVpZ2hib3JzTGlzdCB0byBzY2FubmVkU2VydmVyc1xyXG4gKiBhZGQgbmVpZ2hib3JzTGlzdCB0byBzZXJ2ZXJMaXN0IGlmIHRoZXkgY2FuIGJlIGFkZGVkIChub3QgZm9yYmlkZGVuLCBub3QgYSBkdXBsaWNhdGUsIG5vdCBhIHByZWZpeClcclxuICogZGVjcmVhc2UgZGVwdGggYmVjYXVzZSB3ZSd2ZSBkb25lIGFub3RoZXIgc2NhblxyXG4gKiBzY2FuIGVhY2ggb2YgdGhlIG5laWdoYm9yc0xpc3Qgc2VydmVycyB0byBnZXQgc2Vjb25kTmVpZ2hib3JzTGlzdCBhbmQgYWRkIHNlY29uZE5laWdoYm9yc0xpc3QgdG8gc2Nhbm5lZFNlcnZlcnNcclxuICogYWRkIHNlY29uZE5laWdoYm9yc0xpc3QgdG8gc2VydmVyTGlzdCBpZiB0aGV5IGNhbiBiZSBhZGRlZCAobm90IGZvcmJpZGRlbiwgbm90IGEgZHVwbGljYXRlLCBub3QgYSBwcmVmaXgpXHJcbiAqIGRlY3JlYXNlIGRlcHRoIGJlY2F1c2Ugd2UndmUgZG9uZSBhbm90aGVyIHNjYW5cclxuICogaWYgZGVwdGggaXMgZXZlciAwLCByZXR1cm4gc2VydmVyTGlzdFxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJ1aWxkU2Nhbm5lZFNlcnZlckxpc3QobnM6IE5TLCBkZXB0aDogbnVtYmVyLCBzZXJ2ZXJMaXN0OiBzdHJpbmdbXSA9IFtdLCBzY2FubmVkU2VydmVyczogc3RyaW5nW10gPSBbXSkge1xyXG4gICAgaWYgKHNlcnZlckxpc3QubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgc2Nhbm5lZFNlcnZlcnMgPSBucy5zY2FuKCk7XHJcbiAgICAgICAgc2VydmVyTGlzdCA9IHNjYW5uZWRTZXJ2ZXJzLmZpbHRlcihzZXJ2ZXIgPT4gY2FuQWRkU2VydmVyKHNlcnZlciwgc2VydmVyTGlzdCkpO1xyXG4gICAgICAgIC0tZGVwdGg7XHJcbiAgICB9XHJcblxyXG4gICAgd2hpbGUgKGRlcHRoID4gMCkge1xyXG4gICAgICAgIGNvbnN0IG5ld1NlcnZlcnM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qgc2VydmVyIG9mIHNlcnZlckxpc3QpIHtcclxuICAgICAgICAgICAgY29uc3QgbmVpZ2hib3JIb3N0bmFtZXMgPSBhd2FpdCAoYXN5bmMgKCkgPT4gbnMuc2NhbihzZXJ2ZXIpKSgpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdOZWlnaGJvckhvc3RuYW1lcyA9IG5laWdoYm9ySG9zdG5hbWVzLmZpbHRlcihzZXJ2ZXJIb3N0bmFtZSA9PiBjYW5BZGRTZXJ2ZXIoc2VydmVySG9zdG5hbWUsIHNlcnZlckxpc3QuY29uY2F0KG5ld1NlcnZlcnMpKSk7XHJcbiAgICAgICAgICAgIG5ld1NlcnZlcnMucHVzaCguLi5uZXdOZWlnaGJvckhvc3RuYW1lcyk7XHJcbiAgICAgICAgICAgIHNjYW5uZWRTZXJ2ZXJzLnB1c2goLi4ubmV3TmVpZ2hib3JIb3N0bmFtZXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VydmVyTGlzdC5wdXNoKC4uLm5ld1NlcnZlcnMpO1xyXG4gICAgICAgIC0tZGVwdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNlcnZlckxpc3Q7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcmVtYXJrcyBjYWxjdWxhdGVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBSQU0gdGhhdCBjYW4gYmUgcHVyY2hhc2VkIGZvciBhIHNlcnZlcjsgXHJcbiAqIEByZW1hcmtzICBiYXNlZCBvbiB0aGUgYW1vdW50IG9mIG1vbmV5IGN1cnJlbnRseSBhdmFpbGFibGUgb24gdGhlIGhvbWUgc2VydmVyLlxyXG4gKiBAcGFyYW0gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZVxyXG4gKiBAcmV0dXJucyB0aGUgbWF4aW11bSBhbW91bnQgb2YgUkFNIHRoYXQgY2FuIGJlIHB1cmNoYXNlZCBmb3IgYSBzZXJ2ZXIsIGFzIGEgMl5uIG51bWJlciAoOCwgMTYsIDMyLCA2NCwgZXRjLilcclxuICovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlTWF4UkFNKG5zOiBOUykge1xyXG4gICAgY29uc3QgbW9uZXlQZXJTZXJ2ZXIgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShgaG9tZWApIC8gbnMuZ2V0UHVyY2hhc2VkU2VydmVyTGltaXQoKTtcclxuICAgIGxldCBtYXhSQU0gPSA4O1xyXG4gICAgd2hpbGUgKCBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KG1heFJBTSAqIDIpIDwgIG1vbmV5UGVyU2VydmVyKSB7XHJcbiAgICAgICAgbWF4UkFNICo9IDI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWF4UkFNO1xyXG59XHJcblxyXG4vKipcclxuICogQHJlbWFya3MgY2hlY2tzIGEgc2VydmVyIGhvc3RuYW1lIGFnYWluc3QgYSBsaXN0IG9mIGZvcmJpZGRlbiBzZXJ2ZXJzIGFuZCBwcmVmaXhlcywgYW5kIGEgbGlzdCBvZiBzZXJ2ZXJzIGFscmVhZHkgaW4gdGhlIHNlcnZlciBsaXN0LlxyXG4gKiBAcGFyYW0gc2VydmVySG9zdG5hbWUgaG9zdG5hbWUgb2Ygc2VydmVyIHRvIGNoZWNrIGFnYWluc3QgZm9yYmlkZGVuIHNlcnZlcnMgYW5kIHByZWZpeGVzXHJcbiAqIEBwYXJhbSBzZXJ2ZXJMaXN0IGxpc3Qgb2Ygc2VydmVycyB0byBjaGVjayBhZ2FpbnN0IGZvciBkdXBsaWNhdGVzXHJcbiAqIEByZXR1cm5zIGJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBzZXJ2ZXIgY2FuIGJlIGFkZGVkIHRvIHRoZSBzZXJ2ZXIgbGlzdFxyXG4gKiBAcmVtYXJrcyB0aGUgY29kZSBpbiB0aGlzIGZ1bmN0aW9uIHdhcyBjcmVhdGVkIGJ5IENvcGlsb3QgYWZ0ZXIgSSBhc2tlZCBhIGZldyBxdWVzdGlvbnMgYWJvdXQgYSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXMuXHJcbiAqIGJlbG93IHdhcyBteSBhdHRlbXB0Li4uLmNsZWFybHkgSSB3YXNuJ3QgdGhpbmtpbmcgaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGF0IGFsbCwgaG93ZXZlciBjb3BpbG90IF9kaWRfIHVzZSB0aGlzIGNvZGUgdG8gZ2VuZXJhdGUgaXRzIG93biBjb2RlLlxyXG4gKiBgYGBqc1xyXG4gKiAgICAgZXhwb3J0IGZ1bmN0aW9uIGNhbkFkZFNlcnZlcihzZXJ2ZXJOYW1lOiBzdHJpbmcsIHNlcnZlckxpc3ROYW1lOiBzdHJpbmdbXSkge1xyXG4gKiAgICAgICAgIGlmICghKHNlcnZlckxpc3ROYW1lLmluY2x1ZGVzKHNlcnZlck5hbWUpKSB8fCAhKHNlcnZlck5hbWUgPT0gJ2hvbWUnIHx8ICdkYXJrd2ViJykgfHwgIXNlcnZlck5hbWUuaW5jbHVkZXMoJ3BzZXJ2JykpIHtcclxuICogICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAqICAgICAgICAgfVxyXG4gKiAgICAgICAgIGVsc2Uge1xyXG4gKiAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAqICAgICAgICAgfVxyXG4gKiAgICAgfTsgXHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbkFkZFNlcnZlcihzZXJ2ZXJIb3N0bmFtZTogc3RyaW5nLCBzZXJ2ZXJMaXN0OiBzdHJpbmdbXSkge1xyXG4gICAgY29uc3QgZm9yYmlkZGVuU2VydmVycyA9IFsnaG9tZScsICdkYXJrd2ViJ107XHJcbiAgICBjb25zdCBmb3JiaWRkZW5TZXJ2ZXJQcmVmaXhlcyA9IFsncHNlcnYtJ107XHJcblxyXG4gICAgY29uc3QgaXNGb3JiaWRkZW5TZXJ2ZXIgPSBmb3JiaWRkZW5TZXJ2ZXJzLnNvbWUoZm9yYmlkZGVuU2VydmVyID0+IGZvcmJpZGRlblNlcnZlciA9PT0gc2VydmVySG9zdG5hbWUpO1xyXG4gICAgY29uc3QgaXNGb3JiaWRkZW5TZXJ2ZXJQcmVmaXggPSBmb3JiaWRkZW5TZXJ2ZXJQcmVmaXhlcy5zb21lKHByZWZpeCA9PiBzZXJ2ZXJIb3N0bmFtZS5zdGFydHNXaXRoKHByZWZpeCkpO1xyXG4gICAgY29uc3QgaXNEdXBsaWNhdGVTZXJ2ZXIgPSBzZXJ2ZXJMaXN0LmluY2x1ZGVzKHNlcnZlckhvc3RuYW1lKTtcclxuXHJcbiAgICByZXR1cm4gIWlzRm9yYmlkZGVuU2VydmVyICYmICFpc0R1cGxpY2F0ZVNlcnZlciAmJiAhaXNGb3JiaWRkZW5TZXJ2ZXJQcmVmaXg7XHJcbn07XHJcblxyXG4vKipcclxuICogQHJlbWFya3MgZGVwbG95cyBhIGhhY2sgc2NyaXB0IHRvIGEgc2VydmVyIGFuZCBzdGFydHMgaXQgcnVubmluZywgdXNpbmcgdGhlIG1heGltdW0gbnVtYmVyIG9mIHRocmVhZHMgYXZhaWxhYmxlLlxyXG4gKiBAcGFyYW0gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZVxyXG4gKiBAcGFyYW0gaG9zdG5hbWUgc2VydmVyJ3MgaG9zdG5hbWVcclxuICogQHBhcmFtIGhhY2tUb0RlcGxveSBoYWNrIHNjcmlwdCB0byBkZXBsb3lcclxuICogQHBhcmFtIGhhY2tUYXJnZXQgdGFyZ2V0IHNlcnZlciBmb3IgdGhlIGRlcGxveWVkIGhhY2tcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZXBsb3lIYWNrKG5zOiBOUywgaG9zdG5hbWU6IHN0cmluZywgaGFja1RvRGVwbG95OiBzdHJpbmcgPSBcIm15LWZpcnN0LWhhY2suanNcIiwgaGFja1RhcmdldDogc3RyaW5nID0gYGpvZXNndW5zYCkge1xyXG4gICAgbnMudHByaW50KGBJTkZPOiBkZXBsb3lpbmcgaGFjayB0byBzZXJ2ZXI6ICR7Y29sb3JzLkN5YW59JHtob3N0bmFtZX0ke2NvbG9ycy5SZXNldH1gKTtcclxuXHJcbiAgICBucy5raWxsKGhhY2tUb0RlcGxveSxob3N0bmFtZSk7IC8vIGZyZWUgdXAgUkFNIGFuZCBvdmVyd3JpdGUgYW55IHJ1bm5pbmcgc2NyaXB0IHdpdGggdGhlIHNhbWUgbmFtZVxyXG4gICAgbnMuc2NwKGhhY2tUb0RlcGxveSwgaG9zdG5hbWUpOyAvLyBhbHdheXMgb3Zlci13cml0ZSB0aGUgZXhpc3Rpbmcgc2NyaXB0IHdpdGggdGhlIGxhdGVzdCB2ZXJzaW9uXHJcbiAgICBsZXQgdGhyZWFkc1RvVXNlID0gTWF0aC5tYXgoMSwgKG5zLmdldFNlcnZlck1heFJhbShob3N0bmFtZSkgLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKGhvc3RuYW1lKSkgLyBucy5nZXRTY3JpcHRSYW0oaGFja1RvRGVwbG95KSk7XHJcbiAgICBucy5leGVjKGhhY2tUb0RlcGxveSwgaG9zdG5hbWUsIH5+dGhyZWFkc1RvVXNlLCBoYWNrVGFyZ2V0KTtcclxuICAgIFxyXG4gICAgaWYgKG5zLnNjcmlwdFJ1bm5pbmcoaGFja1RvRGVwbG95LCBob3N0bmFtZSkpIG5zLnRwcmludChgSU5GTzogLi4uaGFjayBkZXBsb3llZCB1c2luZyAke2NvbG9ycy5NYWdlbnRhfSR7fn50aHJlYWRzVG9Vc2V9JHtjb2xvcnMuUmVzZXR9IHRocmVhZHMhYCk7XHJcbiAgICAvL2Vsc2UgdGhyb3cgbmV3IEVycm9yIChgLi4uaGFjayBkZXBsb3ltZW50IGZhaWxlZCFgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIGZldGNoZXMgYWxsIGZldGNoLWFibGUgZmlsZXMgZnJvbSBhIHNlcnZlciB0aGF0IGFyZSBub3QgYWxyZWFkeSBpbiB0aGUgaG9tZSBkaXJlY3RvcnkuXHJcbiAqIEBwYXJhbSBucyBOZXRzY3JpcHQgbmFtZXNwYWNlXHJcbiAqIEBwYXJhbSBob3N0bmFtZSBob3N0bmFtZSBvZiBzZXJ2ZXIgZnJvbSB3aGljaCB0byBmZXRjaCBmaWxlc1xyXG4gKiBAcGFyYW0gaG9tZWZpbGVsaXN0IHRoZSBsaXN0IG9mIGZpbGVzIGluIHRoZSBob21lIGRpcmVjdG9yeVxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbGVGZXRjaChuczogTlMsIGhvc3RuYW1lOiBzdHJpbmcsIGhvbWVmaWxlbGlzdDogc3RyaW5nW10gPSBbXSkgeyAgIFxyXG4gICAgbnMubHMoaG9zdG5hbWUpLmZvckVhY2goKGZpbGU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGlmICghaG9tZWZpbGVsaXN0LmluY2x1ZGVzKGZpbGUpKVxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgbnMuc2NwKGZpbGUsIGBob21lYCwgaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiAuLi4ke2ZpbGV9IGZldGNoZWQgZnJvbSAke2hvc3RuYW1lfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIHsgbnMudHByaW50KGBFUlJPUjogLi4uY2FuJ3QgZmV0Y2ggJHtmaWxlfSBmcm9tICR7aG9zdG5hbWV9IWApOyB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIGRldGVybWluZXMgd2hldGhlciBEZWVwc2NhblYxLmV4ZSBhbmQvb3IgRGVlcHNjYW5WMi5leGUgYXJlIGF2YWlsYWJsZSwgYW5kIHByb3ZpZGVzIHRoZSBtYXhpbXVtIHNjYW4gZGVwdGggcG9zc2libGUgZGVwZW5kaW5nIG9uIHRoZSBvdXRjb21lLlxyXG4gKiBAcGFyYW0gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZVxyXG4gKiBAcmV0dXJucyBtYXhpbXVtIHNjYW4gZGVwdGggYmFzZWQgb24gdGhlIGV4ZWN1dGFibGVzIGF2YWlsYWJsZSwgcmV0dXJucyBhIG51bWJlclxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE1heFBvc3NpYmxlU2NhbkRlcHRoKG5zOiBOUykge1xyXG4gICAgbGV0IHNjYW5EZXB0aDogbnVtYmVyID0gMztcclxuICAgIGlmIChucy5maWxlRXhpc3RzKGBEZWVwc2NhblYxLmV4ZWApKSBzY2FuRGVwdGggPSA1O1xyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoYERlZXBzY2FuVjIuZXhlYCkpIHNjYW5EZXB0aCA9IDEwO1xyXG4gICAgcmV0dXJuIHNjYW5EZXB0aDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIGF0dGVtcHRzIHRvIG51a2UgYSBzZXJ2ZXIsIGFuZCBvdXRwdXRzIHJlc3VsdHMgdG8gdGhlIHRlcm1pbmFsLlxyXG4gKiBAcGFyYW0gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZVxyXG4gKiBAcGFyYW0gaG9zdG5hbWUgaG9zdG5hbWUgb2Ygc2VydmVyIHRvIG51a2VcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBudWtlU2VydmVyKG5zOiBOUywgaG9zdG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIG5zLm51a2UoaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICBucy50cHJpbnQoYElORk86IC4uLvCfkqMgc3VjY2Vzc2Z1bC4gcm9vdCBhY2Nlc3MgZ3JhbnRlZCFgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2gge1xyXG4gICAgICAgICAgICBucy50cHJpbnQoYEVSUk9SOiAuLi5yb290IGFjY2VzcyBkZW5pZWQhIOKdjCBjYW5ub3QgaGFjayAke2NvbG9ycy5DeWFufSR7aG9zdG5hbWV9JHtjb2xvcnMuUmVzZXR9IWApO1xyXG4gICAgICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIFRoaXMgZnVuY3Rpb24gb3BlbnMgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIHBvcnRzIG9uIGEgc2VydmVyLiBcclxuICogQHBhcmFtIG5zIE5ldHNjcmlwdCBuYW1lc3BhY2VcclxuICogQHBhcmFtIGhvc3RuYW1lIGhvc3RuYW1lIG9mIHNlcnZlciBvbiB3aGljaCB0byBvcGVuIHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gb3BlblBvcnRzKG5zOiBOUywgaG9zdG5hbWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgcHJvZ3JhbXMgPSBbXHJcbiAgICAgICAgYGJydXRlc3NoLmV4ZWAsXHJcbiAgICAgICAgYGZ0cGNyYWNrLmV4ZWAsXHJcbiAgICAgICAgYHJlbGF5c210cC5leGVgLFxyXG4gICAgICAgIGBodHRwd29ybS5leGVgLFxyXG4gICAgICAgIGBzcWxpbmplY3QuZXhlYFxyXG4gICAgXTtcclxuICAgIGNvbnN0IG1heFBvcnRzID0gcHJvZ3JhbXMubGVuZ3RoO1xyXG4gICAgY29uc3QgcG9ydHNSZXF1aXJlZCA9IG5zLmdldFNlcnZlck51bVBvcnRzUmVxdWlyZWQoaG9zdG5hbWUpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3J0c1JlcXVpcmVkICYmIGkgPCBtYXhQb3J0czsgaSsrKSB7XHJcbiAgICAgICAgLy9ucy50cHJpbnQoYElORk86IC4uLm9wZW5pbmcgcG9ydCAke2NvbG9ycy5NYWdlbnRhfSR7aSsxfSR7Y29sb3JzLlJlc2V0fS4uLmApOyAvLyBpKzEgYmVjYXVzZSBwb3J0cyBhcmUgMS1pbmRleGVkXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKG5zLmZpbGVFeGlzdHMocHJvZ3JhbXNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5zLmJydXRlc3NoKGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBucy5mdHBjcmFjayhob3N0bmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMucmVsYXlzbXRwKGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBucy5odHRwd29ybShob3N0bmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc3FsaW5qZWN0KGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyAoYCR7Y29sb3JzLlllbGxvd30ke3Byb2dyYW1zW2ldfSR7Y29sb3JzLlJlc2V0fSB1bmF2YWlsYWJsZSwgY2Fubm90IG9wZW4gcG9ydCAke2NvbG9ycy5NYWdlbnRhfSR7aSsxfSR7Y29sb3JzLlJlc2V0fWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgICAgICAgbnMudHByaW50KGBFUlJPUjogJHtlcnJ9IC4uLmFib3J0aW5nYCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIHB1cmNoYXNlcyBhIHNlcnZlciB3aXRoIHRoZSBzcGVjaWZpZWQgaG9zdG5hbWUgYW5kIFJBTSwgYW5kIHJldHVybnMgdGhlIGhvc3RuYW1lIG9mIHRoZSBwdXJjaGFzZWQgc2VydmVyLlxyXG4gKiBAcGFyYW0gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZVxyXG4gKiBAcGFyYW0gaG9zdG5hbWUgbmFtZSBvZiB0aGUgc2VydmVyIHRvIHB1cmNoYXNlXHJcbiAqIEBwYXJhbSByYW0gYW1vdW50IG9mIFJBTSB0byBwdXJjaGFzZVxyXG4gKiBAcmV0dXJucyB0aGUgaG9zdG5hbWUgb2YgdGhlIHB1cmNoYXNlZCBzZXJ2ZXIsIGFzIGEgc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHVyY2hhc2VTZXJ2ZXIobnM6IE5TLCBob3N0bmFtZTogc3RyaW5nLCByYW06IG51bWJlcikge1xyXG4gICAgbnMucHVyY2hhc2VTZXJ2ZXIoaG9zdG5hbWUsIHJhbSk7XHJcbiAgICByZXR1cm4gaG9zdG5hbWU7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydFB1cmNoYXNlZFNlcnZlcnMobnM6IE5TLCBoYWNrVG9EZXBsb3k6IHN0cmluZywgaGFja1RhcmdldDogc3RyaW5nLCByYW1Ub1B1cmNoYXNlOiBudW1iZXIpIHtcclxuXHJcbn1cclxuXHJcbi8vIHRoaXMgZG9lc24ndCBkbyBhbnl0aGluZyB5ZXQsIGJ1dCBuZWVkcyB0byBiZSBpbXBsZW1lbnRlZFxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBncmFkZVNlcnZlcihuczogTlMsIGhvc3RuYW1lOiBzdHJpbmcsIHJhbTogbnVtYmVyKSB7XHJcbiAgICBucy51cGdyYWRlUHVyY2hhc2VkU2VydmVyKGhvc3RuYW1lLCByYW0pO1xyXG59XHJcblxyXG4vKipcclxuICogQHJlbWFya3MgSWYgdGhlIG1vbmV5IGF2YWlsYWJsZSBvbiB0aGUgY3VycmVudCBzZXJ2ZXIgaXMgZ3JlYXRlciB0aGFuIHRoZSBtb25leSBhdmFpbGFibGUgb24gdGhlIGFjY3VtdWxhdG9yIHNlcnZlciwgXHJcbiAqIEByZW1hcmtzIHRoZSBjYWxsYmFjayBmdW5jdGlvbiByZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IHNlcnZlciAoYiksIG90aGVyd2lzZSBpdCByZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBhY2N1bXVsYXRvciBzZXJ2ZXIgKGEpLiBcclxuICogQHJlbWFya3MgVGhpcyBwcm9jZXNzIGNvbnRpbnVlcyB1bnRpbCBhbGwgc2VydmVycyBpbiB0aGUgYXJyYXkgaGF2ZSBiZWVuIGNvbXBhcmVkLCBhdCB3aGljaCBwb2ludCB0aGUgbmFtZSBvZiB0aGUgc2VydmVyIHdpdGggdGhlIGhpZ2hlc3QgYW1vdW50IG9mIG1vbmV5IGF2YWlsYWJsZSBpcyByZXR1cm5lZC5cclxuICogQHBhcmFtIG5zIE5ldHNjcmlwdCBuYW1lc3BhY2VcclxuICogQHBhcmFtIHNlcnZlckxpc3QgbGlzdCBvZiBzZXJ2ZXJzIHRvIGNvbXBhcmVcclxuICogQHJldHVybnMgVGhlIHNlcnZlciBob3N0bmFtZSB0aGF0IGhhcyB0aGUgbW9zdCBtb25leSBhdmFpbGFibGUsIHRoZSBzZXJ2ZXIgaG9zdG5hbWUgd2lsbCBiZSBhIHN0cmluZy5cclxuICovXHJcbmNvbnN0IHNlcnZlcldpdGhNb3N0TW9uZXkgPSAobnM6IE5TLCBzZXJ2ZXJMaXN0OiBhbnkpID0+IHtcclxuICAgIGNvbnN0IHNlcnZlcnMgPSBzZXJ2ZXJMaXN0LmZpbHRlcigoc2VydmVyOiBzdHJpbmcpID0+IHNlcnZlciAhPT0gYGhvbWVgICYmICEvcHNlcnYtXFxkLy50ZXN0KHNlcnZlcikpO1xyXG4gICAgcmV0dXJuIHNlcnZlcnMucmVkdWNlKChhY2N1bXVsYXRvcjogc3RyaW5nLCBjdXJyZW50VmFsdWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIHJldHVybiBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShjdXJyZW50VmFsdWUpID4gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoYWNjdW11bGF0b3IpXHJcbiAgICAgICAgICAgID8gY3VycmVudFZhbHVlXHJcbiAgICAgICAgICAgIDogYWNjdW11bGF0b3I7XHJcbiAgICB9KTtcclxufTsiXX0=\",\"filename\":\"hackLib.js\",\"server\":\"home\"}}],[\"delete-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from './hackLib';\\r\\n/** @param {NS} ns Netscript namespace */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args.includes(`-a`)) {\\r\\n        deleteAllServers(ns);\\r\\n    }\\r\\n    else if (ns.args[0]) {\\r\\n        const purchasedServer = ns.args[0].toString();\\r\\n        deleteServer(ns, purchasedServer);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`ERROR: no server specified for deletion! ${colors.Red}(use -a to delete all purchased servers)${colors.Reset}`);\\r\\n    }\\r\\n}\\r\\nexport async function deleteServer(ns, server) {\\r\\n    try {\\r\\n        ns.killall(server);\\r\\n        ns.deleteServer(server);\\r\\n        ns.tprint(`INFO: deleted server ${colors.Cyan}${server}${colors.Reset}`);\\r\\n    }\\r\\n    catch {\\r\\n        ns.tprint(`ERROR: failed to delete server ${colors.Cyan}${server}${colors.Reset}`);\\r\\n    }\\r\\n}\\r\\nexport async function deleteAllServers(ns) {\\r\\n    ns.getPurchasedServers().forEach((server) => {\\r\\n        deleteServer(ns, server);\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlLXNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWxldGUtc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDbEMseUNBQXlDO0FBRXpDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN4QixnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUN2QjtTQUNJLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNqQixNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFBO1FBQzdDLFlBQVksQ0FBQyxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUM7S0FDckM7U0FDSTtRQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsNENBQTRDLE1BQU0sQ0FBQyxHQUFHLDJDQUEyQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUM5SDtBQUVMLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLFlBQVksQ0FBQyxFQUFNLEVBQUUsTUFBYztJQUNyRCxJQUFJO1FBQ0EsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQixFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLEVBQUUsQ0FBQyxNQUFNLENBQUMsd0JBQXdCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQzVFO0lBQUMsTUFBTTtRQUNKLEVBQUUsQ0FBQyxNQUFNLENBQUMsa0NBQWtDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQ3RGO0FBQ0wsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsRUFBTTtJQUN6QyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRTtRQUNoRCxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJztcclxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnLi9oYWNrTGliJ1xyXG4vKiogQHBhcmFtIHtOU30gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZSAqL1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAobnMuYXJncy5pbmNsdWRlcyhgLWFgKSkge1xyXG4gICAgICAgIGRlbGV0ZUFsbFNlcnZlcnMobnMpXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChucy5hcmdzWzBdKSB7XHJcbiAgICAgICAgY29uc3QgcHVyY2hhc2VkU2VydmVyID0gbnMuYXJnc1swXS50b1N0cmluZygpXHJcbiAgICAgICAgZGVsZXRlU2VydmVyKG5zLCBwdXJjaGFzZWRTZXJ2ZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbnMudHByaW50KGBFUlJPUjogbm8gc2VydmVyIHNwZWNpZmllZCBmb3IgZGVsZXRpb24hICR7Y29sb3JzLlJlZH0odXNlIC1hIHRvIGRlbGV0ZSBhbGwgcHVyY2hhc2VkIHNlcnZlcnMpJHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICB9XHJcbiAgICBcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZVNlcnZlcihuczogTlMsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIG5zLmtpbGxhbGwoc2VydmVyKTtcclxuICAgICAgICBucy5kZWxldGVTZXJ2ZXIoc2VydmVyKTtcclxuICAgICAgICBucy50cHJpbnQoYElORk86IGRlbGV0ZWQgc2VydmVyICR7Y29sb3JzLkN5YW59JHtzZXJ2ZXJ9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICB9IGNhdGNoIHtcclxuICAgICAgICBucy50cHJpbnQoYEVSUk9SOiBmYWlsZWQgdG8gZGVsZXRlIHNlcnZlciAke2NvbG9ycy5DeWFufSR7c2VydmVyfSR7Y29sb3JzLlJlc2V0fWApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlQWxsU2VydmVycyhuczogTlMpIHtcclxuICAgIG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5mb3JFYWNoKChzZXJ2ZXI6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGRlbGV0ZVNlcnZlcihucywgc2VydmVyKTtcclxuICAgIH0pO1xyXG59Il19\",\"filename\":\"delete-server.js\",\"server\":\"home\"}}],[\"deploy-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { defaultHackToDeploy, defaultHackTargetHostname, deployHack, nukeServer, openPorts } from './hackLib';\\r\\n/**  @param {NS} ns  */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args.length !== 0) {\\r\\n        const hostname = ns.args[0].toString();\\r\\n        const hackToDeploy = ns.args[1]?.toString() || defaultHackToDeploy;\\r\\n        const hackTarget = ns.args[2]?.toString() || defaultHackTargetHostname;\\r\\n        await openPorts(ns, hostname);\\r\\n        await nukeServer(ns, hostname);\\r\\n        await deployHack(ns, hostname, hackToDeploy, hackTarget);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`ERROR: no hostname provided! aborting deployment...`);\\r\\n        ns.tprint(`ERROR: usage: \\\\`run deploy-hack.js <hostname> ?<hackToDeploy> ?<hackTarget>\\\\``);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZGVwbG95LWhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLG1CQUFtQixFQUFFLHlCQUF5QixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRTlHLHVCQUF1QjtBQUV2QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLE1BQU0sUUFBUSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDL0MsTUFBTSxZQUFZLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxtQkFBbUIsQ0FBQztRQUMzRSxNQUFNLFVBQVUsR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLHlCQUF5QixDQUFDO1FBQy9FLE1BQU0sU0FBUyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM5QixNQUFNLFVBQVUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDL0IsTUFBTSxVQUFVLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDNUQ7U0FDSTtRQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMscURBQXFELENBQUMsQ0FBQztRQUNqRSxFQUFFLENBQUMsTUFBTSxDQUFDLCtFQUErRSxDQUFDLENBQUE7S0FDN0Y7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBkZWZhdWx0SGFja1RvRGVwbG95LCBkZWZhdWx0SGFja1RhcmdldEhvc3RuYW1lLCBkZXBsb3lIYWNrLCBudWtlU2VydmVyLCBvcGVuUG9ydHMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqICBAcGFyYW0ge05TfSBucyAgKi9cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKG5zLmFyZ3MubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgY29uc3QgaG9zdG5hbWU6IHN0cmluZyA9IG5zLmFyZ3NbMF0udG9TdHJpbmcoKTtcclxuICAgICAgICBjb25zdCBoYWNrVG9EZXBsb3k6IHN0cmluZyA9IG5zLmFyZ3NbMV0/LnRvU3RyaW5nKCkgfHwgZGVmYXVsdEhhY2tUb0RlcGxveTtcclxuICAgICAgICBjb25zdCBoYWNrVGFyZ2V0OiBzdHJpbmcgPSBucy5hcmdzWzJdPy50b1N0cmluZygpIHx8IGRlZmF1bHRIYWNrVGFyZ2V0SG9zdG5hbWU7XHJcbiAgICAgICAgYXdhaXQgb3BlblBvcnRzKG5zLCBob3N0bmFtZSk7XHJcbiAgICAgICAgYXdhaXQgbnVrZVNlcnZlcihucywgaG9zdG5hbWUpO1xyXG4gICAgICAgIGF3YWl0IGRlcGxveUhhY2sobnMsIGhvc3RuYW1lLCBoYWNrVG9EZXBsb3ksIGhhY2tUYXJnZXQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbnMudHByaW50KGBFUlJPUjogbm8gaG9zdG5hbWUgcHJvdmlkZWQhIGFib3J0aW5nIGRlcGxveW1lbnQuLi5gKTtcclxuICAgICAgICBucy50cHJpbnQoYEVSUk9SOiB1c2FnZTogXFxgcnVuIGRlcGxveS1oYWNrLmpzIDxob3N0bmFtZT4gPzxoYWNrVG9EZXBsb3k+ID88aGFja1RhcmdldD5cXGBgKVxyXG4gICAgfVxyXG59Il19\",\"filename\":\"deploy-hack.js\",\"server\":\"home\"}}],[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"home\"}}],[\"hack-servers-2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * created by j__r0d 2023-10-11\\r\\n * command to start script:\\r\\n *   home; clear; killall; run hack - servers.js my - first - hack.js - h\\r\\n *\\r\\n * TODO: write a logger script that will log all the things - might be unnecessary?  i'm only after a better way to format the terminal output\\r\\n * TODO: properly calculate hack target -- from Documentation/beginner's guide:\\r\\n *      `your hacking target should be the  with highest max money that's required hacking level is under 1/2 of your hacking level.`\\r\\n *      `Keep security level low. Security level affects everything when hacking. Two important Netscript functions for this are getServerSecurityLevel() and getServerMinSecurityLevel()`\\r\\n * TODO: instead of a bunch of helper scripts, make a Library of helper functions (ie: hackLib.openPorts(ns, hostname))\\r\\n */\\r\\nimport { ServerMatrix } from './server-matrix';\\r\\nimport * as hl from './hackLib';\\r\\nimport { colors } from './hackLib';\\r\\n/**\\r\\n * @param {NS} ns Netscript namespace\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(`INFO: hack initiated...`);\\r\\n    const hackToDeploy = ns.args[0]?.toString();\\r\\n    const includeHome = (ns.args.includes('-h') || ns.args.includes('-home')) ? true : false;\\r\\n    const doFetch = (ns.args.includes('-f') || ns.args.includes('-fetch')) ? true : false;\\r\\n    if (hackToDeploy) {\\r\\n        const matrix = new ServerMatrix(ns);\\r\\n        await matrix.initialize();\\r\\n        let hackTarget = matrix.hackTarget;\\r\\n        /* future Tor Router functionality\\r\\n        // buy a tor router and then all of the executables as money becomes available\\r\\n        // this doesn't work yet, waiting for the API to unlock? I think?\\r\\n         if (ns.hasTorRouter()) {\\r\\n            ns.tprint(`INFO: TOR router found...`);\\r\\n            //eventually i should be able to do this through script, but for now here is a command that will buy all the executables, skipping those that are not yet affordable\\r\\n            //connect darkweb; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV1.exe; buy DeepscanV2.exe;  buy serverProfiler.exe ; buy Autolink.exe; home;\\r\\n        }\\r\\n        else {\\r\\n            //buy one\\r\\n        }\\r\\n     */\\r\\n        if (hackTarget) {\\r\\n            const serverList = await matrix.getHackableServers();\\r\\n            ns.tprint(`INFO: attempting to deploy hack to all servers...`);\\r\\n            await ((async () => serverList.forEach((server) => {\\r\\n                if (!ns.hasRootAccess(server.hostname)) {\\r\\n                    ns.tprint(`WARN: ${colors.Cyan}${server.hostname}${colors.Reset} does not have root access. attempting root...`);\\r\\n                    hl.openPorts(ns, server.hostname);\\r\\n                    hl.nukeServer(ns, server.hostname);\\r\\n                }\\r\\n                else {\\r\\n                    hl.deployHack(ns, server.hostname, hackToDeploy, hackTarget.hostname);\\r\\n                }\\r\\n            }))());\\r\\n            // check for existing purchased servers and start them, or purchase them if they don't exist and there's enough money\\r\\n            ns.tprint(`INFO: checking for purchased servers...`);\\r\\n            const ramToPurchase = hl.calculateMaxRAM(ns);\\r\\n            if (ns.getPurchasedServers().length === 0) {\\r\\n                ns.tprint(`INFO: ...no purchased servers found. checking for available monies...`);\\r\\n                if (ns.getServerMoneyAvailable(`home`) > (ns.getPurchasedServerCost(ramToPurchase) * ns.getPurchasedServerLimit())) {\\r\\n                    ns.tprint(`INFO: enough monies secured; attempting to purchase servers...`);\\r\\n                    // This needs to be run on the n00dles server so it doesn't get killed when the home server is included in the hack deployment\\r\\n                    await (async () => ns.run(`purchase-server.js`, 1, hackToDeploy, hackTarget.hostname, ramToPurchase))();\\r\\n                }\\r\\n                else {\\r\\n                    ns.tprint(`ERROR: not enough monies to purchase servers! keep hacking...`);\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                ns.tprint(`INFO: found purchased servers...`);\\r\\n                await (async () => ns.run(`start-purchased-servers.js`, 1, hackToDeploy, hackTarget.hostname))();\\r\\n            }\\r\\n            if (includeHome)\\r\\n                await (async () => ns.run(`start-home-server.js`, 1, hackToDeploy, hackTarget.hostname))();\\r\\n            else\\r\\n                ns.tprint(`INFO: skipping home server. use 2nd arg '-h' to include home server in hacktivities.`);\\r\\n            ns.toast(`hacks deployed!`);\\r\\n        }\\r\\n        ;\\r\\n        if (doFetch) {\\r\\n            await (async () => matrix.fetchFilesFromServers())();\\r\\n        }\\r\\n        ;\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`ERROR: no hack script to deploy. include script name! use 2nd arg '-h' to include home server in hacktivities.`);\\r\\n        ns.toast(`no hacks deployed!`, 'error');\\r\\n    }\\r\\n    ;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1zZXJ2ZXJzLTIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaGFjay1zZXJ2ZXJzLTIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7R0FVRztBQUdILE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEtBQUssRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRW5DOztHQUVHO0FBRUgsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDckMsTUFBTSxZQUFZLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUNwRCxNQUFNLFdBQVcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3pGLE1BQU0sT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFFdEYsSUFBSSxZQUFZLEVBQUU7UUFDZCxNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNwQyxNQUFNLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMxQixJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFBO1FBRWxDOzs7Ozs7Ozs7OztPQVdEO1FBRUMsSUFBSSxVQUFVLEVBQUU7WUFDWixNQUFNLFVBQVUsR0FBRyxNQUFNLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxDQUFBO1lBRXBELEVBQUUsQ0FBQyxNQUFNLENBQUMsbURBQW1ELENBQUMsQ0FBQztZQUUvRCxNQUFNLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFXLEVBQUUsRUFBRTtnQkFDbkQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUNwQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLGdEQUFnRCxDQUFDLENBQUM7b0JBQ2pILEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDbEMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUN0QztxQkFDSTtvQkFDRCxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ3pFO1lBQ0wsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFHUCxxSEFBcUg7WUFDckgsRUFBRSxDQUFDLE1BQU0sQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFBO1lBQ3BELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDN0MsSUFBSSxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUN2QyxFQUFFLENBQUMsTUFBTSxDQUFDLHVFQUF1RSxDQUFDLENBQUE7Z0JBQ2xGLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLEVBQUU7b0JBQ2hILEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0VBQWdFLENBQUMsQ0FBQTtvQkFFM0UsOEhBQThIO29CQUM5SCxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUM7aUJBQzNHO3FCQUNJO29CQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsK0RBQStELENBQUMsQ0FBQztpQkFDOUU7YUFDSjtpQkFDSTtnQkFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLENBQUE7Z0JBQzdDLE1BQU0sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsNEJBQTRCLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDO2FBQ3BHO1lBRUQsSUFBSSxXQUFXO2dCQUNYLE1BQU0sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDOztnQkFFM0YsRUFBRSxDQUFDLE1BQU0sQ0FBQyxzRkFBc0YsQ0FBQyxDQUFDO1lBRXRHLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUMvQjtRQUFBLENBQUM7UUFDRixJQUFJLE9BQU8sRUFBRTtZQUNULE1BQU0sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUN4RDtRQUFBLENBQUM7S0FDTDtTQUNJO1FBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnSEFBZ0gsQ0FBQyxDQUFDO1FBQzVILEVBQUUsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLENBQUE7S0FDMUM7SUFBQSxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBcclxuICogY3JlYXRlZCBieSBqX19yMGQgMjAyMy0xMC0xMVxyXG4gKiBjb21tYW5kIHRvIHN0YXJ0IHNjcmlwdDogXHJcbiAqICAgaG9tZTsgY2xlYXI7IGtpbGxhbGw7IHJ1biBoYWNrIC0gc2VydmVycy5qcyBteSAtIGZpcnN0IC0gaGFjay5qcyAtIGhcclxuICogXHJcbiAqIFRPRE86IHdyaXRlIGEgbG9nZ2VyIHNjcmlwdCB0aGF0IHdpbGwgbG9nIGFsbCB0aGUgdGhpbmdzIC0gbWlnaHQgYmUgdW5uZWNlc3Nhcnk/ICBpJ20gb25seSBhZnRlciBhIGJldHRlciB3YXkgdG8gZm9ybWF0IHRoZSB0ZXJtaW5hbCBvdXRwdXRcclxuICogVE9ETzogcHJvcGVybHkgY2FsY3VsYXRlIGhhY2sgdGFyZ2V0IC0tIGZyb20gRG9jdW1lbnRhdGlvbi9iZWdpbm5lcidzIGd1aWRlOiBcclxuICogICAgICBgeW91ciBoYWNraW5nIHRhcmdldCBzaG91bGQgYmUgdGhlICB3aXRoIGhpZ2hlc3QgbWF4IG1vbmV5IHRoYXQncyByZXF1aXJlZCBoYWNraW5nIGxldmVsIGlzIHVuZGVyIDEvMiBvZiB5b3VyIGhhY2tpbmcgbGV2ZWwuYFxyXG4gKiAgICAgIGBLZWVwIHNlY3VyaXR5IGxldmVsIGxvdy4gU2VjdXJpdHkgbGV2ZWwgYWZmZWN0cyBldmVyeXRoaW5nIHdoZW4gaGFja2luZy4gVHdvIGltcG9ydGFudCBOZXRzY3JpcHQgZnVuY3Rpb25zIGZvciB0aGlzIGFyZSBnZXRTZXJ2ZXJTZWN1cml0eUxldmVsKCkgYW5kIGdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwoKWBcclxuICogVE9ETzogaW5zdGVhZCBvZiBhIGJ1bmNoIG9mIGhlbHBlciBzY3JpcHRzLCBtYWtlIGEgTGlicmFyeSBvZiBoZWxwZXIgZnVuY3Rpb25zIChpZTogaGFja0xpYi5vcGVuUG9ydHMobnMsIGhvc3RuYW1lKSlcclxuICovXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IFNlcnZlck1hdHJpeCB9IGZyb20gJy4vc2VydmVyLW1hdHJpeCc7XHJcbmltcG9ydCAqIGFzIGhsIGZyb20gJy4vaGFja0xpYic7XHJcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJy4vaGFja0xpYic7XHJcblxyXG4vKiogXHJcbiAqIEBwYXJhbSB7TlN9IG5zIE5ldHNjcmlwdCBuYW1lc3BhY2VcclxuICovXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIG5zLnRwcmludChgSU5GTzogaGFjayBpbml0aWF0ZWQuLi5gKTtcclxuICAgIGNvbnN0IGhhY2tUb0RlcGxveTogc3RyaW5nID0gbnMuYXJnc1swXT8udG9TdHJpbmcoKTtcclxuICAgIGNvbnN0IGluY2x1ZGVIb21lID0gKG5zLmFyZ3MuaW5jbHVkZXMoJy1oJykgfHwgbnMuYXJncy5pbmNsdWRlcygnLWhvbWUnKSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICBjb25zdCBkb0ZldGNoID0gKG5zLmFyZ3MuaW5jbHVkZXMoJy1mJykgfHwgbnMuYXJncy5pbmNsdWRlcygnLWZldGNoJykpID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgIGlmIChoYWNrVG9EZXBsb3kpIHtcclxuICAgICAgICBjb25zdCBtYXRyaXggPSBuZXcgU2VydmVyTWF0cml4KG5zKTtcclxuICAgICAgICBhd2FpdCBtYXRyaXguaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIGxldCBoYWNrVGFyZ2V0ID0gbWF0cml4LmhhY2tUYXJnZXRcclxuXHJcbiAgICAgICAgLyogZnV0dXJlIFRvciBSb3V0ZXIgZnVuY3Rpb25hbGl0eVxyXG4gICAgICAgIC8vIGJ1eSBhIHRvciByb3V0ZXIgYW5kIHRoZW4gYWxsIG9mIHRoZSBleGVjdXRhYmxlcyBhcyBtb25leSBiZWNvbWVzIGF2YWlsYWJsZVxyXG4gICAgICAgIC8vIHRoaXMgZG9lc24ndCB3b3JrIHlldCwgd2FpdGluZyBmb3IgdGhlIEFQSSB0byB1bmxvY2s/IEkgdGhpbms/XHJcbiAgICAgICAgIGlmIChucy5oYXNUb3JSb3V0ZXIoKSkge1xyXG4gICAgICAgICAgICBucy50cHJpbnQoYElORk86IFRPUiByb3V0ZXIgZm91bmQuLi5gKTtcclxuICAgICAgICAgICAgLy9ldmVudHVhbGx5IGkgc2hvdWxkIGJlIGFibGUgdG8gZG8gdGhpcyB0aHJvdWdoIHNjcmlwdCwgYnV0IGZvciBub3cgaGVyZSBpcyBhIGNvbW1hbmQgdGhhdCB3aWxsIGJ1eSBhbGwgdGhlIGV4ZWN1dGFibGVzLCBza2lwcGluZyB0aG9zZSB0aGF0IGFyZSBub3QgeWV0IGFmZm9yZGFibGVcclxuICAgICAgICAgICAgLy9jb25uZWN0IGRhcmt3ZWI7IGJ1eSBGVFBDcmFjay5leGU7IGJ1eSByZWxheVNNVFAuZXhlOyBidXkgSFRUUFdvcm0uZXhlOyBidXkgU1FMSW5qZWN0LmV4ZTsgYnV5IERlZXBzY2FuVjEuZXhlOyBidXkgRGVlcHNjYW5WMi5leGU7ICBidXkgc2VydmVyUHJvZmlsZXIuZXhlIDsgYnV5IEF1dG9saW5rLmV4ZTsgaG9tZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vYnV5IG9uZVxyXG4gICAgICAgIH1cclxuICAgICAqL1xyXG5cclxuICAgICAgICBpZiAoaGFja1RhcmdldCkge1xyXG4gICAgICAgICAgICBjb25zdCBzZXJ2ZXJMaXN0ID0gYXdhaXQgbWF0cml4LmdldEhhY2thYmxlU2VydmVycygpXHJcblxyXG4gICAgICAgICAgICBucy50cHJpbnQoYElORk86IGF0dGVtcHRpbmcgdG8gZGVwbG95IGhhY2sgdG8gYWxsIHNlcnZlcnMuLi5gKTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0ICgoYXN5bmMgKCkgPT4gc2VydmVyTGlzdC5mb3JFYWNoKChzZXJ2ZXI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFucy5oYXNSb290QWNjZXNzKHNlcnZlci5ob3N0bmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBucy50cHJpbnQoYFdBUk46ICR7Y29sb3JzLkN5YW59JHtzZXJ2ZXIuaG9zdG5hbWV9JHtjb2xvcnMuUmVzZXR9IGRvZXMgbm90IGhhdmUgcm9vdCBhY2Nlc3MuIGF0dGVtcHRpbmcgcm9vdC4uLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIGhsLm9wZW5Qb3J0cyhucywgc2VydmVyLmhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBobC5udWtlU2VydmVyKG5zLCBzZXJ2ZXIuaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGwuZGVwbG95SGFjayhucywgc2VydmVyLmhvc3RuYW1lLCBoYWNrVG9EZXBsb3ksIGhhY2tUYXJnZXQuaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSkoKSk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGV4aXN0aW5nIHB1cmNoYXNlZCBzZXJ2ZXJzIGFuZCBzdGFydCB0aGVtLCBvciBwdXJjaGFzZSB0aGVtIGlmIHRoZXkgZG9uJ3QgZXhpc3QgYW5kIHRoZXJlJ3MgZW5vdWdoIG1vbmV5XHJcbiAgICAgICAgICAgIG5zLnRwcmludChgSU5GTzogY2hlY2tpbmcgZm9yIHB1cmNoYXNlZCBzZXJ2ZXJzLi4uYClcclxuICAgICAgICAgICAgY29uc3QgcmFtVG9QdXJjaGFzZSA9IGhsLmNhbGN1bGF0ZU1heFJBTShucyk7XHJcbiAgICAgICAgICAgIGlmIChucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBucy50cHJpbnQoYElORk86IC4uLm5vIHB1cmNoYXNlZCBzZXJ2ZXJzIGZvdW5kLiBjaGVja2luZyBmb3IgYXZhaWxhYmxlIG1vbmllcy4uLmApXHJcbiAgICAgICAgICAgICAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoYGhvbWVgKSA+IChucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KHJhbVRvUHVyY2hhc2UpICogbnMuZ2V0UHVyY2hhc2VkU2VydmVyTGltaXQoKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBucy50cHJpbnQoYElORk86IGVub3VnaCBtb25pZXMgc2VjdXJlZDsgYXR0ZW1wdGluZyB0byBwdXJjaGFzZSBzZXJ2ZXJzLi4uYClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBuZWVkcyB0byBiZSBydW4gb24gdGhlIG4wMGRsZXMgc2VydmVyIHNvIGl0IGRvZXNuJ3QgZ2V0IGtpbGxlZCB3aGVuIHRoZSBob21lIHNlcnZlciBpcyBpbmNsdWRlZCBpbiB0aGUgaGFjayBkZXBsb3ltZW50XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgKGFzeW5jICgpID0+IG5zLnJ1bihgcHVyY2hhc2Utc2VydmVyLmpzYCwgMSwgaGFja1RvRGVwbG95LCBoYWNrVGFyZ2V0Lmhvc3RuYW1lLCByYW1Ub1B1cmNoYXNlKSkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnRwcmludChgRVJST1I6IG5vdCBlbm91Z2ggbW9uaWVzIHRvIHB1cmNoYXNlIHNlcnZlcnMhIGtlZXAgaGFja2luZy4uLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiBmb3VuZCBwdXJjaGFzZWQgc2VydmVycy4uLmApXHJcbiAgICAgICAgICAgICAgICBhd2FpdCAoYXN5bmMgKCkgPT4gbnMucnVuKGBzdGFydC1wdXJjaGFzZWQtc2VydmVycy5qc2AsIDEsIGhhY2tUb0RlcGxveSwgaGFja1RhcmdldC5ob3N0bmFtZSkpKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpbmNsdWRlSG9tZSlcclxuICAgICAgICAgICAgICAgIGF3YWl0IChhc3luYyAoKSA9PiBucy5ydW4oYHN0YXJ0LWhvbWUtc2VydmVyLmpzYCwgMSwgaGFja1RvRGVwbG95LCBoYWNrVGFyZ2V0Lmhvc3RuYW1lKSkoKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiBza2lwcGluZyBob21lIHNlcnZlci4gdXNlIDJuZCBhcmcgJy1oJyB0byBpbmNsdWRlIGhvbWUgc2VydmVyIGluIGhhY2t0aXZpdGllcy5gKTtcclxuXHJcbiAgICAgICAgICAgIG5zLnRvYXN0KGBoYWNrcyBkZXBsb3llZCFgKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChkb0ZldGNoKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IChhc3luYyAoKSA9PiBtYXRyaXguZmV0Y2hGaWxlc0Zyb21TZXJ2ZXJzKCkpKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIG5zLnRwcmludChgRVJST1I6IG5vIGhhY2sgc2NyaXB0IHRvIGRlcGxveS4gaW5jbHVkZSBzY3JpcHQgbmFtZSEgdXNlIDJuZCBhcmcgJy1oJyB0byBpbmNsdWRlIGhvbWUgc2VydmVyIGluIGhhY2t0aXZpdGllcy5gKTtcclxuICAgICAgICBucy50b2FzdChgbm8gaGFja3MgZGVwbG95ZWQhYCwgJ2Vycm9yJylcclxuICAgIH07XHJcbn1cclxuIl19\",\"filename\":\"hack-servers-2.js\",\"server\":\"home\"}}],[\"hack-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * created by j__r0d 2023-10-11\\r\\n * command to start script:\\r\\n *   home; clear; killall; run hack - servers.js my - first - hack.js - h\\r\\n *\\r\\n * TODO: write a logger script that will log all the things - might be unnecessary?  i'm only after a better way to format the terminal output\\r\\n * TODO: properly calculate hack target -- from Documentation/beginner's guide:\\r\\n *      `your hacking target should be the  with highest max money that's required hacking level is under 1/2 of your hacking level.`\\r\\n *      `Keep security level low. Security level affects everything when hacking. Two important Netscript functions for this are getServerSecurityLevel() and getServerMinSecurityLevel()`\\r\\n * TODO: instead of a bunch of helper scripts, make a Library of helper functions (ie: hackLib.openPorts(ns, hostname))\\r\\n */\\r\\nimport * as hl from './hackLib';\\r\\nimport { colors } from './hackLib';\\r\\n/**\\r\\n * @param {NS} ns Netscript namespace\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    const hackToDeploy = ns.args[0]?.toString();\\r\\n    const includeHome = (ns.args.includes('-h') || ns.args.includes('-home')) ? true : false;\\r\\n    const doFetch = (ns.args.includes('-f') || ns.args.includes('-fetch')) ? true : false;\\r\\n    // buy a tor router and then all of the executables as money becomes available\\r\\n    // this doesn't work yet, waiting for the API to unlock? I think?\\r\\n    if (ns.hasTorRouter()) {\\r\\n        ns.tprint(`INFO: TOR router found...`);\\r\\n        //eventually i should be able to do this through script, but for now here is a command that will buy all the executables, skipping those that are not yet affordable\\r\\n        //connect darkweb; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy DeepscanV1.exe; buy DeepscanV2.exe;  buy serverProfiler.exe ; buy Autolink.exe; home;\\r\\n    }\\r\\n    else {\\r\\n        //buy one\\r\\n    }\\r\\n    ns.tprint(`INFO: hack initiated...`);\\r\\n    const scanDepth = await hl.getMaxPossibleScanDepth(ns);\\r\\n    const serverList = await hl.buildScannedServerList(ns, scanDepth);\\r\\n    ns.tprint(`INFO: found ${colors.Cyan}${serverList.length}${colors.Reset} servers during scan of depth ${colors.Magenta}${scanDepth}${colors.Reset}...`);\\r\\n    if (hackToDeploy) {\\r\\n        ns.tprint(`INFO: selecting best 🎯 server...`);\\r\\n        const hackTarget = `joesguns`; //serverWithMostMoney(ns, serverList); --need to account for hacking level, and choose the best server that has high money but low hacking level\\r\\n        ns.tprint(`INFO: ...${colors.Green}${hackTarget}${colors.Reset} selected!`);\\r\\n        ns.tprint(`INFO: attempting to deploy hack to all servers...`);\\r\\n        await ((async () => serverList.forEach((hostname) => {\\r\\n            if (!ns.hasRootAccess(hostname)) {\\r\\n                ns.tprint(`WARN: ${colors.Cyan}${hostname}${colors.Reset} does not have root access. attempting root...`);\\r\\n                hl.openPorts(ns, hostname);\\r\\n                hl.nukeServer(ns, hostname);\\r\\n            }\\r\\n            else {\\r\\n                hl.deployHack(ns, hostname, hackToDeploy, hackTarget);\\r\\n            }\\r\\n        }))());\\r\\n        // check for existing purchased servers and start them, or purchase them if they don't exist and there's enough money\\r\\n        ns.tprint(`INFO: checking for purchased servers...`);\\r\\n        const ramToPurchase = hl.calculateMaxRAM(ns);\\r\\n        if (ns.getPurchasedServers().length === 0) {\\r\\n            ns.tprint(`INFO: ...no purchased servers found. checking for available monies...`);\\r\\n            if (ns.getServerMoneyAvailable(`home`) > (ns.getPurchasedServerCost(ramToPurchase) * ns.getPurchasedServerLimit())) {\\r\\n                ns.tprint(`INFO: enough monies secured; attempting to purchase servers...`);\\r\\n                // This needs to be run on the n00dles server so it doesn't get killed when the home server is included in the hack deployment\\r\\n                await (async () => ns.run(`purchase-server.js`, 1, hackToDeploy, hackTarget, ramToPurchase))();\\r\\n            }\\r\\n            else {\\r\\n                ns.tprint(`ERROR: not enough monies to purchase servers! keep hacking...`);\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            ns.tprint(`INFO: found purchased servers; deploying hack...`);\\r\\n            await (async () => ns.run(`start-purchased-servers.js`, 1, hackToDeploy, hackTarget))();\\r\\n        }\\r\\n        if (includeHome)\\r\\n            await (async () => ns.run(`start-home-server.js`, 1, hackToDeploy, hackTarget))();\\r\\n        else\\r\\n            ns.tprint(`INFO: skipping home server. use 2nd arg '-h' to include home server in hacktivities.`);\\r\\n        ns.toast(`hacks deployed!`);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`ERROR: no hack script to deploy. include script name! use 2nd arg '-h' to include home server in hacktivities.`);\\r\\n        ns.toast(`no hacks deployed!`, 'error');\\r\\n    }\\r\\n    ;\\r\\n    if (doFetch) {\\r\\n        ns.tprint(`INFO: fetching files from servers...`);\\r\\n        const pid = ns.run(`sniff-servers.js`, 1, scanDepth, serverList.join(','), `-fetch`);\\r\\n        while (ns.isRunning(pid)) {\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n        ;\\r\\n    }\\r\\n    ;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1zZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhY2stc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztHQVVHO0FBR0gsT0FBTyxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQzs7R0FFRztBQUVILE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsTUFBTSxZQUFZLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUNwRCxNQUFNLFdBQVcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3pGLE1BQU0sT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFFdEYsOEVBQThFO0lBQzlFLGlFQUFpRTtJQUNqRSxJQUFJLEVBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRTtRQUNuQixFQUFFLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDdkMsb0tBQW9LO1FBQ3BLLHNMQUFzTDtLQUN6TDtTQUNJO1FBQ0QsU0FBUztLQUNaO0lBRUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sU0FBUyxHQUFHLE1BQU0sRUFBRSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sVUFBVSxHQUFHLE1BQU0sRUFBRSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNsRSxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsTUFBTSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLGlDQUFpQyxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQztJQUV4SixJQUFJLFlBQVksRUFBRTtRQUNkLEVBQUUsQ0FBQyxNQUFNLENBQUMsbUNBQW1DLENBQUMsQ0FBQTtRQUM5QyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsQ0FBQyxnSkFBZ0o7UUFDL0ssRUFBRSxDQUFDLE1BQU0sQ0FBQyxZQUFZLE1BQU0sQ0FBQyxLQUFLLEdBQUcsVUFBVSxHQUFHLE1BQU0sQ0FBQyxLQUFLLFlBQVksQ0FBQyxDQUFDO1FBRTVFLEVBQUUsQ0FBQyxNQUFNLENBQUMsbURBQW1ELENBQUMsQ0FBQztRQUMvRCxNQUFNLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFnQixFQUFFLEVBQUU7WUFDeEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzdCLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxnREFBZ0QsQ0FBQyxDQUFDO2dCQUMxRyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDM0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDL0I7aUJBQ0k7Z0JBQ0QsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQzthQUN6RDtRQUNMLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRVAscUhBQXFIO1FBQ3JILEVBQUUsQ0FBQyxNQUFNLENBQUMseUNBQXlDLENBQUMsQ0FBQTtRQUNwRCxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLElBQUksRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN2QyxFQUFFLENBQUMsTUFBTSxDQUFDLHVFQUF1RSxDQUFDLENBQUE7WUFDbEYsSUFBSSxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsc0JBQXNCLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixFQUFFLENBQUMsRUFBRTtnQkFDaEgsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFBO2dCQUUzRSw4SEFBOEg7Z0JBQzlILE1BQU0sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDO2FBQ2xHO2lCQUNJO2dCQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsK0RBQStELENBQUMsQ0FBQzthQUM5RTtTQUNKO2FBQ0k7WUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLGtEQUFrRCxDQUFDLENBQUE7WUFDN0QsTUFBTSxDQUFDLEtBQUssSUFBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUMxRjtRQUVELElBQUksV0FBVztZQUNYLE1BQU0sQ0FBQyxLQUFLLElBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUM7O1lBRWpGLEVBQUUsQ0FBQyxNQUFNLENBQUMsc0ZBQXNGLENBQUMsQ0FBQztRQUV0RyxFQUFFLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7S0FDL0I7U0FDSTtRQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0hBQWdILENBQUMsQ0FBQztRQUM1SCxFQUFFLENBQUMsS0FBSyxDQUFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxDQUFBO0tBQzFDO0lBQUEsQ0FBQztJQUVGLElBQUksT0FBTyxFQUFFO1FBQ1QsRUFBRSxDQUFDLE1BQU0sQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ3BGLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtTQUFFO1FBQUEsQ0FBQztLQUNyRDtJQUFBLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFxyXG4gKiBjcmVhdGVkIGJ5IGpfX3IwZCAyMDIzLTEwLTExXHJcbiAqIGNvbW1hbmQgdG8gc3RhcnQgc2NyaXB0OiBcclxuICogICBob21lOyBjbGVhcjsga2lsbGFsbDsgcnVuIGhhY2sgLSBzZXJ2ZXJzLmpzIG15IC0gZmlyc3QgLSBoYWNrLmpzIC0gaFxyXG4gKiBcclxuICogVE9ETzogd3JpdGUgYSBsb2dnZXIgc2NyaXB0IHRoYXQgd2lsbCBsb2cgYWxsIHRoZSB0aGluZ3MgLSBtaWdodCBiZSB1bm5lY2Vzc2FyeT8gIGknbSBvbmx5IGFmdGVyIGEgYmV0dGVyIHdheSB0byBmb3JtYXQgdGhlIHRlcm1pbmFsIG91dHB1dFxyXG4gKiBUT0RPOiBwcm9wZXJseSBjYWxjdWxhdGUgaGFjayB0YXJnZXQgLS0gZnJvbSBEb2N1bWVudGF0aW9uL2JlZ2lubmVyJ3MgZ3VpZGU6IFxyXG4gKiAgICAgIGB5b3VyIGhhY2tpbmcgdGFyZ2V0IHNob3VsZCBiZSB0aGUgIHdpdGggaGlnaGVzdCBtYXggbW9uZXkgdGhhdCdzIHJlcXVpcmVkIGhhY2tpbmcgbGV2ZWwgaXMgdW5kZXIgMS8yIG9mIHlvdXIgaGFja2luZyBsZXZlbC5gXHJcbiAqICAgICAgYEtlZXAgc2VjdXJpdHkgbGV2ZWwgbG93LiBTZWN1cml0eSBsZXZlbCBhZmZlY3RzIGV2ZXJ5dGhpbmcgd2hlbiBoYWNraW5nLiBUd28gaW1wb3J0YW50IE5ldHNjcmlwdCBmdW5jdGlvbnMgZm9yIHRoaXMgYXJlIGdldFNlcnZlclNlY3VyaXR5TGV2ZWwoKSBhbmQgZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCgpYFxyXG4gKiBUT0RPOiBpbnN0ZWFkIG9mIGEgYnVuY2ggb2YgaGVscGVyIHNjcmlwdHMsIG1ha2UgYSBMaWJyYXJ5IG9mIGhlbHBlciBmdW5jdGlvbnMgKGllOiBoYWNrTGliLm9wZW5Qb3J0cyhucywgaG9zdG5hbWUpKVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJztcclxuaW1wb3J0ICogYXMgaGwgZnJvbSAnLi9oYWNrTGliJztcclxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnLi9oYWNrTGliJztcclxuXHJcbi8qKiBcclxuICogQHBhcmFtIHtOU30gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZVxyXG4gKi9cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgY29uc3QgaGFja1RvRGVwbG95OiBzdHJpbmcgPSBucy5hcmdzWzBdPy50b1N0cmluZygpO1xyXG4gICAgY29uc3QgaW5jbHVkZUhvbWUgPSAobnMuYXJncy5pbmNsdWRlcygnLWgnKSB8fCBucy5hcmdzLmluY2x1ZGVzKCctaG9tZScpKSA/IHRydWUgOiBmYWxzZTtcclxuICAgIGNvbnN0IGRvRmV0Y2ggPSAobnMuYXJncy5pbmNsdWRlcygnLWYnKSB8fCBucy5hcmdzLmluY2x1ZGVzKCctZmV0Y2gnKSkgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgLy8gYnV5IGEgdG9yIHJvdXRlciBhbmQgdGhlbiBhbGwgb2YgdGhlIGV4ZWN1dGFibGVzIGFzIG1vbmV5IGJlY29tZXMgYXZhaWxhYmxlXHJcbiAgICAvLyB0aGlzIGRvZXNuJ3Qgd29yayB5ZXQsIHdhaXRpbmcgZm9yIHRoZSBBUEkgdG8gdW5sb2NrPyBJIHRoaW5rP1xyXG4gICAgaWYgKG5zLmhhc1RvclJvdXRlcigpKSB7XHJcbiAgICAgICAgbnMudHByaW50KGBJTkZPOiBUT1Igcm91dGVyIGZvdW5kLi4uYCk7XHJcbiAgICAgICAgLy9ldmVudHVhbGx5IGkgc2hvdWxkIGJlIGFibGUgdG8gZG8gdGhpcyB0aHJvdWdoIHNjcmlwdCwgYnV0IGZvciBub3cgaGVyZSBpcyBhIGNvbW1hbmQgdGhhdCB3aWxsIGJ1eSBhbGwgdGhlIGV4ZWN1dGFibGVzLCBza2lwcGluZyB0aG9zZSB0aGF0IGFyZSBub3QgeWV0IGFmZm9yZGFibGVcclxuICAgICAgICAvL2Nvbm5lY3QgZGFya3dlYjsgYnV5IEZUUENyYWNrLmV4ZTsgYnV5IHJlbGF5U01UUC5leGU7IGJ1eSBIVFRQV29ybS5leGU7IGJ1eSBTUUxJbmplY3QuZXhlOyBidXkgRGVlcHNjYW5WMS5leGU7IGJ1eSBEZWVwc2NhblYyLmV4ZTsgIGJ1eSBzZXJ2ZXJQcm9maWxlci5leGUgOyBidXkgQXV0b2xpbmsuZXhlOyBob21lO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy9idXkgb25lXHJcbiAgICB9XHJcblxyXG4gICAgbnMudHByaW50KGBJTkZPOiBoYWNrIGluaXRpYXRlZC4uLmApO1xyXG4gICAgY29uc3Qgc2NhbkRlcHRoID0gYXdhaXQgaGwuZ2V0TWF4UG9zc2libGVTY2FuRGVwdGgobnMpO1xyXG4gICAgY29uc3Qgc2VydmVyTGlzdCA9IGF3YWl0IGhsLmJ1aWxkU2Nhbm5lZFNlcnZlckxpc3QobnMsIHNjYW5EZXB0aCk7XHJcbiAgICBucy50cHJpbnQoYElORk86IGZvdW5kICR7Y29sb3JzLkN5YW59JHtzZXJ2ZXJMaXN0Lmxlbmd0aH0ke2NvbG9ycy5SZXNldH0gc2VydmVycyBkdXJpbmcgc2NhbiBvZiBkZXB0aCAke2NvbG9ycy5NYWdlbnRhfSR7c2NhbkRlcHRofSR7Y29sb3JzLlJlc2V0fS4uLmApO1xyXG5cclxuICAgIGlmIChoYWNrVG9EZXBsb3kpIHtcclxuICAgICAgICBucy50cHJpbnQoYElORk86IHNlbGVjdGluZyBiZXN0IPCfjq8gc2VydmVyLi4uYClcclxuICAgICAgICBjb25zdCBoYWNrVGFyZ2V0ID0gYGpvZXNndW5zYDsgLy9zZXJ2ZXJXaXRoTW9zdE1vbmV5KG5zLCBzZXJ2ZXJMaXN0KTsgLS1uZWVkIHRvIGFjY291bnQgZm9yIGhhY2tpbmcgbGV2ZWwsIGFuZCBjaG9vc2UgdGhlIGJlc3Qgc2VydmVyIHRoYXQgaGFzIGhpZ2ggbW9uZXkgYnV0IGxvdyBoYWNraW5nIGxldmVsXHJcbiAgICAgICAgbnMudHByaW50KGBJTkZPOiAuLi4ke2NvbG9ycy5HcmVlbn0ke2hhY2tUYXJnZXR9JHtjb2xvcnMuUmVzZXR9IHNlbGVjdGVkIWApO1xyXG5cclxuICAgICAgICBucy50cHJpbnQoYElORk86IGF0dGVtcHRpbmcgdG8gZGVwbG95IGhhY2sgdG8gYWxsIHNlcnZlcnMuLi5gKTtcclxuICAgICAgICBhd2FpdCAoKGFzeW5jICgpID0+IHNlcnZlckxpc3QuZm9yRWFjaCgoaG9zdG5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIW5zLmhhc1Jvb3RBY2Nlc3MoaG9zdG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBucy50cHJpbnQoYFdBUk46ICR7Y29sb3JzLkN5YW59JHtob3N0bmFtZX0ke2NvbG9ycy5SZXNldH0gZG9lcyBub3QgaGF2ZSByb290IGFjY2Vzcy4gYXR0ZW1wdGluZyByb290Li4uYCk7XHJcbiAgICAgICAgICAgICAgICBobC5vcGVuUG9ydHMobnMsIGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgIGhsLm51a2VTZXJ2ZXIobnMsIGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGhsLmRlcGxveUhhY2sobnMsIGhvc3RuYW1lLCBoYWNrVG9EZXBsb3ksIGhhY2tUYXJnZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkpKCkpO1xyXG5cclxuICAgICAgICAvLyBjaGVjayBmb3IgZXhpc3RpbmcgcHVyY2hhc2VkIHNlcnZlcnMgYW5kIHN0YXJ0IHRoZW0sIG9yIHB1cmNoYXNlIHRoZW0gaWYgdGhleSBkb24ndCBleGlzdCBhbmQgdGhlcmUncyBlbm91Z2ggbW9uZXlcclxuICAgICAgICBucy50cHJpbnQoYElORk86IGNoZWNraW5nIGZvciBwdXJjaGFzZWQgc2VydmVycy4uLmApXHJcbiAgICAgICAgY29uc3QgcmFtVG9QdXJjaGFzZSA9IGhsLmNhbGN1bGF0ZU1heFJBTShucyk7XHJcbiAgICAgICAgaWYgKG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiAuLi5ubyBwdXJjaGFzZWQgc2VydmVycyBmb3VuZC4gY2hlY2tpbmcgZm9yIGF2YWlsYWJsZSBtb25pZXMuLi5gKVxyXG4gICAgICAgICAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoYGhvbWVgKSA+IChucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KHJhbVRvUHVyY2hhc2UpICogbnMuZ2V0UHVyY2hhc2VkU2VydmVyTGltaXQoKSkpIHtcclxuICAgICAgICAgICAgICAgIG5zLnRwcmludChgSU5GTzogZW5vdWdoIG1vbmllcyBzZWN1cmVkOyBhdHRlbXB0aW5nIHRvIHB1cmNoYXNlIHNlcnZlcnMuLi5gKVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG5lZWRzIHRvIGJlIHJ1biBvbiB0aGUgbjAwZGxlcyBzZXJ2ZXIgc28gaXQgZG9lc24ndCBnZXQga2lsbGVkIHdoZW4gdGhlIGhvbWUgc2VydmVyIGlzIGluY2x1ZGVkIGluIHRoZSBoYWNrIGRlcGxveW1lbnRcclxuICAgICAgICAgICAgICAgIGF3YWl0IChhc3luYyAoKSA9PiBucy5ydW4oYHB1cmNoYXNlLXNlcnZlci5qc2AsIDEsIGhhY2tUb0RlcGxveSwgaGFja1RhcmdldCwgcmFtVG9QdXJjaGFzZSkpKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBucy50cHJpbnQoYEVSUk9SOiBub3QgZW5vdWdoIG1vbmllcyB0byBwdXJjaGFzZSBzZXJ2ZXJzISBrZWVwIGhhY2tpbmcuLi5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiBmb3VuZCBwdXJjaGFzZWQgc2VydmVyczsgZGVwbG95aW5nIGhhY2suLi5gKVxyXG4gICAgICAgICAgICBhd2FpdCAoYXN5bmMoKSA9PiBucy5ydW4oYHN0YXJ0LXB1cmNoYXNlZC1zZXJ2ZXJzLmpzYCwgMSwgaGFja1RvRGVwbG95LCBoYWNrVGFyZ2V0KSkoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpbmNsdWRlSG9tZSlcclxuICAgICAgICAgICAgYXdhaXQgKGFzeW5jKCkgPT4gbnMucnVuKGBzdGFydC1ob21lLXNlcnZlci5qc2AsIDEsIGhhY2tUb0RlcGxveSwgaGFja1RhcmdldCkpKCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBucy50cHJpbnQoYElORk86IHNraXBwaW5nIGhvbWUgc2VydmVyLiB1c2UgMm5kIGFyZyAnLWgnIHRvIGluY2x1ZGUgaG9tZSBzZXJ2ZXIgaW4gaGFja3Rpdml0aWVzLmApO1xyXG5cclxuICAgICAgICBucy50b2FzdChgaGFja3MgZGVwbG95ZWQhYCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBucy50cHJpbnQoYEVSUk9SOiBubyBoYWNrIHNjcmlwdCB0byBkZXBsb3kuIGluY2x1ZGUgc2NyaXB0IG5hbWUhIHVzZSAybmQgYXJnICctaCcgdG8gaW5jbHVkZSBob21lIHNlcnZlciBpbiBoYWNrdGl2aXRpZXMuYCk7XHJcbiAgICAgICAgbnMudG9hc3QoYG5vIGhhY2tzIGRlcGxveWVkIWAsICdlcnJvcicpXHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChkb0ZldGNoKSB7XHJcbiAgICAgICAgbnMudHByaW50KGBJTkZPOiBmZXRjaGluZyBmaWxlcyBmcm9tIHNlcnZlcnMuLi5gKTtcclxuICAgICAgICBjb25zdCBwaWQgPSBucy5ydW4oYHNuaWZmLXNlcnZlcnMuanNgLCAxLCBzY2FuRGVwdGgsIHNlcnZlckxpc3Quam9pbignLCcpLCBgLWZldGNoYClcclxuICAgICAgICB3aGlsZSAobnMuaXNSdW5uaW5nKHBpZCkpIHsgYXdhaXQgbnMuc2xlZXAoMTAwKSB9O1xyXG4gICAgfTtcclxufSJdfQ==\",\"filename\":\"hack-servers.js\",\"server\":\"home\"}}],[\"open-ports.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { openPorts } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let hostname = ns.args[0]?.toString();\\r\\n    openPorts(ns, hostname);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Blbi1wb3J0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9vcGVuLXBvcnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFdEMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUN0QyxTQUFTLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZCAxMC8xNi8yM1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IG9wZW5Qb3J0cyB9IGZyb20gJy4vaGFja0xpYic7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBsZXQgaG9zdG5hbWUgPSBucy5hcmdzWzBdPy50b1N0cmluZygpO1xyXG4gICAgb3BlblBvcnRzKG5zLCBob3N0bmFtZSk7XHJcbn1cclxuXHJcbiJdfQ==\",\"filename\":\"open-ports.js\",\"server\":\"home\"}}],[\"purchase-server-8gb.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // How much RAM each purchased server will have. In this case, it'll\\r\\n    // be 8GB.\\r\\n    const ram = 8;\\r\\n    // Iterator we'll use for our loop\\r\\n    let i = 1; // changed to 1 by j__r0d because 1 is a better place to start than 0 for this counter\\r\\n    // Continuously try to purchase servers until we've reached the maximum\\r\\n    // amount of servers\\r\\n    while (i < ns.getPurchasedServerLimit()) {\\r\\n        // Check if we have enough money to purchase a server\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\r\\n            // If we have enough money, then:\\r\\n            //  1. Purchase the server\\r\\n            //  2. Copy our hacking script onto the newly-purchased server\\r\\n            //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n            //  4. Increment our iterator to indicate that we've bought a new server\\r\\n            let hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n            ns.scp(\\\"early-hack-template.js\\\", hostname);\\r\\n            ns.exec(\\\"early-hack-template.js\\\", hostname, 3);\\r\\n            ++i;\\r\\n        }\\r\\n        //Make the script wait for a second before looping again.\\r\\n        //Removing this line will cause an infinite loop and crash the game.\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2Utc2VydmVyLThnYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wdXJjaGFzZS1zZXJ2ZXItOGdiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLG9FQUFvRTtJQUNwRSxVQUFVO0lBQ1YsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBRWQsa0NBQWtDO0lBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLHNGQUFzRjtJQUVqRyx1RUFBdUU7SUFDdkUsb0JBQW9CO0lBQ3BCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1FBQ3JDLHFEQUFxRDtRQUNyRCxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckUsaUNBQWlDO1lBQ2pDLDBCQUEwQjtZQUMxQiw4REFBOEQ7WUFDOUQsMEVBQTBFO1lBQzFFLHdFQUF3RTtZQUN4RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDcEQsRUFBRSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUMzQyxFQUFFLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQyxFQUFFLENBQUMsQ0FBQztTQUNQO1FBQ0QseURBQXlEO1FBQ3pELG9FQUFvRTtRQUNwRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDeEI7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdGhlIGNvbnRlbnRzIG9mIHRoaXMgc2NyaXB0IGNhbWUgZnJvbSB0aGUgQmVnaW5uZXIncyBHdWlkZSBpbiB0aGUgZ2FtZSdzIGRvY3VtZW50YXRpb24uLi5cclxuaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIC8vIEhvdyBtdWNoIFJBTSBlYWNoIHB1cmNoYXNlZCBzZXJ2ZXIgd2lsbCBoYXZlLiBJbiB0aGlzIGNhc2UsIGl0J2xsXHJcbiAgICAvLyBiZSA4R0IuXHJcbiAgICBjb25zdCByYW0gPSA4O1xyXG5cclxuICAgIC8vIEl0ZXJhdG9yIHdlJ2xsIHVzZSBmb3Igb3VyIGxvb3BcclxuICAgIGxldCBpID0gMTsgLy8gY2hhbmdlZCB0byAxIGJ5IGpfX3IwZCBiZWNhdXNlIDEgaXMgYSBiZXR0ZXIgcGxhY2UgdG8gc3RhcnQgdGhhbiAwIGZvciB0aGlzIGNvdW50ZXJcclxuXHJcbiAgICAvLyBDb250aW51b3VzbHkgdHJ5IHRvIHB1cmNoYXNlIHNlcnZlcnMgdW50aWwgd2UndmUgcmVhY2hlZCB0aGUgbWF4aW11bVxyXG4gICAgLy8gYW1vdW50IG9mIHNlcnZlcnNcclxuICAgIHdoaWxlIChpIDwgbnMuZ2V0UHVyY2hhc2VkU2VydmVyTGltaXQoKSkge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgZW5vdWdoIG1vbmV5IHRvIHB1cmNoYXNlIGEgc2VydmVyXHJcbiAgICAgICAgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKFwiaG9tZVwiKSA+IG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QocmFtKSkge1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGVub3VnaCBtb25leSwgdGhlbjpcclxuICAgICAgICAgICAgLy8gIDEuIFB1cmNoYXNlIHRoZSBzZXJ2ZXJcclxuICAgICAgICAgICAgLy8gIDIuIENvcHkgb3VyIGhhY2tpbmcgc2NyaXB0IG9udG8gdGhlIG5ld2x5LXB1cmNoYXNlZCBzZXJ2ZXJcclxuICAgICAgICAgICAgLy8gIDMuIFJ1biBvdXIgaGFja2luZyBzY3JpcHQgb24gdGhlIG5ld2x5LXB1cmNoYXNlZCBzZXJ2ZXIgd2l0aCAzIHRocmVhZHNcclxuICAgICAgICAgICAgLy8gIDQuIEluY3JlbWVudCBvdXIgaXRlcmF0b3IgdG8gaW5kaWNhdGUgdGhhdCB3ZSd2ZSBib3VnaHQgYSBuZXcgc2VydmVyXHJcbiAgICAgICAgICAgIGxldCBob3N0bmFtZSA9IG5zLnB1cmNoYXNlU2VydmVyKFwicHNlcnYtXCIgKyBpLCByYW0pO1xyXG4gICAgICAgICAgICBucy5zY3AoXCJlYXJseS1oYWNrLXRlbXBsYXRlLmpzXCIsIGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgbnMuZXhlYyhcImVhcmx5LWhhY2stdGVtcGxhdGUuanNcIiwgaG9zdG5hbWUsIDMpO1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vTWFrZSB0aGUgc2NyaXB0IHdhaXQgZm9yIGEgc2Vjb25kIGJlZm9yZSBsb29waW5nIGFnYWluLlxyXG4gICAgICAgIC8vUmVtb3ZpbmcgdGhpcyBsaW5lIHdpbGwgY2F1c2UgYW4gaW5maW5pdGUgbG9vcCBhbmQgY3Jhc2ggdGhlIGdhbWUuXHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XHJcbiAgICB9XHJcbn0iXX0=\",\"filename\":\"purchase-server-8gb.js\",\"server\":\"home\"}}],[\"purchase-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { deployHack, purchaseServer, colors, defaultHackToDeploy, calculateMaxRAM } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\n/**\\r\\n * @param {NS} ns\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    const hackToDeploy = ns.args[0].toString() || defaultHackToDeploy;\\r\\n    const hackTarget = ns.args[1].toString() || defaultHackToDeploy;\\r\\n    const ram = ns.args[2] ? parseInt(ns.args[2].toString()) : calculateMaxRAM(ns);\\r\\n    // Continuously try to purchase servers until we've reached the maximum\\r\\n    // amount of servers, + 1 to account for 1-based indexing\\r\\n    let i = 1;\\r\\n    while (i < ns.getPurchasedServerLimit() + 1) {\\r\\n        // TODO: implement an upgrade feature that will upgrade existing servers \\r\\n        // if the purchased-server script is called with a higher RAM value than the existing RAM on the server\\r\\n        if (ns.getServerMoneyAvailable(`home`) > ns.getPurchasedServerCost(ram)) {\\r\\n            const hostname = await purchaseServer(ns, `pserv-` + i, ram);\\r\\n            ns.tprint(`INFO: purchased server ${colors.Cyan}${hostname}${colors.Reset} with ${colors.Green}${ram}GB${colors.Reset} RAM`);\\r\\n            await deployHack(ns, hostname, hackToDeploy, hackTarget);\\r\\n            ++i;\\r\\n        }\\r\\n        else {\\r\\n            ns.tprint(`not enough monies to purchase server. aborting...`);\\r\\n        }\\r\\n        //Make the script wait for 100 milli-seconds before looping again.\\r\\n        //Removing this line will cause an infinite loop and crash the game.\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2Utc2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3B1cmNoYXNlLXNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBaUIsTUFBTSxFQUFFLG1CQUFtQixFQUFFLGVBQWUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNuSCxxQkFBcUI7QUFFckI7O0dBRUc7QUFFSCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sWUFBWSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLElBQUksbUJBQW1CLENBQUM7SUFDMUUsTUFBTSxVQUFVLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxtQkFBbUIsQ0FBQztJQUN4RSxNQUFNLEdBQUcsR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7SUFJdkYsdUVBQXVFO0lBQ3ZFLHlEQUF5RDtJQUN6RCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFFekMseUVBQXlFO1FBQ3pFLHVHQUF1RztRQUV2RyxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckUsTUFBTSxRQUFRLEdBQVcsTUFBTSxjQUFjLENBQUMsRUFBRSxFQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDcEUsRUFBRSxDQUFDLE1BQU0sQ0FBQywwQkFBMEIsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssU0FBUyxNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUcsS0FBSyxNQUFNLENBQUMsS0FBSyxNQUFNLENBQUMsQ0FBQztZQUM3SCxNQUFNLFVBQVUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztZQUN6RCxFQUFFLENBQUMsQ0FBQztTQUNQO2FBQ0k7WUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLG1EQUFtRCxDQUFDLENBQUE7U0FDakU7UUFDRCxrRUFBa0U7UUFDbEUsb0VBQW9FO1FBQ3BFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN2QjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0aGUgY29udGVudHMgb2YgdGhpcyBzY3JpcHQgY2FtZSBmcm9tIHRoZSBCZWdpbm5lcidzIEd1aWRlIGluIHRoZSBnYW1lJ3MgZG9jdW1lbnRhdGlvbi4uLlxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IGRlcGxveUhhY2ssIHB1cmNoYXNlU2VydmVyLCB1cGdyYWRlU2VydmVyLCBjb2xvcnMsIGRlZmF1bHRIYWNrVG9EZXBsb3ksIGNhbGN1bGF0ZU1heFJBTX0gZnJvbSAnLi9oYWNrTGliJztcclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtOU30gbnMgXHJcbiAqL1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBjb25zdCBoYWNrVG9EZXBsb3k6IHN0cmluZyA9IG5zLmFyZ3NbMF0udG9TdHJpbmcoKSB8fCBkZWZhdWx0SGFja1RvRGVwbG95O1xyXG4gICAgY29uc3QgaGFja1RhcmdldDogc3RyaW5nID0gbnMuYXJnc1sxXS50b1N0cmluZygpIHx8IGRlZmF1bHRIYWNrVG9EZXBsb3k7XHJcbiAgICBjb25zdCByYW06IG51bWJlciA9IG5zLmFyZ3NbMl0gPyBwYXJzZUludChucy5hcmdzWzJdLnRvU3RyaW5nKCkpIDogY2FsY3VsYXRlTWF4UkFNKG5zKTtcclxuXHJcbiAgICBcclxuXHJcbiAgICAvLyBDb250aW51b3VzbHkgdHJ5IHRvIHB1cmNoYXNlIHNlcnZlcnMgdW50aWwgd2UndmUgcmVhY2hlZCB0aGUgbWF4aW11bVxyXG4gICAgLy8gYW1vdW50IG9mIHNlcnZlcnMsICsgMSB0byBhY2NvdW50IGZvciAxLWJhc2VkIGluZGV4aW5nXHJcbiAgICBsZXQgaSA9IDE7XHJcbiAgICB3aGlsZSAoaSA8IG5zLmdldFB1cmNoYXNlZFNlcnZlckxpbWl0KCkgKyAxKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVE9ETzogaW1wbGVtZW50IGFuIHVwZ3JhZGUgZmVhdHVyZSB0aGF0IHdpbGwgdXBncmFkZSBleGlzdGluZyBzZXJ2ZXJzIFxyXG4gICAgICAgIC8vIGlmIHRoZSBwdXJjaGFzZWQtc2VydmVyIHNjcmlwdCBpcyBjYWxsZWQgd2l0aCBhIGhpZ2hlciBSQU0gdmFsdWUgdGhhbiB0aGUgZXhpc3RpbmcgUkFNIG9uIHRoZSBzZXJ2ZXJcclxuXHJcbiAgICAgICAgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKGBob21lYCkgPiBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KHJhbSkpIHtcclxuICAgICAgICAgICAgY29uc3QgaG9zdG5hbWU6IHN0cmluZyA9IGF3YWl0IHB1cmNoYXNlU2VydmVyKG5zLGBwc2Vydi1gICsgaSwgcmFtKTtcclxuICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiBwdXJjaGFzZWQgc2VydmVyICR7Y29sb3JzLkN5YW59JHtob3N0bmFtZX0ke2NvbG9ycy5SZXNldH0gd2l0aCAke2NvbG9ycy5HcmVlbn0ke3JhbX1HQiR7Y29sb3JzLlJlc2V0fSBSQU1gKTtcclxuICAgICAgICAgICAgYXdhaXQgZGVwbG95SGFjayhucywgaG9zdG5hbWUsIGhhY2tUb0RlcGxveSwgaGFja1RhcmdldCk7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChgbm90IGVub3VnaCBtb25pZXMgdG8gcHVyY2hhc2Ugc2VydmVyLiBhYm9ydGluZy4uLmApXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vTWFrZSB0aGUgc2NyaXB0IHdhaXQgZm9yIDEwMCBtaWxsaS1zZWNvbmRzIGJlZm9yZSBsb29waW5nIGFnYWluLlxyXG4gICAgICAgIC8vUmVtb3ZpbmcgdGhpcyBsaW5lIHdpbGwgY2F1c2UgYW4gaW5maW5pdGUgbG9vcCBhbmQgY3Jhc2ggdGhlIGdhbWUuXHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwKTtcclxuICAgIH1cclxufSJdfQ==\",\"filename\":\"purchase-server.js\",\"server\":\"home\"}}],[\"scan-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { buildScannedServerList, colors } from './hackLib';\\r\\n/** @param {NS} ns Netscript namespace */\\r\\nexport async function main(ns) {\\r\\n    // for testing in bitburner Terminal\\r\\n    let depth = ns.args[0].toString() || 3;\\r\\n    let serverList = await buildScannedServerList(ns, ~~depth);\\r\\n    ns.tprintf(`found ${colors.Cyan}${serverList.length}${colors.Reset} servers`);\\r\\n    ns.tprintf(`${colors.Cyan}${serverList}${colors.Reset}`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi1zZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NjYW4tc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRTNELHlDQUF5QztBQUN6QyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLG9DQUFvQztJQUNwQyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxJQUFJLFVBQVUsR0FBRyxNQUFNLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLE1BQU0sQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQTtJQUM3RSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDN0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkIDEwLzEyLzIzXHJcbi8vIHNjYW5zIGFsbCBzZXJ2ZXJzIGFuZCBidWlsZHMgYSBsaXN0IG9mIHNlcnZlcnMgdG8gaGFja1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IGJ1aWxkU2Nhbm5lZFNlcnZlckxpc3QsIGNvbG9ycyB9IGZyb20gJy4vaGFja0xpYic7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZSAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIC8vIGZvciB0ZXN0aW5nIGluIGJpdGJ1cm5lciBUZXJtaW5hbFxyXG4gICAgbGV0IGRlcHRoID0gbnMuYXJnc1swXS50b1N0cmluZygpIHx8IDM7XHJcbiAgICBsZXQgc2VydmVyTGlzdCA9IGF3YWl0IGJ1aWxkU2Nhbm5lZFNlcnZlckxpc3QobnMsIH5+ZGVwdGgpO1xyXG4gICAgbnMudHByaW50ZihgZm91bmQgJHtjb2xvcnMuQ3lhbn0ke3NlcnZlckxpc3QubGVuZ3RofSR7Y29sb3JzLlJlc2V0fSBzZXJ2ZXJzYClcclxuICAgIG5zLnRwcmludGYoYCR7Y29sb3JzLkN5YW59JHtzZXJ2ZXJMaXN0fSR7Y29sb3JzLlJlc2V0fWApO1xyXG59XHJcblxyXG5cclxuIl19\",\"filename\":\"scan-servers.js\",\"server\":\"home\"}}],[\"showMaxRAM.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { calculateMaxRAM } from \\\"./hackLib\\\";\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        const ram = calculateMaxRAM(ns);\\r\\n        ns.tprint(`INFO: each server would get ${ram}GB`);\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvd01heFJBTS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zaG93TWF4UkFNLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFNUMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixPQUFNLElBQUksRUFBQztRQUNQLE1BQU0sR0FBRyxHQUFHLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQyxFQUFFLENBQUMsTUFBTSxDQUFDLCtCQUErQixHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2xELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN4QjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgY2FsY3VsYXRlTWF4UkFNIH0gZnJvbSBcIi4vaGFja0xpYlwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICB3aGlsZSh0cnVlKXtcclxuICAgICAgICBjb25zdCByYW0gPSBjYWxjdWxhdGVNYXhSQU0obnMpO1xyXG4gICAgICAgIG5zLnRwcmludChgSU5GTzogZWFjaCBzZXJ2ZXIgd291bGQgZ2V0ICR7cmFtfUdCYCk7XHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XHJcbiAgICB9XHJcbn0iXX0=\",\"filename\":\"showMaxRAM.js\",\"server\":\"home\"}}],[\"start-home-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(`INFO: deploying hack on ${colors.Cyan}home${colors.Reset} server...`);\\r\\n    const hackToDeploy = ns.args[0]?.toString();\\r\\n    const hackTarget = ns.args[1]?.toString();\\r\\n    const killallFlag = ns.args.includes('-k');\\r\\n    let hostname = 'home';\\r\\n    if (killallFlag)\\r\\n        ns.killall();\\r\\n    let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n    ns.run(hackToDeploy, ~~threadsToUse, hackTarget);\\r\\n    if (ns.scriptRunning(hackToDeploy, 'home'))\\r\\n        ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtaG9tZS1zZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RhcnQtaG9tZS1zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUVsQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLDJCQUEyQixNQUFNLENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLFlBQVksQ0FBQyxDQUFDO0lBQ2pGLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDNUMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUMxQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQyxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFDdEIsSUFBSSxXQUFXO1FBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDL0gsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0NBQWdDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQztBQUNwSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlZCBieSBqX19yMGQgMTAvMTEvMjNcclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInXHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50cHJpbnQoYElORk86IGRlcGxveWluZyBoYWNrIG9uICR7Y29sb3JzLkN5YW59aG9tZSR7Y29sb3JzLlJlc2V0fSBzZXJ2ZXIuLi5gKTtcclxuICAgIGNvbnN0IGhhY2tUb0RlcGxveSA9IG5zLmFyZ3NbMF0/LnRvU3RyaW5nKCk7IFxyXG4gICAgY29uc3QgaGFja1RhcmdldCA9IG5zLmFyZ3NbMV0/LnRvU3RyaW5nKCk7XHJcbiAgICBjb25zdCBraWxsYWxsRmxhZyA9IG5zLmFyZ3MuaW5jbHVkZXMoJy1rJyk7XHJcbiAgICBsZXQgaG9zdG5hbWUgPSAnaG9tZSc7XHJcbiAgICBpZiAoa2lsbGFsbEZsYWcpIG5zLmtpbGxhbGwoKTtcclxuICAgIGxldCB0aHJlYWRzVG9Vc2UgPSBNYXRoLm1heCgxLCAobnMuZ2V0U2VydmVyTWF4UmFtKGhvc3RuYW1lKSAtIG5zLmdldFNlcnZlclVzZWRSYW0oaG9zdG5hbWUpKSAvIG5zLmdldFNjcmlwdFJhbShoYWNrVG9EZXBsb3kpKTtcclxuICAgIG5zLnJ1bihoYWNrVG9EZXBsb3ksIH5+dGhyZWFkc1RvVXNlLCBoYWNrVGFyZ2V0KTtcclxuICAgIGlmIChucy5zY3JpcHRSdW5uaW5nKGhhY2tUb0RlcGxveSwgJ2hvbWUnKSkgbnMudHByaW50KGBJTkZPOiAuLi5oYWNrIGRlcGxveWVkIHVzaW5nICR7Y29sb3JzLk1hZ2VudGF9JHt+fnRocmVhZHNUb1VzZX0ke2NvbG9ycy5SZXNldH0gdGhyZWFkc2ApO1xyXG59Il19\",\"filename\":\"start-home-server.js\",\"server\":\"home\"}}],[\"start-purchased-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as hl from './hackLib';\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint('INFO: deploying hack on purchased servers...');\\r\\n    const hackToDeploy = ns.args[0].toString();\\r\\n    const hackTarget = ns.args[1].toString();\\r\\n    let hackedCount = 0;\\r\\n    let i = 1;\\r\\n    while (i < ns.getPurchasedServerLimit() + 1) {\\r\\n        let hostname = `pserv-`.concat(i.toString());\\r\\n        hl.deployHack(ns, hostname, hackToDeploy, hackTarget);\\r\\n        if (ns.scriptRunning(hackToDeploy, hostname)) {\\r\\n            //ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads on ${colors.Cyan}${hostname}${colors.Reset}`)\\r\\n            ++hackedCount;\\r\\n        }\\r\\n        ;\\r\\n        ++i;\\r\\n    }\\r\\n    ns.tprint(`INFO: hacks deployed on ${colors.Green}${hackedCount}${colors.Reset} purchased servers`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtcHVyY2hhc2VkLXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RhcnQtcHVyY2hhc2VkLXNlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDL0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUVsQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLDhDQUE4QyxDQUFDLENBQUM7SUFDMUQsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFVixPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDekMsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUM3QyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3RELElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLEVBQUU7WUFDMUMsaUpBQWlKO1lBQ2pKLEVBQUUsV0FBVyxDQUFDO1NBQ2pCO1FBQUEsQ0FBQztRQUNGLEVBQUUsQ0FBQyxDQUFDO0tBQ1A7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLDJCQUEyQixNQUFNLENBQUMsS0FBSyxHQUFHLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3hHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZCAxMC8xMS8yM1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCAqIGFzIGhsIGZyb20gJy4vaGFja0xpYidcclxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnLi9oYWNrTGliJ1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudHByaW50KCdJTkZPOiBkZXBsb3lpbmcgaGFjayBvbiBwdXJjaGFzZWQgc2VydmVycy4uLicpO1xyXG4gICAgY29uc3QgaGFja1RvRGVwbG95ID0gbnMuYXJnc1swXS50b1N0cmluZygpO1xyXG4gICAgY29uc3QgaGFja1RhcmdldCA9IG5zLmFyZ3NbMV0udG9TdHJpbmcoKTtcclxuICAgIGxldCBoYWNrZWRDb3VudCA9IDA7XHJcbiAgICBsZXQgaSA9IDE7XHJcblxyXG4gICAgd2hpbGUgKGkgPCBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpICsgMSkge1xyXG4gICAgICAgIGxldCBob3N0bmFtZSA9IGBwc2Vydi1gLmNvbmNhdChpLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIGhsLmRlcGxveUhhY2sobnMsIGhvc3RuYW1lLCBoYWNrVG9EZXBsb3ksIGhhY2tUYXJnZXQpO1xyXG4gICAgICAgIGlmIChucy5zY3JpcHRSdW5uaW5nKGhhY2tUb0RlcGxveSwgaG9zdG5hbWUpKSB7XHJcbiAgICAgICAgICAgIC8vbnMudHByaW50KGBJTkZPOiAuLi5oYWNrIGRlcGxveWVkIHVzaW5nICR7Y29sb3JzLk1hZ2VudGF9JHt+fnRocmVhZHNUb1VzZX0ke2NvbG9ycy5SZXNldH0gdGhyZWFkcyBvbiAke2NvbG9ycy5DeWFufSR7aG9zdG5hbWV9JHtjb2xvcnMuUmVzZXR9YClcclxuICAgICAgICAgICAgKytoYWNrZWRDb3VudDtcclxuICAgICAgICB9O1xyXG4gICAgICAgICsraTtcclxuICAgIH1cclxuICAgIG5zLnRwcmludChgSU5GTzogaGFja3MgZGVwbG95ZWQgb24gJHtjb2xvcnMuR3JlZW59JHtoYWNrZWRDb3VudH0ke2NvbG9ycy5SZXNldH0gcHVyY2hhc2VkIHNlcnZlcnNgKTtcclxufSJdfQ==\",\"filename\":\"start-purchased-servers.js\",\"server\":\"home\"}}],[\"outdated-and-unused/sniff-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d 2023-10-22\\r\\nimport { buildScannedServerList, fileFetch, getMaxPossibleScanDepth } from '../hackLib';\\r\\n/**\\r\\n * @param {NS} ns Netscript namespace\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    let scanDepth = parseInt(ns.args[0]?.toString());\\r\\n    const doFetch = (ns.args.includes('-f') || ns.args.includes('-fetch')) ? true : false;\\r\\n    if (isNaN(scanDepth))\\r\\n        scanDepth = await getMaxPossibleScanDepth(ns);\\r\\n    const serverList = await buildScannedServerList(ns, scanDepth);\\r\\n    const homefilelist = await (async () => ns.ls('home'))();\\r\\n    serverList.forEach((hostname) => {\\r\\n        ns.tprint(`searching ${hostname}...`);\\r\\n        if (doFetch)\\r\\n            fileFetch(ns, hostname, homefilelist);\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25pZmYtc2VydmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vdXRkYXRlZC1hbmQtdW51c2VkL3NuaWZmLXNlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBRy9CLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFeEY7O0dBRUc7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDakQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBRSxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUN0RixJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDaEIsU0FBUyxHQUFHLE1BQU0sdUJBQXVCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxzQkFBc0IsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDL0QsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDMUQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWdCLEVBQUUsRUFBRTtRQUNwQyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsUUFBUSxLQUFLLENBQUMsQ0FBQztRQUN0QyxJQUFJLE9BQU87WUFDUCxTQUFTLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZCAyMDIzLTEwLTIyXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IGJ1aWxkU2Nhbm5lZFNlcnZlckxpc3QsIGZpbGVGZXRjaCwgZ2V0TWF4UG9zc2libGVTY2FuRGVwdGggfSBmcm9tICcuLi9oYWNrTGliJztcclxuXHJcbi8qKiBcclxuICogQHBhcmFtIHtOU30gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZVxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBsZXQgc2NhbkRlcHRoID0gcGFyc2VJbnQobnMuYXJnc1swXT8udG9TdHJpbmcoKSk7XHJcbiAgICBjb25zdCBkb0ZldGNoID0gKG5zLmFyZ3MuaW5jbHVkZXMoJy1mJykgfHwgbnMuYXJncy5pbmNsdWRlcygnLWZldGNoJykgKT8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgaWYgKGlzTmFOKHNjYW5EZXB0aCkpIFxyXG4gICAgICAgIHNjYW5EZXB0aCA9IGF3YWl0IGdldE1heFBvc3NpYmxlU2NhbkRlcHRoKG5zKTtcclxuICAgIGNvbnN0IHNlcnZlckxpc3QgPSBhd2FpdCBidWlsZFNjYW5uZWRTZXJ2ZXJMaXN0KG5zLCBzY2FuRGVwdGgpO1xyXG4gICAgY29uc3QgaG9tZWZpbGVsaXN0ID0gYXdhaXQgKGFzeW5jICgpID0+ICBucy5scygnaG9tZScpKSgpO1xyXG4gICAgc2VydmVyTGlzdC5mb3JFYWNoKChob3N0bmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgbnMudHByaW50KGBzZWFyY2hpbmcgJHtob3N0bmFtZX0uLi5gKTtcclxuICAgICAgICBpZiAoZG9GZXRjaClcclxuICAgICAgICAgICAgZmlsZUZldGNoKG5zLCBob3N0bmFtZSwgaG9tZWZpbGVsaXN0KTtcclxuICAgIH0pO1xyXG59ICJdfQ==\",\"filename\":\"outdated-and-unused/sniff-servers.js\",\"server\":\"home\"}}],[\"server-node/index.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class ServerNode {\\r\\n    hostname;\\r\\n    ip;\\r\\n    sshPortOpen;\\r\\n    ftpPortOpen;\\r\\n    httpPortOpen;\\r\\n    numOpenPortsRequired;\\r\\n    hackingRequired;\\r\\n    maxMoney;\\r\\n    minSecurity;\\r\\n    money;\\r\\n    requiredHackingSkill;\\r\\n    requiredPortAccess;\\r\\n    security;\\r\\n    vulnerability;\\r\\n    constructor(hostname, ip, sshPortOpen, ftpPortOpen, httpPortOpen, numOpenPortsRequired, hackingRequired, maxMoney, minSecurity, money, requiredHackingSkill, requiredPortAccess, security, vulnerability) {\\r\\n        this.hostname = hostname;\\r\\n        this.ip = ip;\\r\\n        this.sshPortOpen = sshPortOpen;\\r\\n        this.ftpPortOpen = ftpPortOpen;\\r\\n        this.httpPortOpen = httpPortOpen;\\r\\n        this.numOpenPortsRequired = numOpenPortsRequired;\\r\\n        this.hackingRequired = hackingRequired;\\r\\n        this.maxMoney = maxMoney;\\r\\n        this.minSecurity = minSecurity;\\r\\n        this.money = money;\\r\\n        this.requiredHackingSkill = requiredHackingSkill;\\r\\n        this.requiredPortAccess = requiredPortAccess;\\r\\n        this.security = security;\\r\\n        this.vulnerability = vulnerability;\\r\\n    }\\r\\n    smtpPortOpen;\\r\\n    sqlPortOpen;\\r\\n    hasAdminRights;\\r\\n    cpuCores;\\r\\n    isConnectedTo;\\r\\n    ramUsed;\\r\\n    maxRam;\\r\\n    organizationName;\\r\\n    purchasedByPlayer;\\r\\n    backdoorInstalled;\\r\\n    baseDifficulty;\\r\\n    hackDifficulty;\\r\\n    minDifficulty;\\r\\n    moneyAvailable;\\r\\n    moneyMax;\\r\\n    openPortCount;\\r\\n    serverGrowth;\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VydmVyLW5vZGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxPQUFPLFVBQVU7SUFDWixRQUFRLENBQVM7SUFDakIsRUFBRSxDQUFTO0lBQ1gsV0FBVyxDQUFVO0lBQ3JCLFdBQVcsQ0FBVTtJQUNyQixZQUFZLENBQVU7SUFDdEIsb0JBQW9CLENBQVM7SUFDN0IsZUFBZSxDQUFTO0lBQ3hCLFFBQVEsQ0FBUztJQUNqQixXQUFXLENBQVM7SUFDcEIsS0FBSyxDQUFTO0lBQ2Qsb0JBQW9CLENBQVM7SUFDN0Isa0JBQWtCLENBQVc7SUFDN0IsUUFBUSxDQUFTO0lBQ2pCLGFBQWEsQ0FBUztJQUU3QixZQUNJLFFBQWdCLEVBQ2hCLEVBQVUsRUFDVixXQUFvQixFQUNwQixXQUFvQixFQUNwQixZQUFxQixFQUNyQixvQkFBNEIsRUFDNUIsZUFBdUIsRUFDdkIsUUFBZ0IsRUFDaEIsV0FBbUIsRUFDbkIsS0FBYSxFQUNiLG9CQUE0QixFQUM1QixrQkFBNEIsRUFDNUIsUUFBZ0IsRUFDaEIsYUFBcUI7UUFFckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7UUFDakQsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO1FBQ2pELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztRQUM3QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUN2QyxDQUFDO0lBQ0QsWUFBWSxDQUFXO0lBQ3ZCLFdBQVcsQ0FBVztJQUN0QixjQUFjLENBQVc7SUFDekIsUUFBUSxDQUFVO0lBQ2xCLGFBQWEsQ0FBVztJQUN4QixPQUFPLENBQVU7SUFDakIsTUFBTSxDQUFVO0lBQ2hCLGdCQUFnQixDQUFVO0lBQzFCLGlCQUFpQixDQUFXO0lBQzVCLGlCQUFpQixDQUF1QjtJQUN4QyxjQUFjLENBQXNCO0lBQ3BDLGNBQWMsQ0FBc0I7SUFDcEMsYUFBYSxDQUFzQjtJQUNuQyxjQUFjLENBQXNCO0lBQ3BDLFFBQVEsQ0FBc0I7SUFDOUIsYUFBYSxDQUFzQjtJQUNuQyxZQUFZLENBQXNCO0NBQ3JDIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IFNlcnZlciB9IGZyb20gJ0Bucyc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VydmVyTm9kZSBpbXBsZW1lbnRzIFNlcnZlciB7XHJcbiAgICBwdWJsaWMgaG9zdG5hbWU6IHN0cmluZztcclxuICAgIHB1YmxpYyBpcDogc3RyaW5nO1xyXG4gICAgcHVibGljIHNzaFBvcnRPcGVuOiBib29sZWFuO1xyXG4gICAgcHVibGljIGZ0cFBvcnRPcGVuOiBib29sZWFuO1xyXG4gICAgcHVibGljIGh0dHBQb3J0T3BlbjogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBudW1PcGVuUG9ydHNSZXF1aXJlZDogbnVtYmVyO1xyXG4gICAgcHVibGljIGhhY2tpbmdSZXF1aXJlZDogbnVtYmVyO1xyXG4gICAgcHVibGljIG1heE1vbmV5OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbWluU2VjdXJpdHk6IG51bWJlcjtcclxuICAgIHB1YmxpYyBtb25leTogbnVtYmVyO1xyXG4gICAgcHVibGljIHJlcXVpcmVkSGFja2luZ1NraWxsOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcmVxdWlyZWRQb3J0QWNjZXNzOiBzdHJpbmdbXTtcclxuICAgIHB1YmxpYyBzZWN1cml0eTogbnVtYmVyO1xyXG4gICAgcHVibGljIHZ1bG5lcmFiaWxpdHk6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBob3N0bmFtZTogc3RyaW5nLFxyXG4gICAgICAgIGlwOiBzdHJpbmcsXHJcbiAgICAgICAgc3NoUG9ydE9wZW46IGJvb2xlYW4sXHJcbiAgICAgICAgZnRwUG9ydE9wZW46IGJvb2xlYW4sXHJcbiAgICAgICAgaHR0cFBvcnRPcGVuOiBib29sZWFuLFxyXG4gICAgICAgIG51bU9wZW5Qb3J0c1JlcXVpcmVkOiBudW1iZXIsXHJcbiAgICAgICAgaGFja2luZ1JlcXVpcmVkOiBudW1iZXIsXHJcbiAgICAgICAgbWF4TW9uZXk6IG51bWJlcixcclxuICAgICAgICBtaW5TZWN1cml0eTogbnVtYmVyLFxyXG4gICAgICAgIG1vbmV5OiBudW1iZXIsXHJcbiAgICAgICAgcmVxdWlyZWRIYWNraW5nU2tpbGw6IG51bWJlcixcclxuICAgICAgICByZXF1aXJlZFBvcnRBY2Nlc3M6IHN0cmluZ1tdLFxyXG4gICAgICAgIHNlY3VyaXR5OiBudW1iZXIsXHJcbiAgICAgICAgdnVsbmVyYWJpbGl0eTogbnVtYmVyXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmhvc3RuYW1lID0gaG9zdG5hbWU7XHJcbiAgICAgICAgdGhpcy5pcCA9IGlwO1xyXG4gICAgICAgIHRoaXMuc3NoUG9ydE9wZW4gPSBzc2hQb3J0T3BlbjtcclxuICAgICAgICB0aGlzLmZ0cFBvcnRPcGVuID0gZnRwUG9ydE9wZW47XHJcbiAgICAgICAgdGhpcy5odHRwUG9ydE9wZW4gPSBodHRwUG9ydE9wZW47XHJcbiAgICAgICAgdGhpcy5udW1PcGVuUG9ydHNSZXF1aXJlZCA9IG51bU9wZW5Qb3J0c1JlcXVpcmVkO1xyXG4gICAgICAgIHRoaXMuaGFja2luZ1JlcXVpcmVkID0gaGFja2luZ1JlcXVpcmVkO1xyXG4gICAgICAgIHRoaXMubWF4TW9uZXkgPSBtYXhNb25leTtcclxuICAgICAgICB0aGlzLm1pblNlY3VyaXR5ID0gbWluU2VjdXJpdHk7XHJcbiAgICAgICAgdGhpcy5tb25leSA9IG1vbmV5O1xyXG4gICAgICAgIHRoaXMucmVxdWlyZWRIYWNraW5nU2tpbGwgPSByZXF1aXJlZEhhY2tpbmdTa2lsbDtcclxuICAgICAgICB0aGlzLnJlcXVpcmVkUG9ydEFjY2VzcyA9IHJlcXVpcmVkUG9ydEFjY2VzcztcclxuICAgICAgICB0aGlzLnNlY3VyaXR5ID0gc2VjdXJpdHk7XHJcbiAgICAgICAgdGhpcy52dWxuZXJhYmlsaXR5ID0gdnVsbmVyYWJpbGl0eTtcclxuICAgIH1cclxuICAgIHNtdHBQb3J0T3BlbiE6IGJvb2xlYW47XHJcbiAgICBzcWxQb3J0T3BlbiE6IGJvb2xlYW47XHJcbiAgICBoYXNBZG1pblJpZ2h0cyE6IGJvb2xlYW47XHJcbiAgICBjcHVDb3JlcyE6IG51bWJlcjtcclxuICAgIGlzQ29ubmVjdGVkVG8hOiBib29sZWFuO1xyXG4gICAgcmFtVXNlZCE6IG51bWJlcjtcclxuICAgIG1heFJhbSE6IG51bWJlcjtcclxuICAgIG9yZ2FuaXphdGlvbk5hbWUhOiBzdHJpbmc7XHJcbiAgICBwdXJjaGFzZWRCeVBsYXllciE6IGJvb2xlYW47XHJcbiAgICBiYWNrZG9vckluc3RhbGxlZD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICBiYXNlRGlmZmljdWx0eT86IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgIGhhY2tEaWZmaWN1bHR5PzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgbWluRGlmZmljdWx0eT86IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgIG1vbmV5QXZhaWxhYmxlPzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgbW9uZXlNYXg/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICBvcGVuUG9ydENvdW50PzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgc2VydmVyR3Jvd3RoPzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG59Il19\",\"filename\":\"server-node/index.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-25\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21000000,641844,641844,1337175]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":34066232.6853974,\"onlineMoneyMade\":21000000,\"onlineRunningTime\":82.81000000000064,\"ramUsage\":2.45,\"server\":\"home\",\"scriptKey\":\"my-first-hack.js*[\\\"n00dles\\\"]\",\"title\":\"my-first-hack.js n00dles\",\"threads\":53487,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-12236.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,0],[0,0],[0,1],[0,1],[0,0],[0,1],[1,1],[0,0],[0,1],[0,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-837852-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[173,101,192,141,159,133,54,29,89,79,1,40,118,165,99,106,56,56,109,95,56,192,146,23,67,127,144,172,191,15,118,176,41,192,179,39],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-9236.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,3,3,4,4,1,3,2,3,1,8,2,3,2,0,5,4,5,3,1,0,2,3],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"80.3.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":42181776272,\"moneyMax\":1054544406800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1157,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-515669-AlphaEnterprises.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"3Id3534vpYm915mmmLm969LQrv6lKA404mSpg848q0ByuCWT560923Fwm54\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-230955.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[145,180,54,36,178,143,189,88,59,147,156,155,13,161,146,24,9,197,44,198,200,163,69,53,62,140,39,103,70,115,39,186,156,128,103,39,4,159,155,1],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-17254-AlphaEnterprises.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[3,7],[7,3,9],[7,2,4,8],[4,2,4,2,5],[3,6,4,4,3,3],[3,8,7,5,4,7,1],[3,6,8,4,7,2,7,9],[2,1,9,1,9,1,5,6,3]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-415898-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[7,9,9,-7,-7,-4,10,10,6,1,-10,-3,6,-7,7,4,4,-7,8,3,-2,0,2,-2,-3,8,3,6,-9,6,-8,9,10,-7,-6,-8,-7,1],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-639258-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[178,28,97,190,120,66,4,7,64,195,44,155,196,1,137,185,76,39,191,84,189,139,131,151,118,56,158,1,87,181,14,55,36,92,140,69,14,25,3,171,56,182,90,22,121,44,81,135],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-489140.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((a(())())(a))))(\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"0.0.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":40225872004,\"moneyMax\":1005646800100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1309,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-319537-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[91,192,189,51,129,116,147,108,58,50,38,22,70,96,71,6,45,38,94,78,38,90,81,139,135,165,132,184,30,131,123]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-39723-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[109,131,101,188,53,69,55,182,12,152,73,35,57,113,174],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-239231-TheBlackHand.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,1,0],[1,0,0,0,0,1,1],[0,1,0,0,1,0,0],[0,0,0,0,0,0,0],[0,1,1,0,1,1,0],[0,0,0,0,0,0,1],[1,0,0,0,0,1,0],[1,0,0,0,1,0,0],[1,0,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"63.9.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":27823067925,\"moneyMax\":695576698125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":904,\"serverGrowth\":61,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-592362-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[156,79,1,17,29,151,87,78,46,121,128,32,122,114,21,106,26,5,66,52,190,50,69,73,13,13,6,59,126,84,73,199,5,6,169,118,92,158,87,107]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-481503-Aevum.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,9],\"reward\":{\"type\":0,\"name\":\"Aevum\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"41.3.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":34073038027,\"moneyMax\":851825950675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1188,\"serverGrowth\":68,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-186420-Aevum.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9jLI4mzkbC01O535jrwPg146pvejDy952vd659QHF6G1TTJ08bK7Rv68p370545pMILf432QA\",\"reward\":{\"type\":0,\"name\":\"Aevum\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-53339-Aevum.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[2,11],[13,14],[21,26],[23,32]],\"reward\":{\"type\":0,\"name\":\"Aevum\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-892382-AlphaEnterprises.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"9707488482\",81],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"16.5.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":20675809067,\"moneyMax\":516895226675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1169,\"serverGrowth\":88,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-233026.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[189,154,136,114,121,65,7,183,99,192,152,166,92,33,97,58,40,102,9,154,45,194,103,71,4,31,121],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-601083.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[40,42,6,44,2,48,24,16,17,20,10],[16,27,50,36,27,20,12,18,35,41,19],[5,29,9,12,14,25,46,24,46,46,48],[27,25,27,11,36,46,27,47,33,48,28],[36,19,9,2,6,45,7,37,39,24,48],[44,6,5,32,10,4,41,41,4,39,31],[22,6,36,37,24,4,35,42,33,22,13],[11,11,22,3,34,39,9,42,27,47,25],[29,36,37,29,7,20,29,36,24,35,20],[36,39,20,37,25,44,18,44,12,46,6],[35,12,13,13,32,48,36,24,30,48,38]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-248916.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[17,24],[6,10],[6,12],[9,14],[19,21],[18,27],[12,19],[25,31],[9,13],[23,33],[10,18],[9,14],[5,14],[25,29],[17,23],[10,19]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-107837-AlphaEnterprises.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[4,45,4,19,36,6,15,13,16,2,6,24,34,32,45],[16,45,10,12,9,50,8,33,18,22,42,15,33,44,15],[24,41,12,10,20,46,20,19,4,30,37,4,7,13,4],[11,22,21,41,22,44,50,20,18,37,20,21,41,36,45],[36,24,37,36,50,4,26,43,40,23,10,42,26,11,32],[7,22,18,15,15,47,11,26,25,21,19,9,21,15,11],[5,1,14,49,40,49,46,18,37,20,8,49,1,27,41],[47,8,33,28,33,22,41,48,10,22,34,1,20,31,12],[28,16,36,39,47,34,35,27,27,19,12,22,11,45,30],[3,45,49,4,21,17,6,44,46,21,4,12,44,23,31],[24,12,41,23,11,12,30,5,45,27,3,18,45,22,23]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-5663-AlphaEnterprises.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"70000AdVVLMMMMMkkNkk5SSIIIIIIIIIMCCEEvvvvvtttttttttttt6mNN1nnwwwwwwIIeeMGGuuZtt1100000000ee\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"42.3.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":23596853308,\"moneyMax\":589921332700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1205,\"serverGrowth\":68,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-874853-Aevum.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":19004681355,\"reward\":{\"type\":0,\"name\":\"Aevum\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-172914.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[137,68,172,3,50,87,191,56,27,12,183,13,160,136,81,106,46,88,88,7,150,144,193],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-246633.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[45,176,12,174,26,70,85,60,160,8,49,167,101],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"59.5.3.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":17352620249,\"moneyMax\":433815506225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":973,\"serverGrowth\":96,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-541415-Sector12.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":140216510,\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-985401-Sector12.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"DEBUG TRASH FRAME SHIFT LOGIC\",5],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"76.1.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":16649106218,\"moneyMax\":416227655450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":994,\"serverGrowth\":91,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-288594-AlphaEnterprises.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,0,1,0],[0,0,0,0,0,1,0,0],[1,0,1,1,0,0,0,0],[1,0,0,0,1,0,1,0],[0,0,0,0,0,0,0,0],[1,0,1,1,0,0,1,0]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"24.9.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":27221276606,\"moneyMax\":680531915150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1150,\"serverGrowth\":97,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-899288.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[19,[1,2,3,5,7,9,11,14,15]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-548651-AlphaEnterprises.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"3WlF713A0Z536tb01sA893N6S984tYYm533AwJ8980ZZvsQTJ\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"46.3.1.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1792350641,\"moneyMax\":44808766025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1184,\"serverGrowth\":92,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-987013-TianDiHui.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[137,[3,5,6,10,12,13,15,18]],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-737935-AlphaEnterprises.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[8,10],[7,11],[24,34]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"72.7.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1420,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-866001.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,8],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-145574-TianDiHui.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"4KYKYKYnsdhdhdhdhqwYlfWSNfWSNfWSqgcfN3fN3fN3fN3Pu44fN3Pu4sX4fN3PuuZAVBE6vZAVBE6LO0cxAAAAAA\",\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-328525.cct\",\"type\":\"Array Jumping Game II\",\"data\":[0,5,0,2,0,3,7,5,1,2,1,3,2,0,2],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"28.7.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1037153416,\"moneyMax\":25928835400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":997,\"serverGrowth\":88,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-541894-NiteSec.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[8,33,29,29],[1,38,36,7],[28,28,44,10],[46,3,9,12],[24,13,46,25],[39,23,20,29],[28,47,2,1],[30,20,16,3],[6,41,9,16],[6,20,22,18],[21,11,31,1]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-865142.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,3],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"84.4.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":949045087,\"moneyMax\":23726127175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":932,\"serverGrowth\":61,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-341167-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,0,0,9,7,6,6,6,10,8,5,7,6,8,7,0,6,6,5,0],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-222979.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[18,7,69,60,89,172,176,156,156,107,48,174,126,41,53,161,34,98,124,11,159,136,108,50,149,107,6,28,59,125,82,15,136,195,92,71,51,90,22,2,25,129,178,114,24,79,109,41]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-83805.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[8,6],[9,7,7],[9,8,9,6],[2,6,2,4,6],[1,8,5,5,4,1],[6,6,5,9,9,2,5],[4,1,6,3,4,7,6,6]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-4306-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[48,[3,5,6,7,8,9,10,11,12,17]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-291813-CyberSec.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,1],[0,0,0,0,0,0],[0,0,1,0,0,0],[0,0,0,0,1,1],[0,0,0,0,0,1],[0,0,1,1,1,0],[0,0,0,0,0,0],[1,0,0,0,0,1],[1,1,0,0,1,0],[1,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-42286.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[1,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,1,0,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"47.8.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":790574624,\"moneyMax\":19764365600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":917,\"serverGrowth\":40,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-323841.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"5772977\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-587386-Aevum.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,4,8,0,5,9,8,0,0,0,9,3],\"reward\":{\"type\":0,\"name\":\"Aevum\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-47995.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"11001001010111011101111001011100\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-608567-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[129,[1,2,3,4,6,7,10,11]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-61232.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"ARRAYCACHEINBOXMACROMEDIA\",\"SPAMMER\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"10.4.5.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":716504230,\"moneyMax\":17912605750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":80,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-266628.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[60,[1,2,3,6,7,8,9,10,11,12]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-789158.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")))a()()(((((a\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-739076.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"6565tFV15tFV15FV15DhqjkNgHzIC0gHzIC0gHzbiTHzbiTHWZTHQYlXv63Bv63Bv6y6WYsy6WCQiTTIVTI\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"98.9.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":762814133,\"moneyMax\":19070353325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":882,\"serverGrowth\":66,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-267719.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,0,0],[0,0,0,0,0,1],[0,0,0,0,0,0],[0,0,0,1,0,0],[1,0,0,0,1,0],[1,0,0,0,1,0],[0,1,0,0,1,1],[1,1,0,0,0,0],[1,0,0,0,0,0],[0,0,0,0,1,0],[1,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-387359-Aevum.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[29,24,10,4,42,26,28],[30,24,7,49,8,31,11],[31,6,19,37,22,9,25],[21,32,5,35,48,30,40],[2,42,32,5,2,40,46],[36,42,47,40,42,40,37],[37,28,8,39,11,3,1],[23,34,22,12,3,8,41],[25,22,25,6,26,12,46],[1,9,2,37,3,22,37],[34,4,18,11,50,22,18],[10,46,10,30,13,20,18],[22,13,19,27,18,39,50],[20,43,39,25,35,48,45]],\"reward\":{\"type\":0,\"name\":\"Aevum\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"95.1.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":912841698,\"moneyMax\":22821042450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":920,\"serverGrowth\":87,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-953295.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1],[0,0,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[0,0,1,0,0],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"29.1.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1192942388,\"moneyMax\":29823559700,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":852,\"serverGrowth\":80,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-729729-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[118,13,196,90,170,63,86,88,177,102,51,77],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-24758.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[8,3],[1,2,2],[9,5,2,8],[7,2,5,1,3],[3,9,9,5,3,9],[1,4,9,8,3,2,1],[4,6,6,9,7,2,5,5],[1,6,1,4,3,6,2,7,3],[8,8,5,4,3,4,9,5,7,4]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-600239-CyberSec.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":7302403672820581,\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-163990.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"56k84E652zT689Zf0MwewE709sUDir4QU7168KerMeJG63855df6H7315258wmIYFnPo\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-283520-TianDiHui.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"254131432\",\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"80.3.7.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":865073332,\"moneyMax\":21626833300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":70,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-724532-AlphaEnterprises.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[21,29],[20,27],[5,13],[25,28],[9,11],[5,6],[10,20],[7,15],[22,31],[24,34],[11,20],[16,18],[17,18],[2,6]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-942822-TheBlackHand.cct\",\"type\":\"Total Ways to Sum\",\"data\":80,\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"76.5.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":536626582,\"moneyMax\":13415664550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":83,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-555079.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[168,60,30,97,177,87,12,119,136,83,8,190,60,81,144,106,159,1,200,49,152,138,142,125],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-115720-AlphaEnterprises.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[7,2],[2,2,9],[2,7,2,4],[1,7,7,3,7],[8,6,4,8,5,6],[5,2,6,2,8,4,7],[8,3,6,2,1,3,3,8]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-88093.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"ARRAY VIRUS CACHE PRINT SHIFT\",12],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-662561.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,25],[5,7],[20,22],[6,10],[7,14],[11,19],[5,7],[11,19],[10,18],[22,24],[24,25],[7,11],[21,23],[20,29],[1,6]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-615306-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[19,191,159,7,179,129,12,48,52,180,154,176,153,49,64,174,101,193,97,137,183,72,48,175,150,92,191,140,197,149],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"70.9.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":811804098,\"moneyMax\":20295102450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":907,\"serverGrowth\":80,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-661307-Sector12.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":6185,\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-177811.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[111,[1,3,4,5,6,7,8,11,12]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"90.2.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":19.128,\"minDifficulty\":19,\"moneyAvailable\":4809932291.568337,\"moneyMax\":20033606250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":72,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-866307-NiteSec.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":35294297,\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-925682-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum\",\"data\":30,\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"0.0.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1184755699,\"moneyMax\":29618892475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":886,\"serverGrowth\":63,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-363460-TianDiHui.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"98905735\",-60],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-864684.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[4,9],[2,5,9],[7,7,9,1],[3,1,8,4,7],[2,3,6,8,2,7],[7,8,2,3,4,9,4],[4,7,4,7,7,5,4,4],[9,3,5,4,3,4,7,9,6]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-116472-TheBlackHand.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,1,1,1],[0,1,0,0,1,1],[0,0,0,0,0,0],[0,0,1,0,1,1],[0,0,0,1,0,0],[1,1,0,1,0,0],[1,1,0,1,0,0],[0,0,0,0,0,0],[0,1,0,0,0,0],[1,0,0,0,0,0],[0,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-587334.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,4,6,4,3,2,1,2,4,5,0,2,1,2,3,3,4,4,4],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-389606.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-2,-4,7,-10,4,4,2,-9,-4,-3,1,-9,3,0,7,-5,0,-4,-1,9,5,0,-5,-10,-6,0,1,7,-5,9,6,-10,-8],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"39.6.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":928438227,\"moneyMax\":23210955675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":855,\"serverGrowth\":61,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-166692.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"0IzubGH6zubGGH6zubGG3EcSJqwvG3EcSvrFvOqYR6P3Ob8o66P3Ob8Z8Z66a3a3\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-640002-AlphaEnterprises.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"6q2oW6o264tOlG938Pph61XE1692xy445R41SR7398rO466sGB529M4wE6BSUK07NGLt36u38226742tf\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-429306-AlphaEnterprises.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"371817190919\",6],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-548766.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[114,94,6,31],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-808922.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())))(\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"35.5.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":1057019761,\"moneyMax\":26425494025,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":825,\"serverGrowth\":68,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-415435-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,3,2,1,0,2,7,2,2,3,2,1,3,2,3,3,3,4,3,4,6,4,2,1,1],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-990651.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,7],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-886750-AlphaEnterprises.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"LOGIC LINUX SHIFT EMAIL ENTER\",22],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-685630.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":432276238,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"69.8.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":749069159,\"moneyMax\":18726728975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":824,\"serverGrowth\":70,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-439315.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,10],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-29418.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[132,135,44,153,8,106,32,59,35,92,65,55,72,20,6,49,33,128,36,68,191,148,20,21,32,28,190,70,104,19,134]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-516911-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[178,81,157,168,188,84,29,191,110,42,179,153,187,143,40,192,93,46,148,78,154,10]],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-594379.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[0,1],[1,5],[0,4],[5,8],[3,6],[1,2],[3,4],[2,8],[6,11],[7,10],[3,5],[1,10],[6,7],[0,7],[6,8],[3,10]]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-25863-AlphaEnterprises.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"25250768417\",-6],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-338447-NiteSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())a(()(()\",\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-584292-AlphaEnterprises.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"8hmHRCCCCCCCMlllllS8TwXcK4wXcK4wXcxuJHGtzAHgqOCCCCCGajDDDDDDArZzX3DDArZzX32pZIlY\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"57.8.0.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":744758640,\"moneyMax\":18618966000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":73,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-659781.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[194,60,132,144,165,135,145,106,86,111,168,85,186,32,190,112,31,48,171,135,22,85,4,160,192,152,146,130,71,39,30,178,2,57,27,61,184,98,89,200,145,190],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-850470-Aevum.cct\",\"type\":\"Total Ways to Sum\",\"data\":43,\"reward\":{\"type\":0,\"name\":\"Aevum\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-54496-AlphaEnterprises.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[19,11],[29,13],[47,21],[35,14],[15,50],[31,29],[46,22],[30,30]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"56.6.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1605792626,\"moneyMax\":40144815650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":858,\"serverGrowth\":66,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-122171.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1],[1,0,0],[0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-923925-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,3,3,0,1,-5,0,-6,-10,-6,7,10,0,4,6,-8,-1,4,-10,-5,-9,1,-2,2,-4,-4,-6,-5,10,-8,6,-6,-10,0,-1,-7],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-956319-NiteSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":795210755,\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"6.2.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1592516505,\"moneyMax\":39812912625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":764,\"serverGrowth\":80,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-744058-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[9,14,171,80,136,167,121,145,149,24,141]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-990687.cct\",\"type\":\"Total Ways to Sum\",\"data\":54,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-582689.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":706387005,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-147231.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"87WwEdqkg8456BOIr157lfTtl26642l2979jBNpvPEJj06g8n76n776wg6Fd1\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-269863.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[8,1],[1,5,2],[4,1,7,2],[2,3,1,1,9],[2,1,5,9,2,8],[9,3,8,3,5,5,2],[9,7,9,1,2,9,3,1]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-318295.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[10,2,9,7,9,47,20,47,33,28,25,48,48,29],[40,40,20,5,21,33,24,22,50,36,26,19,34,34],[42,6,39,42,23,9,1,14,17,50,21,15,24,17],[38,14,38,36,37,24,50,38,38,50,15,20,44,26],[4,38,42,39,18,31,16,16,19,1,38,29,5,37],[28,43,34,18,35,24,41,15,16,10,16,19,4,26],[28,41,26,8,1,27,18,48,49,1,47,30,23,42],[31,16,45,26,22,12,27,16,6,35,44,50,39,17],[36,43,47,21,46,40,25,43,18,12,47,3,1,9],[38,47,46,25,39,20,49,11,9,25,11,9,42,47],[27,16,49,2,28,12,47,48,36,12,45,2,22,41],[46,23,10,21,44,35,12,32,24,49,43,14,31,9],[2,41,27,47,11,37,26,30,17,16,30,16,3,10],[15,4,26,2,12,3,30,36,50,46,29,27,46,14]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"34.4.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1136414403,\"moneyMax\":28410360075,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":849,\"serverGrowth\":83,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-91920.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"10010111\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-398085-AlphaEnterprises.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[36,15,48],[45,13,7],[23,24,27],[32,45,32],[22,24,36],[15,26,27],[41,7,23],[21,20,12],[50,21,10],[8,46,18],[27,15,45],[31,50,7],[25,37,21],[1,3,42],[19,14,22]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"7.4.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1366826631,\"moneyMax\":34170665775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":73,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-967217-AlphaEnterprises.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"KppaxnMl4iHgjtmgtmgtG5151515151151515P1151515P1cIH1515FCcIH515FC8g1nzmLpp1D6UO3gOSBb\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-710385.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,3,3,7,5,2,4],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-541719.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,2,0,6],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-804292.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,0,3,0,3,5,3,1,6,0,1,10,0],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"25.5.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1003774634,\"moneyMax\":25094365850,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":817,\"serverGrowth\":70,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-854685.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"00111011\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-77029.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9CjtS6dWua06bHvuDI825kknzs312cm345lyi6I621V447CI6IN5Q431h754m2BA8218\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-969526.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"WWWWWWWWWWWWWjjjjjjnHHHHHHFFFFFFFFFFFzfffffffffooooooooothhhhhhhhhhhhz\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-934885.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[93,144,153,156,147,182,47,176,191,8,62,124,161,35,150,172,141,83,12,151,176,55,94,65,109,23,80],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"18.2.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":734638726,\"moneyMax\":18365968150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":678,\"serverGrowth\":58,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-565955-Sector12.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[1,10],[0,5],[4,7],[2,5],[6,8],[4,6],[3,11],[3,6],[0,3],[4,9],[2,5],[7,8],[3,10],[5,11],[5,6],[2,4],[1,11],[0,1],[0,8],[4,10],[5,10]]],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-873940-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[82,[1,2,3,5,6,8,9,10,12,13,14,16]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-223592.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"DD111111NNjjjjvvvvvvvvvyvvvvvvvvOnnIZzzzzzZZZZZZZMMMMMMMMM55WW11GGGGGGGGG44444xxV\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"83.7.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":522628172,\"moneyMax\":13065704300,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":491,\"serverGrowth\":51,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"69.0.5.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":618796590,\"moneyMax\":15469914750,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":552,\"serverGrowth\":51,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-181194.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1110100010000000000000000000101100111011100110001000001011110111\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-151916-Sector12.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"681695754\",55],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"21.5.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":354751742,\"moneyMax\":8868793550,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":419,\"serverGrowth\":46,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-416255.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"932350\",12],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-549494.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[44,[1,2,3,8,9,10,11,12,15,16]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-856790.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"DEBUG MEDIA TRASH CLOUD LOGIN\",8],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"55.4.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":184907907,\"moneyMax\":4622697675,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":378,\"serverGrowth\":38,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-998431-NiteSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,7],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"6.2.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"computek\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1029991824,\"moneyMax\":25749795600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":767,\"serverGrowth\":79,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-321903-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[154,12,126,35,175,5,110,27],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-467827.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"aHHmbHHmbU5AMxRg8cYJoMuQ6XjDLBuQ66J6R7yuR7W5VAhXW3VAhXW3tDMpTQmJQmeNmJQmeN\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"98.1.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":322702673,\"moneyMax\":8067566825,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":437,\"serverGrowth\":53,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-32963.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"1049851\",-86],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-806318.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"6tpcKLN534rKL671437Am772bV7582tZ5jF5R1518548GfKiEjN6671i\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-28327-Aevum.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[18,14,13,29,15,16,12,44,47,7,36,50],[4,33,40,29,34,48,2,17,44,40,48,19],[5,11,27,37,34,8,34,9,45,28,3,20],[35,46,27,3,35,49,7,4,35,6,32,28],[1,40,38,12,3,46,7,12,24,17,13,2],[12,15,15,42,23,42,43,18,5,31,17,15],[18,32,1,48,46,23,33,14,18,18,5,28],[8,48,21,41,15,32,31,45,22,15,28,19],[18,9,30,11,8,13,22,7,48,7,17,4],[3,45,7,27,11,27,46,5,8,44,18,14],[20,2,5,20,14,25,9,45,1,7,36,38],[13,24,49,47,8,10,30,35,43,5,1,41],[6,42,6,48,48,8,8,35,24,23,29,1]],\"reward\":{\"type\":0,\"name\":\"Aevum\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-135176.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"CLOUDENTERMEDIALOGINFLASH\",\"NETWORK\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-996181.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"OvOOvOOvOOkhEQO18888888188888D3Hi3Hi3HiPMjcPMjOX7mVndH6SL8zd8YQL8\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"99.0.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":413609197,\"moneyMax\":10340229925,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":620,\"serverGrowth\":60,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-502695.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MACRO ENTER CLOUD PRINT ARRAY\",12],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-604580-AlphaEnterprises.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))()))))\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-326896-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,0,0,4,3],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"30.8.6.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":478400182,\"moneyMax\":11960004550,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":446,\"serverGrowth\":46,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688010.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[168,12,113,128,90,143,101,126,178,117,164,153,153,165,64,102,196,80,23,35,158,95,106,176,71,76,48,173,17,138,14,81],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"64.7.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":198170757,\"moneyMax\":4954268925,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":312,\"serverGrowth\":53,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-664375.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[3,3,19,17,10,15,46,14,4,35,50,39,7],[7,13,25,15,47,10,22,30,30,33,19,35,6],[25,40,45,46,2,14,47,18,31,13,42,39,29],[22,8,36,40,45,12,37,17,34,47,24,47,33],[29,10,43,18,3,48,2,50,39,19,28,32,35],[41,30,1,19,39,18,48,34,21,14,34,5,47],[13,49,45,29,19,16,17,20,39,19,9,35,12],[37,2,45,25,33,10,20,38,19,37,46,37,12],[48,33,17,8,34,49,38,15,50,47,19,41,30],[8,10,1,49,31,21,35,34,34,9,4,25,30],[41,26,24,39,6,34,26,19,48,45,42,9,7],[37,37,28,37,7,48,28,34,37,24,45,19,28],[36,11,41,48,47,2,28,29,15,32,24,4,8],[34,30,29,41,19,49,10,34,44,12,47,23,24],[48,5,10,21,47,2,9,13,40,18,18,9,35]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-492240-NiteSec.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"INBOX TRASH MODEM SHIFT LINUX\",6],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-494870-AlphaEnterprises.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9bovsFj1uR03l2X739cr4Y63bZS01I357u8LSbZ0227pBNMxmx6193MBYxxxul0926UOhpjmZ\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"38.3.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":231539862,\"moneyMax\":5788496550,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":318,\"serverGrowth\":53,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-277522-TheBlackHand.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,0,2,6,0],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-70847-TheBlackHand.cct\",\"type\":\"Total Ways to Sum\",\"data\":20,\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-854452-AlphaEnterprises.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[2,9],[2,7],[3,8],[3,6],[0,7],[3,9],[3,5],[3,4],[3,7],[0,9],[2,4],[0,4]]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"97.9.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":382,\"serverGrowth\":45,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-105033-NiteSec.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[46,10,20,37,25,22,7,25],[15,27,22,6,14,9,16,18]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-197976-Sector12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0,0,1,0],[1,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,1,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-486207-TianDiHui.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"46707175\",-95],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-891256.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[1,1,0,0,0,0,1,1,1],[0,1,1,0,1,0,0,1,1],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0],[0,0,0,0,0,1,1,0,0],[1,0,0,0,1,1,0,0,0],[1,1,0,0,0,1,0,0,0],[0,1,1,0,0,0,0,0,0],[1,0,0,0,0,1,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-385811.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[93,[1,2,3,5,6,7,8,10]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-405295.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":70053662730,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-185548.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2104225121\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"69.0.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":83441966,\"moneyMax\":2086049150,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":299,\"serverGrowth\":54,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"68.8.2.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-340195.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,5],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-540557-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum\",\"data\":66,\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"13.3.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":7.615999999999993,\"minDifficulty\":3,\"moneyAvailable\":0,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-352506-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[188,21,12,60,141,103,1,43,65,56,96,84,58,44,27,173,104,131,91,31,168,119,133,83,130,176,100,104,81,198,43,17,134,163,30,70,147,77,143,195,20,89,77,69,167],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-861949.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[7,11],[0,3],[3,9],[1,11],[3,7],[2,10],[5,6],[1,10],[4,9],[5,8],[4,7],[0,11],[1,8],[0,6],[6,7],[5,10],[2,4]]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-79825.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":639592019,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-782140-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,6],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-756157-AlphaEnterprises.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"75125215226\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"20.5.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.2640000000000002,\"minDifficulty\":3,\"moneyAvailable\":6640.353308674992,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-224576.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1100000010000000010001110010100100111101001000101101111101110111\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-996587-AlphaEnterprises.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":531734338,\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-242744.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"PASTEEMAILQUEUEMOUSEINBOX\",\"COMPUTING\"],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"84.7.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.701999999999998,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-96570.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,2,0,0,0,8,7,4,8],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-506277-AlphaEnterprises.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":961241615,\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-626136-AlphaEnterprises.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"6WrtdP6WrtdCI7AqI7A88WI7A88WWI7A8WWAoNh7A8WWA30A30A30AJaA30A3LaA\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-153502.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[32,[1,3,4,8,9,10,11,12]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"64.2.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-257035.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"7JdrAwwR346rnRPmI925qcezm720912Em729eyNymnqvN06fOYTLO\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-985657-AlphaEnterprises.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[12,41,23,30,11,49,42,14,50,18,37,20,40,10,39],[24,26,31,8,6,23,49,3,7,46,6,18,12,44,29],[20,18,49,47,10,33,29,12,15,33,2,41,20,9,19]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-385267.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"7646d6dP461F359WrOghk0bX07D6G3rdf889hBI8q56dl09NavI64K3n361h856K4kKRy\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-353783-TheBlackHand.cct\",\"type\":\"Total Ways to Sum\",\"data\":72,\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"45.8.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-538115.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[96,36,41],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-562324.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"CLOUDMODEMVIRUSSHIFTFRAME\",\"BANDWIDTH\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"11.8.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-437870.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[0,10,-8,-8,-8,3,5,-1,-3,10,-10,-7,-9,-1,-6,-3,-5,0,-9,-7,-7,6,-1],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"64.0.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"computek\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-327587-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[164,85,167,199],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-274806.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[40,77,174,7,83,100,119,34,55,41,161,89,74,191,60,98,48,143,145,27,151,186,136,10]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-511022-AlphaEnterprises.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,1,1,0,0,1],[1,0,0,0,0,0,1,0,0,0,0,1],[1,0,0,0,0,0,0,0,1,0,0,0],[0,0,1,1,0,1,1,0,1,1,0,0],[0,1,0,0,0,1,0,0,0,0,0,1],[1,0,0,0,0,0,1,0,0,0,0,0],[0,1,1,0,0,0,0,0,0,0,0,0],[0,1,1,0,0,0,1,0,0,1,1,0]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"93.8.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-204832-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[131,18,108,99,162,141,19,149,43,102]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-624365-Sector12.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"LOGICVIRUSCLOUDTRASHSHIFT\",\"WIRELESS\"],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-401329.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"4444444444444z6xxxxxxxxxxxxxcc0000000zkkk3SSSSSsss66KKKKKKKEHHZZ0000000000M\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-365481.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2813224238\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"56.2.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-705040-AlphaEnterprises.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"QUEUESHELLPOPUPDEBUGLOGIC\",\"VERSION\"],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-69511-Sector12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,0,0,1,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,1],[0,0,0,1,0,1,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,1,0,0,1],[0,0,0,0,0,0,0,1,1,0,0],[0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-871089.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,10],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-142021.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[45,11,6,5,46,35,46,44,48,11],[32,4,15,40,37,24,6,48,43,13],[11,25,18,13,41,27,26,13,46,41],[9,34,17,30,26,6,26,34,39,46],[13,34,48,43,4,25,2,44,2,32],[46,22,1,18,4,29,39,4,20,8]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-955067.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,0,0,0],[0,0,0,0,1,0,0],[0,0,1,0,0,0,0],[0,0,1,1,0,1,1],[0,0,0,0,0,0,0],[0,0,0,0,1,0,1],[0,0,0,1,0,0,0],[0,1,0,0,1,0,0],[0,0,1,0,0,0,1],[1,0,0,0,0,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-327669.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[189,87,167,170,104,68,164,30,8,150,45,143],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-588576-AlphaEnterprises.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[165,[1,2,3,4,5,6,7,8,10,12,13,16]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"62.6.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"72.6.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-590668-AlphaEnterprises.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"23j528bhZhXwkl149QD2zH1WF6649f2IepL0RB09XncTucQNf02r411801jnp63B53615cYjt323m4B5252I8VT88\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-337970.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"TABLEARRAYMODEMENTERLOGIC\",\"WIRELESS\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-357238.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":105,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"32.2.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":29,\"minDifficulty\":10,\"moneyAvailable\":69824100,\"moneyMax\":1745602500,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":198,\"serverGrowth\":38,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-95329.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,2,3,2,3,1,2,3,1,1,3,2,6,6,2,0,3,1,5,0,4,1,2,1,3],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-463899.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2455820957\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"74.1.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":45105191,\"moneyMax\":1127629775,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":254,\"serverGrowth\":31,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-160868.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":186624534,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-16041.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":78,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-12542-NiteSec.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"TABLELINUXFLASHQUEUEPASTE\",\"DESKTOP\"],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-988101.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[162,89,111,84,143,161,60,26,198,13,61,114,79,94,183,141,145,171,103,161,175,32,2,75,57,58,45,119,33],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-379101.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"734260775747\",34],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-428037.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[25,1,28,15],[32,33,47,43]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"92.1.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"89.5.5.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":499,\"serverGrowth\":35,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-913800.cct\",\"type\":\"Array Jumping Game II\",\"data\":[0,1,3,2,3,3,4,0,4,1,4,5,1,1,0,4,2],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"75.6.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1027,\"serverGrowth\":59,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-917725-Sector12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[23,18,19,14,69,112,97,194,52,130,86,140,137,153,29,140,139,17,50,71,113,131,164,21,110,96,181,48,200,115,50,30,57,171,95,105,85,57,136,80,109,120,43,32,126,46,193,107],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-937085-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[2,9],[25,32],[24,31],[22,30],[11,18],[25,33],[2,8]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-132664-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[162,59,38,4,200,86],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"15.9.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":758,\"serverGrowth\":42,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-23411.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,4,5,3,4,0,1,6,7,4,0,5,6,0,0,10,2,3,6,4,0],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-953238.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[95,166,109,73,158,65,193,157,100,68,146,131,67,24,33,160,102,77,82]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-354604.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[23,29],[18,24],[14,19],[1,3],[12,18],[19,24]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"11.4.2.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":522,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-43784-AlphaEnterprises.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[2,7],[3,5],[4,8],[2,6],[1,4],[4,6],[3,7],[0,3],[2,5],[4,5],[1,2],[1,8],[1,3]]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"40.2.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"computek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":357,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"11.4.0.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":209,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-370209-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[54,165,39,25,10,154,67,196,72,88,189,100,124,147,186,90,39,71,184,80,199,160,129,130,68,19,46,24,54,130,112,167,25,90,129,90,45,112,190,100,197],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-1603-AlphaEnterprises.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"6MY28td256UizO1A671N5696QoYtR3QU743XXO344T45c81\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"43.4.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":527,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-170661-Aevum.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":16,\"reward\":{\"type\":0,\"name\":\"Aevum\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-890161-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,0,3,2],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-16680.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1100100000000000101000101010111101011110000111010000001001000111\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"20.4.6.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":51,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-495936-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[2,6,-2,-8,1,10,6],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-624332.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,1,1,0,0,0,0,1,0,0,1],[0,0,1,0,1,0,1,0,0,0,0],[1,0,1,0,0,0,0,0,1,0,0],[1,0,0,0,0,1,0,1,0,0,0],[0,0,0,0,1,1,1,0,0,0,1],[0,0,0,1,1,0,1,1,1,1,1],[0,1,0,0,0,1,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0,0],[1,0,1,0,0,1,1,1,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-999252-Aevum.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,10],\"reward\":{\"type\":0,\"name\":\"Aevum\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"80.9.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"97.6.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-889350.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[57,122,53,107,94,93,143,74,117,136,1,92,170,104,127,129,53,164,44,164,42,59,24,177,110,55,69,121,83,101,110,121,76,131,53,7,157,62,57,148,40,171,117,165,85,164,30],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-508167.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,2,2,3,3,2,1,0,2,4,4,2,3,3,5,0,1,0,5,5,0,4],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-963904.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,1,1,0,0,0,0,1],[0,0,1,0,0,1,0,1,0,1,0,1],[0,0,0,0,0,1,0,1,0,0,0,1],[1,1,0,0,1,1,0,0,0,0,0,0],[0,1,0,0,1,0,0,0,0,1,0,0],[0,1,1,0,1,1,1,0,1,0,1,0],[1,1,0,0,0,0,0,0,0,0,0,0],[1,0,1,0,0,1,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-721644-TheBlackHand.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[3,10],[1,10],[4,6],[6,7],[2,7],[2,8],[6,11],[5,9],[4,8],[1,4],[4,9],[7,9],[9,11],[1,5],[5,8],[8,10],[3,4],[0,9],[2,5],[3,7],[2,4]]],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"58.9.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"89.9.5.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"51.5.9.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"80.0.4.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"58.0.5.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"82.1.5.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"97.5.7.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"42.5.8.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"76.1.1.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"90.8.4.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"15.9.0.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"80.5.7.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"60.8.8.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"36.8.0.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"99.2.8.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"12.7.6.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"74.0.6.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"23.8.0.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"91.6.8.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"29.8.2.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"11.5.4.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"14.2.5.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"33.0.1.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"48.5.9.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"27.0.4.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-25\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-25\",\"httpPortOpen\":false,\"ip\":\"76.4.8.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\nimport { colors } from './hackLib';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} weakening ${target}`);\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            //ns.tprint(`INFO: ${ns.getHostname()} growing ${target}`);\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            ns.tprint(`${colors.Cyan}${ns.getHostname()}${colors.Reset} 👉 ${colors.Green}${target}${colors.Reset}`);\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFLdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQiwwREFBMEQ7SUFFMUQsbURBQW1EO0lBQ25ELDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxPQUFPLElBQUksRUFBRTtRQUNYLHVFQUF1RTtRQUN2RSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLDZEQUE2RDtZQUM3RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELDJEQUEyRDtZQUMzRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNMLHFCQUFxQjtZQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN6RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZFxyXG4vLyBtb2RpZmllZCAnZWFybHktaGFjay10ZW1wbGF0ZScgZnJvbSBiZWdpbm5lcidzIGd1aWRlXHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgY2F1c2luZyBhbiBlcnJvciwgd2hpY2ggaXMgZm9yY2luZyBtZSB0byB1c2UgOiBhbnkgaW5zdGVhZCBvZiBhIHN0cmluZ1xyXG5cclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2hhY2tMaWInO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gIC8vREVCVUc6IG5zLnRwcmludGYoYCR7bnMuZ2V0SG9zdG5hbWUoKX0gcmVwb3J0aW5nIGluLi4uYClcclxuICBcclxuICAvLyBEZWZpbmVzIHRoZSAndGFyZ2V0IHNlcnZlcicsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIC8vbnMudHByaW50KGBJTkZPOiAke25zLmdldEhvc3RuYW1lKCl9IHdlYWtlbmluZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgLy9ucy50cHJpbnQoYElORk86ICR7bnMuZ2V0SG9zdG5hbWUoKX0gZ3Jvd2luZyAke3RhcmdldH1gKTtcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIG5zLnRwcmludChgJHtjb2xvcnMuQ3lhbn0ke25zLmdldEhvc3RuYW1lKCl9JHtjb2xvcnMuUmVzZXR9IPCfkYkgJHtjb2xvcnMuR3JlZW59JHt0YXJnZXR9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-25\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.5529,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":133.2047578646272}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":31.1948,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":5.368,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":11.0158,\"playerReputation\":1019484.0952382593}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":3.4048,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":180.5321,\"isBanned\":false,\"isMember\":true,\"playerReputation\":6722348.09504197}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":163.246,\"isBanned\":false,\"isMember\":true,\"playerReputation\":6306000.574661612}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":137.7615,\"isBanned\":false,\"isMember\":true,\"playerReputation\":5180416.015236933}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":177.9003,\"isBanned\":false,\"isMember\":true,\"playerReputation\":6659417.265910199}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":31.8584,\"isBanned\":false,\"isMember\":true,\"playerReputation\":275333.3021527158}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":124.6529,\"isBanned\":false,\"isMember\":true,\"playerReputation\":5377763.289749219}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":162.4752,\"isBanned\":false,\"isMember\":true,\"playerReputation\":6288356.900181671}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":21080.77937817366,\"lastPrice\":21145.21283478962,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":false,\"otlkMag\":25.146163176336437,\"otlkMagForecast\":27.559100353285164,\"cap\":278267773,\"spreadPerc\":0.2,\"shareTxForMovement\":51778,\"shareTxUntilMovement\":51778,\"totalShares\":95400000,\"maxShares\":19100000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":107747.94536996573,\"lastPrice\":108143.14361793807,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":false,\"otlkMag\":12.210798065856219,\"otlkMagForecast\":37.5925370762089,\"cap\":187667005,\"spreadPerc\":0.4,\"shareTxForMovement\":69983,\"shareTxUntilMovement\":69983,\"totalShares\":78800000,\"maxShares\":15800000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":4359.006175250844,\"lastPrice\":4334.826007679724,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":6.609056589185852,\"otlkMagForecast\":42.748444287525686,\"cap\":136570755,\"spreadPerc\":0.2,\"shareTxForMovement\":80039,\"shareTxUntilMovement\":80039,\"totalShares\":75700000,\"maxShares\":15100000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":19943.66798884739,\"lastPrice\":19839.06716280831,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":14.98815445458947,\"otlkMagForecast\":64.04928862777189,\"cap\":95801348,\"spreadPerc\":0.5,\"shareTxForMovement\":44911,\"shareTxUntilMovement\":44911,\"totalShares\":147300000,\"maxShares\":29500000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":7704.8403545973415,\"lastPrice\":7744.286377540327,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":12.241780358922604,\"otlkMagForecast\":37.899707926925124,\"cap\":75508726,\"spreadPerc\":0.5,\"shareTxForMovement\":66876,\"shareTxUntilMovement\":66876,\"totalShares\":45700000,\"maxShares\":9100000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":69.192240941972,\"lastPrice\":68.65712173371703,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":false,\"otlkMag\":9.954645521933351,\"otlkMagForecast\":40.645025174775476,\"cap\":1634737766,\"spreadPerc\":0.3,\"shareTxForMovement\":39680,\"shareTxUntilMovement\":39680,\"totalShares\":28200000,\"maxShares\":5600000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":1379448.4319704175,\"lastPrice\":1387775.600168241,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":11.133103967880151,\"otlkMagForecast\":61.94181559189715,\"cap\":94032237,\"spreadPerc\":0.2,\"shareTxForMovement\":87550,\"shareTxUntilMovement\":87550,\"totalShares\":116400000,\"maxShares\":23300000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":298035.5983066348,\"lastPrice\":300813.9853633689,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":true,\"otlkMag\":6.337814738728066,\"otlkMagForecast\":52.46838979354393,\"cap\":372225781,\"spreadPerc\":1,\"shareTxForMovement\":52611,\"shareTxUntilMovement\":52611,\"totalShares\":61000000,\"maxShares\":12200000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":2421.2908279401313,\"lastPrice\":2405.66586459232,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":false,\"otlkMag\":6.498282706429077,\"otlkMagForecast\":43.091417758068374,\"cap\":114733606,\"spreadPerc\":0.8,\"shareTxForMovement\":73095,\"shareTxUntilMovement\":73095,\"totalShares\":49600000,\"maxShares\":9900000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":121356.93303368567,\"lastPrice\":120720.438510813,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":9.861442051020582,\"otlkMagForecast\":60.152324884738,\"cap\":200508316,\"spreadPerc\":0.6,\"shareTxForMovement\":104336,\"shareTxUntilMovement\":104336,\"totalShares\":86500000,\"maxShares\":17300000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":19151.095825156935,\"lastPrice\":19243.289038974242,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":8.92162308256757,\"otlkMagForecast\":57.66163119621902,\"cap\":182520696,\"spreadPerc\":0.2,\"shareTxForMovement\":95015,\"shareTxUntilMovement\":95015,\"totalShares\":58700000,\"maxShares\":11700000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":8240.260927268524,\"lastPrice\":8192.060746719872,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":8.778452913637855,\"otlkMagForecast\":59.85746261415366,\"cap\":148515409,\"spreadPerc\":0.2,\"shareTxForMovement\":68752,\"shareTxUntilMovement\":68752,\"totalShares\":86800000,\"maxShares\":17400000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":118179.14656600976,\"lastPrice\":118766.12072440906,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":10.132233060864039,\"otlkMagForecast\":61.539994079302836,\"cap\":94601770,\"spreadPerc\":0.5,\"shareTxForMovement\":56673,\"shareTxUntilMovement\":56673,\"totalShares\":33800000,\"maxShares\":6800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":15332.771863886677,\"lastPrice\":15398.382383410633,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":5.5613381982028915,\"otlkMagForecast\":43.7165983551042,\"cap\":287358749,\"spreadPerc\":0.2,\"shareTxForMovement\":48107,\"shareTxUntilMovement\":48107,\"totalShares\":50500000,\"maxShares\":10100000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":54235.11163684214,\"lastPrice\":54492.05476297321,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":5.366388196745087,\"otlkMagForecast\":56.25634704938033,\"cap\":295334360,\"spreadPerc\":0.8,\"shareTxForMovement\":86040,\"shareTxUntilMovement\":86040,\"totalShares\":47600000,\"maxShares\":9500000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":2824.8396604229356,\"lastPrice\":2839.0859744575746,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":9.336874460861875,\"otlkMagForecast\":59.608672363924384,\"cap\":10028410,\"spreadPerc\":1,\"shareTxForMovement\":112801,\"shareTxUntilMovement\":112801,\"totalShares\":72400000,\"maxShares\":14500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":12261.537367648272,\"lastPrice\":12196.300823953361,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":16.08061200268554,\"otlkMagForecast\":65.71376207701535,\"cap\":255104093,\"spreadPerc\":1.2,\"shareTxForMovement\":48388,\"shareTxUntilMovement\":48388,\"totalShares\":25800000,\"maxShares\":5200000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":1199.6544677612378,\"lastPrice\":1205.2462569044121,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":7.141317892941518,\"otlkMagForecast\":42.50585103117144,\"cap\":68371069,\"spreadPerc\":0.6,\"shareTxForMovement\":81201,\"shareTxUntilMovement\":81201,\"totalShares\":31400000,\"maxShares\":6300000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":2845.6380869346644,\"lastPrice\":2862.5986022511756,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":11.624570377184401,\"otlkMagForecast\":39.44886997401551,\"cap\":312023201,\"spreadPerc\":1,\"shareTxForMovement\":98226,\"shareTxUntilMovement\":98226,\"totalShares\":25200000,\"maxShares\":5000000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":116024.06294166498,\"lastPrice\":118151.83002992538,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.4,\"b\":true,\"otlkMag\":21.902154904904993,\"otlkMagForecast\":70.31809064779773,\"cap\":85810455,\"spreadPerc\":1.1,\"shareTxForMovement\":45806,\"shareTxUntilMovement\":45806,\"totalShares\":89000000,\"maxShares\":17800000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":8193.317157763906,\"lastPrice\":8266.567625797059,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.17,\"b\":false,\"otlkMag\":5.629155918341225,\"otlkMagForecast\":44.46173466015164,\"cap\":108151465,\"spreadPerc\":0.9,\"shareTxForMovement\":80336,\"shareTxUntilMovement\":80336,\"totalShares\":46500000,\"maxShares\":9300000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":16905.5269045764,\"lastPrice\":16977.867405881836,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":5.2759111593255525,\"otlkMagForecast\":44.56194013218893,\"cap\":64090318,\"spreadPerc\":0.7,\"shareTxForMovement\":91540,\"shareTxUntilMovement\":91540,\"totalShares\":51800000,\"maxShares\":10400000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":1129.8157746941263,\"lastPrice\":1112.8930118775634,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.99,\"b\":true,\"otlkMag\":9.091128802383546,\"otlkMagForecast\":60.24623275751039,\"cap\":19394108,\"spreadPerc\":0.7,\"shareTxForMovement\":73948,\"shareTxUntilMovement\":73948,\"totalShares\":29100000,\"maxShares\":5800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":112858.45542938125,\"lastPrice\":114169.27363930446,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.52,\"b\":true,\"otlkMag\":8.187163305321652,\"otlkMagForecast\":59.32760475291028,\"cap\":60782284,\"spreadPerc\":1.1,\"shareTxForMovement\":20984,\"shareTxUntilMovement\":20984,\"totalShares\":31100000,\"maxShares\":6200000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":135.77483301718772,\"lastPrice\":136.67744959513252,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":true,\"otlkMag\":10.897282208339679,\"otlkMagForecast\":58.669096772166476,\"cap\":18936574,\"spreadPerc\":1.2,\"shareTxForMovement\":122039,\"shareTxUntilMovement\":122039,\"totalShares\":145000000,\"maxShares\":29000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":5145.896172639197,\"lastPrice\":5042.63032807409,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.68,\"b\":false,\"otlkMag\":16.69816373367115,\"otlkMagForecast\":34.50113292578069,\"cap\":11252669,\"spreadPerc\":0.7,\"shareTxForMovement\":25852,\"shareTxUntilMovement\":25852,\"totalShares\":14900000,\"maxShares\":3000000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":15826.711404059373,\"lastPrice\":15940.391207124634,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.94,\"b\":false,\"otlkMag\":13.677247247879526,\"otlkMagForecast\":36.794237225036284,\"cap\":160832471,\"spreadPerc\":0.7,\"shareTxForMovement\":87128,\"shareTxUntilMovement\":87128,\"totalShares\":7500000,\"maxShares\":1500000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":6096.779714235535,\"lastPrice\":6131.720007253799,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":8.351000682783038,\"otlkMagForecast\":40.90238437881837,\"cap\":29167293,\"spreadPerc\":0.8,\"shareTxForMovement\":178856,\"shareTxUntilMovement\":178856,\"totalShares\":15800000,\"maxShares\":3200000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1058.3753779734814,\"lastPrice\":1047.7274588739294,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.33,\"b\":false,\"otlkMag\":6.407550086789793,\"otlkMagForecast\":42.13087677950603,\"cap\":73792281,\"spreadPerc\":1.3,\"shareTxForMovement\":44380,\"shareTxUntilMovement\":44380,\"totalShares\":9300000,\"maxShares\":1900000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":372289.1175781327,\"lastPrice\":365365.3291308702,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.48,\"b\":true,\"otlkMag\":9.146872798963404,\"otlkMagForecast\":60.017094282330504,\"cap\":5073026,\"spreadPerc\":1,\"shareTxForMovement\":49439,\"shareTxUntilMovement\":49439,\"totalShares\":46900000,\"maxShares\":9400000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":0.23461167417499026,\"lastPrice\":0.23721112973171243,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.45,\"b\":true,\"otlkMag\":7.164551560713722,\"otlkMagForecast\":55.57976510037833,\"cap\":15596724,\"spreadPerc\":0.8,\"shareTxForMovement\":36035,\"shareTxUntilMovement\":36035,\"totalShares\":83100000,\"maxShares\":16600000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":185467.3197954083,\"lastPrice\":184438.50022247861,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":8.897798551954034,\"otlkMagForecast\":38.025107762757145,\"cap\":261032194,\"spreadPerc\":0.5,\"shareTxForMovement\":106797,\"shareTxUntilMovement\":106797,\"totalShares\":12300000,\"maxShares\":2500000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":192421.003959294,\"lastPrice\":193229.6899907147,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":7.281412680991073,\"otlkMagForecast\":58.01700028783548,\"cap\":408307599,\"spreadPerc\":0.8,\"shareTxForMovement\":199193,\"shareTxUntilMovement\":199193,\"totalShares\":17800000,\"maxShares\":3600000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":43603,\"lastUpdate\":1698635079674,\"ticksUntilCycle\":24}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":180,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#E3B54A\",\"primary\":\"#CAA243\",\"primarydark\":\"#7E6937\",\"successlight\":\"#82FF82\",\"success\":\"#6FDA6F\",\"successdark\":\"#64C364\",\"errorlight\":\"#FD5555\",\"error\":\"#D84A4A\",\"errordark\":\"#AC3939\",\"secondarylight\":\"#D8D0B8\",\"secondary\":\"#B1AA95\",\"secondarydark\":\"#736E5E\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#111111\",\"white\":\"#fff\",\"black\":\"#070300\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#0A0A0E\",\"backgroundsecondary\":\"#0E0E10\",\"button\":\"#222222\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1615,\"y\":1171,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Consolas\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":true,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1698635079891","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}