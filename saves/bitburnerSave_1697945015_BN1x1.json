{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":926,\"strength\":1,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":127659696.54422031,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.6505191932437748,\"hacking_speed\":1.6422760120801292,\"hacking_money\":2.757950966849448,\"hacking_grow\":1.651665449065426,\"hacking\":2.3325175415590222,\"strength\":1.5195322131401916,\"defense\":1.3213323592523407,\"dexterity\":2.106071647412306,\"agility\":1.3873989772149578,\"charisma\":1.5855988311028089,\"hacking_exp\":2.011817310496231,\"strength_exp\":1.453465595177575,\"defense_exp\":1.453465595177575,\"dexterity_exp\":1.453465595177575,\"agility_exp\":1.453465595177575,\"charisma_exp\":1.453465595177575,\"company_rep\":1.3213323592523407,\"faction_rep\":1.3213323592523407,\"crime_money\":1.3213323592523407,\"crime_success\":1.3213323592523407,\"hacknet_node_money\":3.3325240849430835,\"hacknet_node_purchase_cost\":0.57896107261981,\"hacknet_node_ram_cost\":0.7568118596337385,\"hacknet_node_core_cost\":0.7568118596337385,\"hacknet_node_level_cost\":0.6432900806886778,\"work_money\":1.3213323592523407,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":28,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":31,\"name\":\"NeuroFlux Governor\"},{\"level\":32,\"name\":\"NeuroFlux Governor\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"NiteSec\"],\"factionInvitations\":[\"Sector-12\"],\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":10618195723.756685,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":29722856978.139698,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":10617195723.756685,\"work\":0,\"servers\":-22000000,\"other\":-63200000,\"augmentations\":-19020461254.382996}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-4,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":126445096518.91559,\"hacknet\":28657099743.547802,\"hacknet_expenses\":-8945377313.337729,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":48451479025.18514,\"work\":11265785.3217544,\"servers\":-8441964276.312332,\"other\":-627500000,\"augmentations\":-88647141432.47015}},\"playtimeSinceLastAug\":46270600,\"playtimeSinceLastBitnode\":952099200,\"lastAugReset\":1697898744142,\"lastNodeReset\":-1,\"purchasedServers\":[\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-25\"],\"scriptProdSinceLastAug\":29722856978.139698,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1696993342778},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1697002312401},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1697003975843},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1697004035834},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1697042616276},{\"ID\":\"TOR\",\"unlockedOn\":1697052216278},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1697124200234},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1697173256423},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1697174276424},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1697178716426},{\"ID\":\"FROZE\",\"unlockedOn\":1697506902150},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1697774759350},{\"ID\":\"TRAVEL\",\"unlockedOn\":1697776259361},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1697834840599},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1697837600601},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1697852480599},{\"ID\":\"NITESEC\",\"unlockedOn\":1697899461604}],\"terminalCommandHistory\":[\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"killall; run delete-server.js -a\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"killall; run delete-server.js -a\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"killall; run delete-server.js -a\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"killall; run delete-server.js -a\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"killall; run delete-server.js -a\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"killall; run delete-server.js -a\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"killall; run delete-server.js -a\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"killall; run delete-server.js -a\",\"run purchase-server.js my-first-hack.js joesguns 8\",\"killall; run delete-server.js -a\",\"run purchase-server.js my-first-hack.js joesguns 8\",\"killall; run delete-server.js -a\",\"run purchase-server.js my-first-hack.js joesguns 8\",\"killall; run delete-server.js -a\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"killall; run delete-server.js -a\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"killall; run delete-server.js -a\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"killall; run delete-server.js -a\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"scan-analyze 10\",\"backdoor\",\"ls\",\"backdoor\",\"home\",\"connect n00dles\",\"backdoor\",\"home\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"nano hack-servers.js \",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"connect darkweb\",\"buy -l\",\"buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy DeepscanV1.exe;\",\"buy DeepscanV2.exe \",\"buy autolink.exe\",\"home\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\",\"scan-analyze 10\",\"backdoor\",\"home; clear; killall; run hack-servers.js my-first-hack.js -h\"],\"lastUpdate\":1697945014598,\"lastSave\":1697944989604,\"totalPlaytime\":952099200,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":227975,\"factionWorkType\":\"hacking\",\"factionName\":\"NiteSec\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"103d6a1d75d61f\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"5.7.5.1\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"home\"}}],[\"colors.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d 10/11/23\\r\\n// colors found on reddit\\r\\nexport const colors = {\\r\\n    Black: '\\\\u001b[30m',\\r\\n    Red: '\\\\u001b[31m',\\r\\n    Green: '\\\\u001b[32m',\\r\\n    Yellow: '\\\\u001b[33m',\\r\\n    Blue: '\\\\u001b[34m',\\r\\n    Magenta: '\\\\u001b[35m',\\r\\n    Cyan: '\\\\u001b[36m',\\r\\n    White: '\\\\u001b[37m',\\r\\n    BrightBlack: '\\\\u001b[30;1m',\\r\\n    BrightRed: '\\\\u001b[31;1m',\\r\\n    BrightGreen: '\\\\u001b[32;1m',\\r\\n    BrightYellow: '\\\\u001b[33;1m',\\r\\n    BrightBlue: '\\\\u001b[34;1m',\\r\\n    BrightMagenta: '\\\\u001b[35;1m',\\r\\n    BrightCyan: '\\\\u001b[36;1m',\\r\\n    BrightWhite: '\\\\u001b[37;1m',\\r\\n    Reset: '\\\\u001b[0m',\\r\\n};\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFDN0IseUJBQXlCO0FBQ3pCLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRztJQUNsQixLQUFLLEVBQUUsWUFBWTtJQUNuQixHQUFHLEVBQUUsWUFBWTtJQUNqQixLQUFLLEVBQUUsWUFBWTtJQUNuQixNQUFNLEVBQUUsWUFBWTtJQUNwQixJQUFJLEVBQUUsWUFBWTtJQUNsQixPQUFPLEVBQUUsWUFBWTtJQUNyQixJQUFJLEVBQUUsWUFBWTtJQUNsQixLQUFLLEVBQUUsWUFBWTtJQUNuQixXQUFXLEVBQUUsY0FBYztJQUMzQixTQUFTLEVBQUUsY0FBYztJQUN6QixXQUFXLEVBQUUsY0FBYztJQUMzQixZQUFZLEVBQUUsY0FBYztJQUM1QixVQUFVLEVBQUUsY0FBYztJQUMxQixhQUFhLEVBQUUsY0FBYztJQUM3QixVQUFVLEVBQUUsY0FBYztJQUMxQixXQUFXLEVBQUUsY0FBYztJQUMzQixLQUFLLEVBQUUsV0FBVztDQUNyQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlZCBieSBqX19yMGQgMTAvMTEvMjNcclxuLy8gY29sb3JzIGZvdW5kIG9uIHJlZGRpdFxyXG5leHBvcnQgY29uc3QgY29sb3JzID0ge1xyXG4gICAgQmxhY2s6ICdcXHUwMDFiWzMwbScsXHJcbiAgICBSZWQ6ICdcXHUwMDFiWzMxbScsXHJcbiAgICBHcmVlbjogJ1xcdTAwMWJbMzJtJyxcclxuICAgIFllbGxvdzogJ1xcdTAwMWJbMzNtJyxcclxuICAgIEJsdWU6ICdcXHUwMDFiWzM0bScsXHJcbiAgICBNYWdlbnRhOiAnXFx1MDAxYlszNW0nLFxyXG4gICAgQ3lhbjogJ1xcdTAwMWJbMzZtJyxcclxuICAgIFdoaXRlOiAnXFx1MDAxYlszN20nLFxyXG4gICAgQnJpZ2h0QmxhY2s6ICdcXHUwMDFiWzMwOzFtJyxcclxuICAgIEJyaWdodFJlZDogJ1xcdTAwMWJbMzE7MW0nLFxyXG4gICAgQnJpZ2h0R3JlZW46ICdcXHUwMDFiWzMyOzFtJyxcclxuICAgIEJyaWdodFllbGxvdzogJ1xcdTAwMWJbMzM7MW0nLFxyXG4gICAgQnJpZ2h0Qmx1ZTogJ1xcdTAwMWJbMzQ7MW0nLFxyXG4gICAgQnJpZ2h0TWFnZW50YTogJ1xcdTAwMWJbMzU7MW0nLFxyXG4gICAgQnJpZ2h0Q3lhbjogJ1xcdTAwMWJbMzY7MW0nLFxyXG4gICAgQnJpZ2h0V2hpdGU6ICdcXHUwMDFiWzM3OzFtJyxcclxuICAgIFJlc2V0OiAnXFx1MDAxYlswbScsXHJcbn0iXX0=\",\"filename\":\"colors.js\",\"server\":\"home\"}}],[\"connected-servers-info.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(\\\"Connected servers:\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGVkLXNlcnZlcnMtaW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25uZWN0ZWQtc2VydmVycy1pbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLEVBQUUsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNwQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBhbnkpIHtcclxuICAgIG5zLnRwcmludChcIkNvbm5lY3RlZCBzZXJ2ZXJzOlwiKTtcclxufSJdfQ==\",\"filename\":\"connected-servers-info.js\",\"server\":\"home\"}}],[\"deploy-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from './colors';\\r\\n/**\\r\\n * @param {NS} ns\\r\\n * @param {string} hostname     target server's hostname\\r\\n * @param {string} hackToDeploy script to deploy\\r\\n * @param {string} hackTarget   hack target server's hostname\\r\\n *  */\\r\\nexport async function deployHack(ns, hostname, hackToDeploy, hackTarget = `joesguns`) {\\r\\n    ns.tprint(`INFO: deploying hack to server: ${colors.Cyan}${hostname}${colors.Reset}`);\\r\\n    ns.killall(hostname); // free up RAM\\r\\n    ns.scp(hackToDeploy, hostname); // always over-write the existing script with the latest version\\r\\n    let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n    ns.exec(hackToDeploy, hostname, ~~threadsToUse, hackTarget);\\r\\n    if (ns.scriptRunning(hackToDeploy, hostname))\\r\\n        ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads!`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZGVwbG95LWhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQzs7Ozs7TUFLTTtBQUNOLE1BQU0sQ0FBQyxLQUFLLFVBQVUsVUFBVSxDQUFDLEVBQU0sRUFBRSxRQUFnQixFQUFFLFlBQW9CLEVBQUUsYUFBcUIsVUFBVTtJQUM1RyxFQUFFLENBQUMsTUFBTSxDQUFDLG1DQUFtQyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUV0RixFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsY0FBYztJQUNwQyxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLGdFQUFnRTtJQUNoRyxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQy9ILEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRTVELElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDO1FBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxLQUFLLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJy4vY29sb3JzJztcclxuXHJcbi8qKiBcclxuICogQHBhcmFtIHtOU30gbnNcclxuICogQHBhcmFtIHtzdHJpbmd9IGhvc3RuYW1lICAgICB0YXJnZXQgc2VydmVyJ3MgaG9zdG5hbWUgICAgIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFja1RvRGVwbG95IHNjcmlwdCB0byBkZXBsb3lcclxuICogQHBhcmFtIHtzdHJpbmd9IGhhY2tUYXJnZXQgICBoYWNrIHRhcmdldCBzZXJ2ZXIncyBob3N0bmFtZVxyXG4gKiAgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlcGxveUhhY2sobnM6IE5TLCBob3N0bmFtZTogc3RyaW5nLCBoYWNrVG9EZXBsb3k6IHN0cmluZywgaGFja1RhcmdldDogc3RyaW5nID0gYGpvZXNndW5zYCkge1xyXG4gICAgbnMudHByaW50KGBJTkZPOiBkZXBsb3lpbmcgaGFjayB0byBzZXJ2ZXI6ICR7Y29sb3JzLkN5YW59JHtob3N0bmFtZX0ke2NvbG9ycy5SZXNldH1gKTtcclxuXHJcbiAgICBucy5raWxsYWxsKGhvc3RuYW1lKTsgLy8gZnJlZSB1cCBSQU1cclxuICAgIG5zLnNjcChoYWNrVG9EZXBsb3ksIGhvc3RuYW1lKTsgLy8gYWx3YXlzIG92ZXItd3JpdGUgdGhlIGV4aXN0aW5nIHNjcmlwdCB3aXRoIHRoZSBsYXRlc3QgdmVyc2lvblxyXG4gICAgbGV0IHRocmVhZHNUb1VzZSA9IE1hdGgubWF4KDEsIChucy5nZXRTZXJ2ZXJNYXhSYW0oaG9zdG5hbWUpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShob3N0bmFtZSkpIC8gbnMuZ2V0U2NyaXB0UmFtKGhhY2tUb0RlcGxveSkpO1xyXG4gICAgbnMuZXhlYyhoYWNrVG9EZXBsb3ksIGhvc3RuYW1lLCB+fnRocmVhZHNUb1VzZSwgaGFja1RhcmdldCk7XHJcbiAgICBcclxuICAgIGlmIChucy5zY3JpcHRSdW5uaW5nKGhhY2tUb0RlcGxveSwgaG9zdG5hbWUpKSBucy50cHJpbnQoYElORk86IC4uLmhhY2sgZGVwbG95ZWQgdXNpbmcgJHtjb2xvcnMuTWFnZW50YX0ke35+dGhyZWFkc1RvVXNlfSR7Y29sb3JzLlJlc2V0fSB0aHJlYWRzIWApO1xyXG59Il19\",\"filename\":\"deploy-hack.js\",\"server\":\"home\"}}],[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"home\"}}],[\"scan-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from './colors';\\r\\n/** @param {NS} ns Netscript namespace */\\r\\nexport async function main(ns) {\\r\\n    // for testing in bitburner Terminal\\r\\n    let depth = ns.args[0].toString() || 3;\\r\\n    let serverList = await buildScannedServerList(ns, ~~depth);\\r\\n    ns.tprintf(`found ${colors.Cyan}${serverList.length}${colors.Reset} servers`);\\r\\n    ns.tprintf(`${colors.Cyan}${serverList}${colors.Reset}`);\\r\\n}\\r\\n/**\\r\\n * I gave Copilot this comment block and asked it to write the function for me, using what existing code I had as a base, so it would use the canAddServer function.\\r\\n *\\r\\n * if list is empty, do a scan(), which runs scan on home server and make a list of all scannedServers\\r\\n * add scannedServers to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done one scan and serverAdd\\r\\n * check that depth > 0\\r\\n * scan each of the serverList servers to get neighborsList and add neighborsList to scannedServers\\r\\n * add neighborsList to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done another scan\\r\\n * scan each of the neighborsList servers to get secondNeighborsList and add secondNeighborsList to scannedServers\\r\\n * add secondNeighborsList to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done another scan\\r\\n * if depth is ever 0, return serverList\\r\\n */\\r\\n/**\\r\\n * @remarks This function is a recursive function that scans servers to a given tree depth and returns a list of all servers to hack.\\r\\n * @param {NS} ns\\r\\n * @param depth scan depth; defaults to 1\\r\\n * @param serverList [Optional] running list of servers (is returned at end of recursion)\\r\\n * @param scannedServers [Optional] list of servers already scanned\\r\\n * @returns Array of all servers found up to specified depth.  The server hostnames in the returned array are string values.\\r\\n */\\r\\nexport async function buildScannedServerList(ns, depth, serverList = [], scannedServers = []) {\\r\\n    if (serverList.length === 0) {\\r\\n        scannedServers = ns.scan();\\r\\n        serverList = scannedServers.filter(server => canAddServer(server, serverList));\\r\\n        --depth;\\r\\n    }\\r\\n    while (depth > 0) {\\r\\n        const newServers = [];\\r\\n        for (const server of serverList) {\\r\\n            const neighbors = await ns.scan(server);\\r\\n            const newNeighbors = neighbors.filter(server => canAddServer(server, serverList.concat(newServers)));\\r\\n            newServers.push(...newNeighbors);\\r\\n            scannedServers.push(...newNeighbors);\\r\\n        }\\r\\n        serverList.push(...newServers);\\r\\n        --depth;\\r\\n    }\\r\\n    return serverList;\\r\\n}\\r\\n/**\\r\\n * the following function was created by Copilot after I asked a few questions about a better way to do this.\\r\\n * below was my attempt....clearly I wasn't thinking in the same direction at all,\\r\\n * however copilot _did_ use this code to generate its own code.\\r\\nexport function canAddServer(serverName: string, serverListName: string[]) {\\r\\n    if (!(serverListName.includes(serverName)) || !(serverName == 'home' || 'darkweb') || !serverName.includes('pserv')) {\\r\\n        return true;\\r\\n    }\\r\\n    else {\\r\\n        return false;\\r\\n    }\\r\\n};\\r\\n*/\\r\\n/**\\r\\n *\\r\\n * @param serverHostname Name of server to check against forbidden servers and prefixes\\r\\n * @param serverListName List of servers to check against for duplicates\\r\\n * @returns\\r\\n */\\r\\nexport function canAddServer(serverHostname, serverListName) {\\r\\n    const forbiddenServers = ['home', 'darkweb'];\\r\\n    const forbiddenServerPrefixes = ['pserv-'];\\r\\n    const isForbiddenServer = forbiddenServers.some(forbiddenServer => forbiddenServer === serverHostname);\\r\\n    const isForbiddenServerPrefix = forbiddenServerPrefixes.some(prefix => serverHostname.startsWith(prefix));\\r\\n    const isDuplicateServer = serverListName.includes(serverHostname);\\r\\n    return !isForbiddenServer && !isDuplicateServer && !isForbiddenServerPrefix;\\r\\n}\\r\\n;\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi1zZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NjYW4tc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxDLHlDQUF5QztBQUN6QyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLG9DQUFvQztJQUNwQyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxJQUFJLFVBQVUsR0FBRyxNQUFNLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLE1BQU0sQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQTtJQUM3RSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDN0QsQ0FBQztBQUdEOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBRUg7Ozs7Ozs7R0FPRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsc0JBQXNCLENBQUMsRUFBTSxFQUFFLEtBQWEsRUFBRSxhQUF1QixFQUFFLEVBQUUsaUJBQTJCLEVBQUU7SUFDeEgsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN6QixjQUFjLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzNCLFVBQVUsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQy9FLEVBQUUsS0FBSyxDQUFDO0tBQ1g7SUFFRCxPQUFPLEtBQUssR0FBRyxDQUFDLEVBQUU7UUFDZCxNQUFNLFVBQVUsR0FBYSxFQUFFLENBQUM7UUFFaEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxVQUFVLEVBQUU7WUFDN0IsTUFBTSxTQUFTLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JHLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQztZQUNqQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUM7U0FDeEM7UUFFRCxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDL0IsRUFBRSxLQUFLLENBQUM7S0FDWDtJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3RCLENBQUM7QUFJRDs7Ozs7Ozs7Ozs7O0VBWUU7QUFFRjs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsY0FBc0IsRUFBRSxjQUF3QjtJQUN6RSxNQUFNLGdCQUFnQixHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUUzQyxNQUFNLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLGVBQWUsS0FBSyxjQUFjLENBQUMsQ0FBQztJQUN2RyxNQUFNLHVCQUF1QixHQUFHLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMxRyxNQUFNLGlCQUFpQixHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFbEUsT0FBTyxDQUFDLGlCQUFpQixJQUFJLENBQUMsaUJBQWlCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztBQUNoRixDQUFDO0FBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkIDEwLzEyLzIzXHJcbi8vIHNjYW5zIGFsbCBzZXJ2ZXJzIGFuZCBidWlsZHMgYSBsaXN0IG9mIHNlcnZlcnMgdG8gaGFja1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJy4vY29sb3JzJztcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyBOZXRzY3JpcHQgbmFtZXNwYWNlICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgLy8gZm9yIHRlc3RpbmcgaW4gYml0YnVybmVyIFRlcm1pbmFsXHJcbiAgICBsZXQgZGVwdGggPSBucy5hcmdzWzBdLnRvU3RyaW5nKCkgfHwgMztcclxuICAgIGxldCBzZXJ2ZXJMaXN0ID0gYXdhaXQgYnVpbGRTY2FubmVkU2VydmVyTGlzdChucywgfn5kZXB0aCk7XHJcbiAgICBucy50cHJpbnRmKGBmb3VuZCAke2NvbG9ycy5DeWFufSR7c2VydmVyTGlzdC5sZW5ndGh9JHtjb2xvcnMuUmVzZXR9IHNlcnZlcnNgKVxyXG4gICAgbnMudHByaW50ZihgJHtjb2xvcnMuQ3lhbn0ke3NlcnZlckxpc3R9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogSSBnYXZlIENvcGlsb3QgdGhpcyBjb21tZW50IGJsb2NrIGFuZCBhc2tlZCBpdCB0byB3cml0ZSB0aGUgZnVuY3Rpb24gZm9yIG1lLCB1c2luZyB3aGF0IGV4aXN0aW5nIGNvZGUgSSBoYWQgYXMgYSBiYXNlLCBzbyBpdCB3b3VsZCB1c2UgdGhlIGNhbkFkZFNlcnZlciBmdW5jdGlvbi5cclxuICogXHJcbiAqIGlmIGxpc3QgaXMgZW1wdHksIGRvIGEgc2NhbigpLCB3aGljaCBydW5zIHNjYW4gb24gaG9tZSBzZXJ2ZXIgYW5kIG1ha2UgYSBsaXN0IG9mIGFsbCBzY2FubmVkU2VydmVyc1xyXG4gKiBhZGQgc2Nhbm5lZFNlcnZlcnMgdG8gc2VydmVyTGlzdCBpZiB0aGV5IGNhbiBiZSBhZGRlZCAobm90IGZvcmJpZGRlbiwgbm90IGEgZHVwbGljYXRlLCBub3QgYSBwcmVmaXgpXHJcbiAqIGRlY3JlYXNlIGRlcHRoIGJlY2F1c2Ugd2UndmUgZG9uZSBvbmUgc2NhbiBhbmQgc2VydmVyQWRkXHJcbiAqIGNoZWNrIHRoYXQgZGVwdGggPiAwXHJcbiAqIHNjYW4gZWFjaCBvZiB0aGUgc2VydmVyTGlzdCBzZXJ2ZXJzIHRvIGdldCBuZWlnaGJvcnNMaXN0IGFuZCBhZGQgbmVpZ2hib3JzTGlzdCB0byBzY2FubmVkU2VydmVyc1xyXG4gKiBhZGQgbmVpZ2hib3JzTGlzdCB0byBzZXJ2ZXJMaXN0IGlmIHRoZXkgY2FuIGJlIGFkZGVkIChub3QgZm9yYmlkZGVuLCBub3QgYSBkdXBsaWNhdGUsIG5vdCBhIHByZWZpeClcclxuICogZGVjcmVhc2UgZGVwdGggYmVjYXVzZSB3ZSd2ZSBkb25lIGFub3RoZXIgc2NhblxyXG4gKiBzY2FuIGVhY2ggb2YgdGhlIG5laWdoYm9yc0xpc3Qgc2VydmVycyB0byBnZXQgc2Vjb25kTmVpZ2hib3JzTGlzdCBhbmQgYWRkIHNlY29uZE5laWdoYm9yc0xpc3QgdG8gc2Nhbm5lZFNlcnZlcnNcclxuICogYWRkIHNlY29uZE5laWdoYm9yc0xpc3QgdG8gc2VydmVyTGlzdCBpZiB0aGV5IGNhbiBiZSBhZGRlZCAobm90IGZvcmJpZGRlbiwgbm90IGEgZHVwbGljYXRlLCBub3QgYSBwcmVmaXgpXHJcbiAqIGRlY3JlYXNlIGRlcHRoIGJlY2F1c2Ugd2UndmUgZG9uZSBhbm90aGVyIHNjYW5cclxuICogaWYgZGVwdGggaXMgZXZlciAwLCByZXR1cm4gc2VydmVyTGlzdFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAcmVtYXJrcyBUaGlzIGZ1bmN0aW9uIGlzIGEgcmVjdXJzaXZlIGZ1bmN0aW9uIHRoYXQgc2NhbnMgc2VydmVycyB0byBhIGdpdmVuIHRyZWUgZGVwdGggYW5kIHJldHVybnMgYSBsaXN0IG9mIGFsbCBzZXJ2ZXJzIHRvIGhhY2suXHJcbiAqIEBwYXJhbSB7TlN9IG5zIFxyXG4gKiBAcGFyYW0gZGVwdGggc2NhbiBkZXB0aDsgZGVmYXVsdHMgdG8gMVxyXG4gKiBAcGFyYW0gc2VydmVyTGlzdCBbT3B0aW9uYWxdIHJ1bm5pbmcgbGlzdCBvZiBzZXJ2ZXJzIChpcyByZXR1cm5lZCBhdCBlbmQgb2YgcmVjdXJzaW9uKVxyXG4gKiBAcGFyYW0gc2Nhbm5lZFNlcnZlcnMgW09wdGlvbmFsXSBsaXN0IG9mIHNlcnZlcnMgYWxyZWFkeSBzY2FubmVkXHJcbiAqIEByZXR1cm5zIEFycmF5IG9mIGFsbCBzZXJ2ZXJzIGZvdW5kIHVwIHRvIHNwZWNpZmllZCBkZXB0aC4gIFRoZSBzZXJ2ZXIgaG9zdG5hbWVzIGluIHRoZSByZXR1cm5lZCBhcnJheSBhcmUgc3RyaW5nIHZhbHVlcy4gXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnVpbGRTY2FubmVkU2VydmVyTGlzdChuczogTlMsIGRlcHRoOiBudW1iZXIsIHNlcnZlckxpc3Q6IHN0cmluZ1tdID0gW10sIHNjYW5uZWRTZXJ2ZXJzOiBzdHJpbmdbXSA9IFtdKSB7XHJcbiAgICBpZiAoc2VydmVyTGlzdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBzY2FubmVkU2VydmVycyA9IG5zLnNjYW4oKTtcclxuICAgICAgICBzZXJ2ZXJMaXN0ID0gc2Nhbm5lZFNlcnZlcnMuZmlsdGVyKHNlcnZlciA9PiBjYW5BZGRTZXJ2ZXIoc2VydmVyLCBzZXJ2ZXJMaXN0KSk7XHJcbiAgICAgICAgLS1kZXB0aDtcclxuICAgIH1cclxuXHJcbiAgICB3aGlsZSAoZGVwdGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgbmV3U2VydmVyczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBzZXJ2ZXIgb2Ygc2VydmVyTGlzdCkge1xyXG4gICAgICAgICAgICBjb25zdCBuZWlnaGJvcnMgPSBhd2FpdCBucy5zY2FuKHNlcnZlcik7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld05laWdoYm9ycyA9IG5laWdoYm9ycy5maWx0ZXIoc2VydmVyID0+IGNhbkFkZFNlcnZlcihzZXJ2ZXIsIHNlcnZlckxpc3QuY29uY2F0KG5ld1NlcnZlcnMpKSk7XHJcbiAgICAgICAgICAgIG5ld1NlcnZlcnMucHVzaCguLi5uZXdOZWlnaGJvcnMpO1xyXG4gICAgICAgICAgICBzY2FubmVkU2VydmVycy5wdXNoKC4uLm5ld05laWdoYm9ycyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXJ2ZXJMaXN0LnB1c2goLi4ubmV3U2VydmVycyk7XHJcbiAgICAgICAgLS1kZXB0aDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2VydmVyTGlzdDtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogdGhlIGZvbGxvd2luZyBmdW5jdGlvbiB3YXMgY3JlYXRlZCBieSBDb3BpbG90IGFmdGVyIEkgYXNrZWQgYSBmZXcgcXVlc3Rpb25zIGFib3V0IGEgYmV0dGVyIHdheSB0byBkbyB0aGlzLlxyXG4gKiBiZWxvdyB3YXMgbXkgYXR0ZW1wdC4uLi5jbGVhcmx5IEkgd2Fzbid0IHRoaW5raW5nIGluIHRoZSBzYW1lIGRpcmVjdGlvbiBhdCBhbGwsXHJcbiAqIGhvd2V2ZXIgY29waWxvdCBfZGlkXyB1c2UgdGhpcyBjb2RlIHRvIGdlbmVyYXRlIGl0cyBvd24gY29kZS5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbkFkZFNlcnZlcihzZXJ2ZXJOYW1lOiBzdHJpbmcsIHNlcnZlckxpc3ROYW1lOiBzdHJpbmdbXSkge1xyXG4gICAgaWYgKCEoc2VydmVyTGlzdE5hbWUuaW5jbHVkZXMoc2VydmVyTmFtZSkpIHx8ICEoc2VydmVyTmFtZSA9PSAnaG9tZScgfHwgJ2Rhcmt3ZWInKSB8fCAhc2VydmVyTmFtZS5pbmNsdWRlcygncHNlcnYnKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59OyBcclxuKi9cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHNlcnZlckhvc3RuYW1lIE5hbWUgb2Ygc2VydmVyIHRvIGNoZWNrIGFnYWluc3QgZm9yYmlkZGVuIHNlcnZlcnMgYW5kIHByZWZpeGVzXHJcbiAqIEBwYXJhbSBzZXJ2ZXJMaXN0TmFtZSBMaXN0IG9mIHNlcnZlcnMgdG8gY2hlY2sgYWdhaW5zdCBmb3IgZHVwbGljYXRlc1xyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjYW5BZGRTZXJ2ZXIoc2VydmVySG9zdG5hbWU6IHN0cmluZywgc2VydmVyTGlzdE5hbWU6IHN0cmluZ1tdKSB7XHJcbiAgICBjb25zdCBmb3JiaWRkZW5TZXJ2ZXJzID0gWydob21lJywgJ2Rhcmt3ZWInXTtcclxuICAgIGNvbnN0IGZvcmJpZGRlblNlcnZlclByZWZpeGVzID0gWydwc2Vydi0nXTtcclxuXHJcbiAgICBjb25zdCBpc0ZvcmJpZGRlblNlcnZlciA9IGZvcmJpZGRlblNlcnZlcnMuc29tZShmb3JiaWRkZW5TZXJ2ZXIgPT4gZm9yYmlkZGVuU2VydmVyID09PSBzZXJ2ZXJIb3N0bmFtZSk7XHJcbiAgICBjb25zdCBpc0ZvcmJpZGRlblNlcnZlclByZWZpeCA9IGZvcmJpZGRlblNlcnZlclByZWZpeGVzLnNvbWUocHJlZml4ID0+IHNlcnZlckhvc3RuYW1lLnN0YXJ0c1dpdGgocHJlZml4KSk7XHJcbiAgICBjb25zdCBpc0R1cGxpY2F0ZVNlcnZlciA9IHNlcnZlckxpc3ROYW1lLmluY2x1ZGVzKHNlcnZlckhvc3RuYW1lKTtcclxuXHJcbiAgICByZXR1cm4gIWlzRm9yYmlkZGVuU2VydmVyICYmICFpc0R1cGxpY2F0ZVNlcnZlciAmJiAhaXNGb3JiaWRkZW5TZXJ2ZXJQcmVmaXg7XHJcbn07XHJcblxyXG5cclxuIl19\",\"filename\":\"scan-servers.js\",\"server\":\"home\"}}],[\"open-ports.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from './colors';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let hostname = ns.args[0]?.toString();\\r\\n    openPorts(ns, hostname);\\r\\n}\\r\\n/**\\r\\n * @remarks This function opens a specified number of ports on a server.\\r\\n * @param ns\\r\\n * @param hostname server's hostname\\r\\n * @returns\\r\\n */\\r\\nexport async function openPorts(ns, hostname) {\\r\\n    const programs = [\\r\\n        `brutessh.exe`,\\r\\n        `ftpcrack.exe`,\\r\\n        `relaysmtp.exe`,\\r\\n        `httpworm.exe`,\\r\\n        `sqlinject.exe`\\r\\n    ];\\r\\n    const maxPorts = programs.length;\\r\\n    const portsRequired = ns.getServerNumPortsRequired(hostname);\\r\\n    for (let i = 0; i < portsRequired && i < maxPorts; i++) {\\r\\n        //ns.tprint(`INFO: ...opening port ${colors.Magenta}${i+1}${colors.Reset}...`); // i+1 because ports are 1-indexed\\r\\n        try {\\r\\n            if (ns.fileExists(programs[i])) {\\r\\n                switch (i) {\\r\\n                    case 0:\\r\\n                        ns.brutessh(hostname);\\r\\n                        break;\\r\\n                    case 1:\\r\\n                        ns.ftpcrack(hostname);\\r\\n                        break;\\r\\n                    case 2:\\r\\n                        ns.relaysmtp(hostname);\\r\\n                        break;\\r\\n                    case 3:\\r\\n                        ns.httpworm(hostname);\\r\\n                        break;\\r\\n                    case 4:\\r\\n                        ns.sqlinject(hostname);\\r\\n                        break;\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                throw (`${colors.Yellow}${programs[i]}${colors.Reset} unavailable, cannot open port ${colors.Magenta}${i + 1}${colors.Reset}`);\\r\\n            }\\r\\n        }\\r\\n        catch (err) {\\r\\n            ns.tprint(`ERROR: ${err} ...aborting`);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Blbi1wb3J0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9vcGVuLXBvcnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUN0QyxTQUFTLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsU0FBUyxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNwRCxNQUFNLFFBQVEsR0FBRztRQUNiLGNBQWM7UUFDZCxjQUFjO1FBQ2QsZUFBZTtRQUNmLGNBQWM7UUFDZCxlQUFlO0tBQ2xCLENBQUM7SUFDRixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQ2pDLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsYUFBYSxJQUFJLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEQsa0hBQWtIO1FBQ2xILElBQUk7WUFDQSxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzVCLFFBQVEsQ0FBQyxFQUFFO29CQUNQLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN0QixNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN0QixNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN2QixNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN0QixNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN2QixNQUFNO2lCQUNiO2FBQ0o7aUJBQU07Z0JBQ0gsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssa0NBQWtDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUNoSTtTQUNKO1FBQUMsT0FBTSxHQUFHLEVBQUU7WUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxjQUFjLENBQUMsQ0FBQztZQUN2QyxPQUFPO1NBQ1Y7S0FDSjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZCAxMC8xNi8yM1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJy4vY29sb3JzJztcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIGxldCBob3N0bmFtZSA9IG5zLmFyZ3NbMF0/LnRvU3RyaW5nKCk7XHJcbiAgICBvcGVuUG9ydHMobnMsIGhvc3RuYW1lKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIFRoaXMgZnVuY3Rpb24gb3BlbnMgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIHBvcnRzIG9uIGEgc2VydmVyLiBcclxuICogQHBhcmFtIG5zIFxyXG4gKiBAcGFyYW0gaG9zdG5hbWUgc2VydmVyJ3MgaG9zdG5hbWVcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gb3BlblBvcnRzKG5zOiBOUywgaG9zdG5hbWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgcHJvZ3JhbXMgPSBbXHJcbiAgICAgICAgYGJydXRlc3NoLmV4ZWAsXHJcbiAgICAgICAgYGZ0cGNyYWNrLmV4ZWAsXHJcbiAgICAgICAgYHJlbGF5c210cC5leGVgLFxyXG4gICAgICAgIGBodHRwd29ybS5leGVgLFxyXG4gICAgICAgIGBzcWxpbmplY3QuZXhlYFxyXG4gICAgXTtcclxuICAgIGNvbnN0IG1heFBvcnRzID0gcHJvZ3JhbXMubGVuZ3RoO1xyXG4gICAgY29uc3QgcG9ydHNSZXF1aXJlZCA9IG5zLmdldFNlcnZlck51bVBvcnRzUmVxdWlyZWQoaG9zdG5hbWUpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3J0c1JlcXVpcmVkICYmIGkgPCBtYXhQb3J0czsgaSsrKSB7XHJcbiAgICAgICAgLy9ucy50cHJpbnQoYElORk86IC4uLm9wZW5pbmcgcG9ydCAke2NvbG9ycy5NYWdlbnRhfSR7aSsxfSR7Y29sb3JzLlJlc2V0fS4uLmApOyAvLyBpKzEgYmVjYXVzZSBwb3J0cyBhcmUgMS1pbmRleGVkXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKG5zLmZpbGVFeGlzdHMocHJvZ3JhbXNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5zLmJydXRlc3NoKGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBucy5mdHBjcmFjayhob3N0bmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMucmVsYXlzbXRwKGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBucy5odHRwd29ybShob3N0bmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuc3FsaW5qZWN0KGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyAoYCR7Y29sb3JzLlllbGxvd30ke3Byb2dyYW1zW2ldfSR7Y29sb3JzLlJlc2V0fSB1bmF2YWlsYWJsZSwgY2Fubm90IG9wZW4gcG9ydCAke2NvbG9ycy5NYWdlbnRhfSR7aSsxfSR7Y29sb3JzLlJlc2V0fWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgICAgICAgbnMudHByaW50KGBFUlJPUjogJHtlcnJ9IC4uLmFib3J0aW5nYCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=\",\"filename\":\"open-ports.js\",\"server\":\"home\"}}],[\"hack-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d 10/11/23\\r\\nimport { colors } from './colors';\\r\\nimport { buildScannedServerList } from './scan-servers';\\r\\nimport { openPorts } from './open-ports';\\r\\nimport { deployHack } from './deploy-hack';\\r\\n/**\\r\\n * @param {NS} ns Netscript namespace\\r\\n */\\r\\n/**\\r\\n * TODO: write a logger script that will log all the things - might be unnecessary?  i'm only after a better way to format the terminal output\\r\\n * TODO: properly calculate hack target -- from Documentation/beginner's guide:\\r\\n *      `your hacking target should be the  with highest max money that's required hacking level is under 1/2 of your hacking level.`\\r\\n *      `Keep security level low. Security level affects everything when hacking. Two important Netscript functions for this are getServerSecurityLevel() and getServerMinSecurityLevel()`\\r\\n * TODO: instead of a bunch of helper scripts, make a Library of helper functions (ie: hackLib.openPorts(ns, hostname))\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    const hackToDeploy = ns.args[0]?.toString();\\r\\n    let scanDepth = 3;\\r\\n    if (ns.fileExists(`DeepscanV1.exe`))\\r\\n        scanDepth = 5;\\r\\n    if (ns.fileExists(`DeepscanV2.exe`))\\r\\n        scanDepth = 10;\\r\\n    ns.tprint(`INFO: hack initiated...`);\\r\\n    if (hackToDeploy) {\\r\\n        const serverList = await buildScannedServerList(ns, scanDepth);\\r\\n        ns.tprint(`INFO: found ${colors.Cyan}${serverList.length}${colors.Reset} servers during scan of depth ${colors.Magenta}${scanDepth}${colors.Reset}...`);\\r\\n        ns.tprint(`INFO: selecting best 🎯 server...`);\\r\\n        const hackTarget = `joesguns`; //serverWithMostMoney(ns, serverList); --need to account for hacking level, and choose the best server that has high money but low hacking level\\r\\n        ns.tprint(`INFO: ...${colors.Green}${hackTarget}${colors.Reset} selected!`);\\r\\n        ns.tprint(`INFO: attempting to hack servers...`);\\r\\n        serverList.forEach((hostname) => {\\r\\n            if (!ns.hasRootAccess(hostname)) {\\r\\n                ns.tprint(`WARN: ${colors.Cyan}${hostname}${colors.Reset} does not have root access. attempting root...`);\\r\\n                openPorts(ns, hostname);\\r\\n                try {\\r\\n                    ns.nuke(hostname);\\r\\n                    ns.tprint(`INFO: ...💣 successful. root access granted!`);\\r\\n                }\\r\\n                catch {\\r\\n                    ns.tprint(`ERROR: ...root access denied! ❌ cannot hack ${colors.Cyan}${hostname}${colors.Reset}!`);\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                deployHack(ns, hostname, hackToDeploy, hackTarget);\\r\\n            }\\r\\n        });\\r\\n        // check for existing purchased servers and start them, or purchase them if they don't exist and there's enough money\\r\\n        ns.tprint(`INFO: checking for purchased servers...`);\\r\\n        const ramToPurchase = 16;\\r\\n        if (ns.getPurchasedServers().length === 0) {\\r\\n            ns.tprint(`INFO: ...no purchased servers found. checking for available monies...`);\\r\\n            if (ns.getServerMoneyAvailable(`home`) > (ns.getPurchasedServerCost(ramToPurchase) * ns.getPurchasedServerLimit())) {\\r\\n                ns.tprint(`INFO: enough monies secured; attempting to purchase servers...`);\\r\\n                const pid = ns.run(`purchase-server.js`, 1, hackToDeploy, hackTarget, ramToPurchase);\\r\\n                while (ns.isRunning(pid)) {\\r\\n                    await ns.sleep(100);\\r\\n                }\\r\\n                ;\\r\\n            }\\r\\n            else {\\r\\n                ns.tprint(`ERROR: not enough monies to purchase servers! keep hacking...`);\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            ns.tprint(`INFO: found purchased servers; deploying hack...`);\\r\\n            ns.run(`start-purchased-servers.js`, 1, hackToDeploy, hackTarget);\\r\\n        }\\r\\n        if (ns.args.includes(`-h`))\\r\\n            ns.run(`start-home-server.js`, 1, hackToDeploy, hackTarget, `-k`);\\r\\n        else\\r\\n            ns.tprint(`INFO: skipping home server. use 2nd arg '-h' to include home server in hacktivities.`);\\r\\n        ns.toast(`hacks deployed!`);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`ERROR: no hack script to deploy. include script name! use 2nd arg '-h' to include home server in hacktivities.`);\\r\\n    }\\r\\n    ;\\r\\n}\\r\\n/**\\r\\n * @remarks If the money available on the current server is greater than the money available on the accumulator server,\\r\\n * @remarks the callback function returns the name of the current server (b), otherwise it returns the name of the accumulator server (a).\\r\\n * @remarks This process continues until all servers in the array have been compared, at which point the name of the server with the highest amount of money available is returned.\\r\\n * @param ns Netscript namespace\\r\\n * @param serverList List of scanned servers\\r\\n * @returns The server hostname that has the most money available, the server hostname will be a string.\\r\\n */\\r\\nconst serverWithMostMoney = (ns, serverList) => {\\r\\n    const servers = serverList.filter((server) => server !== `home` && !/pserv-\\\\d/.test(server));\\r\\n    return servers.reduce((accumulator, currentValue) => {\\r\\n        return ns.getServerMoneyAvailable(currentValue) > ns.getServerMoneyAvailable(accumulator)\\r\\n            ? currentValue\\r\\n            : accumulator;\\r\\n    });\\r\\n};\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1zZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhY2stc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFDN0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0M7O0dBRUc7QUFFSDs7Ozs7O0dBTUc7QUFFSCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sWUFBWSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFHcEQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUFFLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDbkQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDO1FBQUUsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUVwRCxFQUFFLENBQUMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDckMsSUFBSSxZQUFZLEVBQUU7UUFDZCxNQUFNLFVBQVUsR0FBRyxNQUFNLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMvRCxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsTUFBTSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLGlDQUFpQyxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQztRQUV4SixFQUFFLENBQUMsTUFBTSxDQUFDLG1DQUFtQyxDQUFDLENBQUE7UUFDOUMsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLENBQUMsZ0pBQWdKO1FBQy9LLEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxNQUFNLENBQUMsS0FBSyxHQUFHLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxZQUFZLENBQUMsQ0FBQztRQUU1RSxFQUFFLENBQUMsTUFBTSxDQUFDLHFDQUFxQyxDQUFDLENBQUM7UUFDakQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWdCLEVBQUUsRUFBRTtZQUNwQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDN0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLGdEQUFnRCxDQUFDLENBQUM7Z0JBQzFHLFNBQVMsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ3hCLElBQUk7b0JBQ0EsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO2lCQUM3RDtnQkFDRCxNQUFNO29CQUNGLEVBQUUsQ0FBQyxNQUFNLENBQUMsK0NBQStDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2lCQUN0RzthQUNKO2lCQUNJO2dCQUNELFVBQVUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQzthQUN0RDtRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgscUhBQXFIO1FBQ3JILEVBQUUsQ0FBQyxNQUFNLENBQUMseUNBQXlDLENBQUMsQ0FBQTtRQUNwRCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3ZDLEVBQUUsQ0FBQyxNQUFNLENBQUMsdUVBQXVFLENBQUMsQ0FBQTtZQUNsRixJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxFQUFFO2dCQUNoSCxFQUFFLENBQUMsTUFBTSxDQUFDLGdFQUFnRSxDQUFDLENBQUE7Z0JBQzNFLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUE7Z0JBQ3BGLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7aUJBQUM7Z0JBQUEsQ0FBQzthQUNwRDtpQkFDSTtnQkFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLCtEQUErRCxDQUFDLENBQUM7YUFDOUU7U0FDSjthQUFNO1lBQ0gsRUFBRSxDQUFDLE1BQU0sQ0FBQyxrREFBa0QsQ0FBQyxDQUFBO1lBQzdELEVBQUUsQ0FBQyxHQUFHLENBQUMsNEJBQTRCLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNyRTtRQUdELElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQzs7WUFDekYsRUFBRSxDQUFDLE1BQU0sQ0FBQyxzRkFBc0YsQ0FBQyxDQUFDO1FBRXZHLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztLQUMvQjtTQUNJO1FBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnSEFBZ0gsQ0FBQyxDQUFDO0tBQy9IO0lBQUEsQ0FBQztBQUNOLENBQUM7QUFHRDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEVBQU0sRUFBRSxVQUFlLEVBQUUsRUFBRTtJQUNwRCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3JHLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQW1CLEVBQUUsWUFBb0IsRUFBRSxFQUFFO1FBQ2hFLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLENBQUM7WUFDckYsQ0FBQyxDQUFDLFlBQVk7WUFDZCxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ3RCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlZCBieSBqX19yMGQgMTAvMTEvMjNcclxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnLi9jb2xvcnMnO1xyXG5pbXBvcnQgeyBidWlsZFNjYW5uZWRTZXJ2ZXJMaXN0IH0gZnJvbSAnLi9zY2FuLXNlcnZlcnMnO1xyXG5pbXBvcnQgeyBvcGVuUG9ydHMgfSBmcm9tICcuL29wZW4tcG9ydHMnO1xyXG5pbXBvcnQgeyBkZXBsb3lIYWNrIH0gZnJvbSAnLi9kZXBsb3ktaGFjayc7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJztcclxuLyoqIFxyXG4gKiBAcGFyYW0ge05TfSBucyBOZXRzY3JpcHQgbmFtZXNwYWNlXHJcbiAqL1xyXG5cclxuLyoqIFxyXG4gKiBUT0RPOiB3cml0ZSBhIGxvZ2dlciBzY3JpcHQgdGhhdCB3aWxsIGxvZyBhbGwgdGhlIHRoaW5ncyAtIG1pZ2h0IGJlIHVubmVjZXNzYXJ5PyAgaSdtIG9ubHkgYWZ0ZXIgYSBiZXR0ZXIgd2F5IHRvIGZvcm1hdCB0aGUgdGVybWluYWwgb3V0cHV0XHJcbiAqIFRPRE86IHByb3Blcmx5IGNhbGN1bGF0ZSBoYWNrIHRhcmdldCAtLSBmcm9tIERvY3VtZW50YXRpb24vYmVnaW5uZXIncyBndWlkZTogXHJcbiAqICAgICAgYHlvdXIgaGFja2luZyB0YXJnZXQgc2hvdWxkIGJlIHRoZSAgd2l0aCBoaWdoZXN0IG1heCBtb25leSB0aGF0J3MgcmVxdWlyZWQgaGFja2luZyBsZXZlbCBpcyB1bmRlciAxLzIgb2YgeW91ciBoYWNraW5nIGxldmVsLmBcclxuICogICAgICBgS2VlcCBzZWN1cml0eSBsZXZlbCBsb3cuIFNlY3VyaXR5IGxldmVsIGFmZmVjdHMgZXZlcnl0aGluZyB3aGVuIGhhY2tpbmcuIFR3byBpbXBvcnRhbnQgTmV0c2NyaXB0IGZ1bmN0aW9ucyBmb3IgdGhpcyBhcmUgZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCgpIGFuZCBnZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKClgXHJcbiAqIFRPRE86IGluc3RlYWQgb2YgYSBidW5jaCBvZiBoZWxwZXIgc2NyaXB0cywgbWFrZSBhIExpYnJhcnkgb2YgaGVscGVyIGZ1bmN0aW9ucyAoaWU6IGhhY2tMaWIub3BlblBvcnRzKG5zLCBob3N0bmFtZSkpXHJcbiAqL1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBjb25zdCBoYWNrVG9EZXBsb3k6IHN0cmluZyA9IG5zLmFyZ3NbMF0/LnRvU3RyaW5nKCk7XHJcblxyXG5cclxuICAgIGxldCBzY2FuRGVwdGggPSAzO1xyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoYERlZXBzY2FuVjEuZXhlYCkpIHNjYW5EZXB0aCA9IDU7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhgRGVlcHNjYW5WMi5leGVgKSkgc2NhbkRlcHRoID0gMTA7XHJcblxyXG4gICAgbnMudHByaW50KGBJTkZPOiBoYWNrIGluaXRpYXRlZC4uLmApO1xyXG4gICAgaWYgKGhhY2tUb0RlcGxveSkge1xyXG4gICAgICAgIGNvbnN0IHNlcnZlckxpc3QgPSBhd2FpdCBidWlsZFNjYW5uZWRTZXJ2ZXJMaXN0KG5zLCBzY2FuRGVwdGgpO1xyXG4gICAgICAgIG5zLnRwcmludChgSU5GTzogZm91bmQgJHtjb2xvcnMuQ3lhbn0ke3NlcnZlckxpc3QubGVuZ3RofSR7Y29sb3JzLlJlc2V0fSBzZXJ2ZXJzIGR1cmluZyBzY2FuIG9mIGRlcHRoICR7Y29sb3JzLk1hZ2VudGF9JHtzY2FuRGVwdGh9JHtjb2xvcnMuUmVzZXR9Li4uYCk7XHJcblxyXG4gICAgICAgIG5zLnRwcmludChgSU5GTzogc2VsZWN0aW5nIGJlc3Qg8J+OryBzZXJ2ZXIuLi5gKVxyXG4gICAgICAgIGNvbnN0IGhhY2tUYXJnZXQgPSBgam9lc2d1bnNgOyAvL3NlcnZlcldpdGhNb3N0TW9uZXkobnMsIHNlcnZlckxpc3QpOyAtLW5lZWQgdG8gYWNjb3VudCBmb3IgaGFja2luZyBsZXZlbCwgYW5kIGNob29zZSB0aGUgYmVzdCBzZXJ2ZXIgdGhhdCBoYXMgaGlnaCBtb25leSBidXQgbG93IGhhY2tpbmcgbGV2ZWxcclxuICAgICAgICBucy50cHJpbnQoYElORk86IC4uLiR7Y29sb3JzLkdyZWVufSR7aGFja1RhcmdldH0ke2NvbG9ycy5SZXNldH0gc2VsZWN0ZWQhYCk7XHJcblxyXG4gICAgICAgIG5zLnRwcmludChgSU5GTzogYXR0ZW1wdGluZyB0byBoYWNrIHNlcnZlcnMuLi5gKTtcclxuICAgICAgICBzZXJ2ZXJMaXN0LmZvckVhY2goKGhvc3RuYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFucy5oYXNSb290QWNjZXNzKGhvc3RuYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgbnMudHByaW50KGBXQVJOOiAke2NvbG9ycy5DeWFufSR7aG9zdG5hbWV9JHtjb2xvcnMuUmVzZXR9IGRvZXMgbm90IGhhdmUgcm9vdCBhY2Nlc3MuIGF0dGVtcHRpbmcgcm9vdC4uLmApO1xyXG4gICAgICAgICAgICAgICAgb3BlblBvcnRzKG5zLCBob3N0bmFtZSk7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLm51a2UoaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnRwcmludChgSU5GTzogLi4u8J+SoyBzdWNjZXNzZnVsLiByb290IGFjY2VzcyBncmFudGVkIWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2gge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnRwcmludChgRVJST1I6IC4uLnJvb3QgYWNjZXNzIGRlbmllZCEg4p2MIGNhbm5vdCBoYWNrICR7Y29sb3JzLkN5YW59JHtob3N0bmFtZX0ke2NvbG9ycy5SZXNldH0hYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZXBsb3lIYWNrKG5zLCBob3N0bmFtZSwgaGFja1RvRGVwbG95LCBoYWNrVGFyZ2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBjaGVjayBmb3IgZXhpc3RpbmcgcHVyY2hhc2VkIHNlcnZlcnMgYW5kIHN0YXJ0IHRoZW0sIG9yIHB1cmNoYXNlIHRoZW0gaWYgdGhleSBkb24ndCBleGlzdCBhbmQgdGhlcmUncyBlbm91Z2ggbW9uZXlcclxuICAgICAgICBucy50cHJpbnQoYElORk86IGNoZWNraW5nIGZvciBwdXJjaGFzZWQgc2VydmVycy4uLmApXHJcbiAgICAgICAgY29uc3QgcmFtVG9QdXJjaGFzZSA9IDEwMjQ7XHJcbiAgICAgICAgaWYgKG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgbnMudHByaW50KGBJTkZPOiAuLi5ubyBwdXJjaGFzZWQgc2VydmVycyBmb3VuZC4gY2hlY2tpbmcgZm9yIGF2YWlsYWJsZSBtb25pZXMuLi5gKVxyXG4gICAgICAgICAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoYGhvbWVgKSA+IChucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KHJhbVRvUHVyY2hhc2UpICogbnMuZ2V0UHVyY2hhc2VkU2VydmVyTGltaXQoKSkpIHtcclxuICAgICAgICAgICAgICAgIG5zLnRwcmludChgSU5GTzogZW5vdWdoIG1vbmllcyBzZWN1cmVkOyBhdHRlbXB0aW5nIHRvIHB1cmNoYXNlIHNlcnZlcnMuLi5gKVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGlkID0gbnMucnVuKGBwdXJjaGFzZS1zZXJ2ZXIuanNgLCAxLCBoYWNrVG9EZXBsb3ksIGhhY2tUYXJnZXQsIHJhbVRvUHVyY2hhc2UpXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobnMuaXNSdW5uaW5nKHBpZCkpIHsgYXdhaXQgbnMuc2xlZXAoMTAwKX07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBucy50cHJpbnQoYEVSUk9SOiBub3QgZW5vdWdoIG1vbmllcyB0byBwdXJjaGFzZSBzZXJ2ZXJzISBrZWVwIGhhY2tpbmcuLi5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChgSU5GTzogZm91bmQgcHVyY2hhc2VkIHNlcnZlcnM7IGRlcGxveWluZyBoYWNrLi4uYClcclxuICAgICAgICAgICAgbnMucnVuKGBzdGFydC1wdXJjaGFzZWQtc2VydmVycy5qc2AsIDEsIGhhY2tUb0RlcGxveSwgaGFja1RhcmdldCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKG5zLmFyZ3MuaW5jbHVkZXMoYC1oYCkpIG5zLnJ1bihgc3RhcnQtaG9tZS1zZXJ2ZXIuanNgLCAxLCBoYWNrVG9EZXBsb3ksIGhhY2tUYXJnZXQsIGAta2ApO1xyXG4gICAgICAgIGVsc2UgbnMudHByaW50KGBJTkZPOiBza2lwcGluZyBob21lIHNlcnZlci4gdXNlIDJuZCBhcmcgJy1oJyB0byBpbmNsdWRlIGhvbWUgc2VydmVyIGluIGhhY2t0aXZpdGllcy5gKTtcclxuXHJcbiAgICAgICAgbnMudG9hc3QoYGhhY2tzIGRlcGxveWVkIWApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbnMudHByaW50KGBFUlJPUjogbm8gaGFjayBzY3JpcHQgdG8gZGVwbG95LiBpbmNsdWRlIHNjcmlwdCBuYW1lISB1c2UgMm5kIGFyZyAnLWgnIHRvIGluY2x1ZGUgaG9tZSBzZXJ2ZXIgaW4gaGFja3Rpdml0aWVzLmApO1xyXG4gICAgfTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBAcmVtYXJrcyBJZiB0aGUgbW9uZXkgYXZhaWxhYmxlIG9uIHRoZSBjdXJyZW50IHNlcnZlciBpcyBncmVhdGVyIHRoYW4gdGhlIG1vbmV5IGF2YWlsYWJsZSBvbiB0aGUgYWNjdW11bGF0b3Igc2VydmVyLCBcclxuICogQHJlbWFya3MgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHJldHVybnMgdGhlIG5hbWUgb2YgdGhlIGN1cnJlbnQgc2VydmVyIChiKSwgb3RoZXJ3aXNlIGl0IHJldHVybnMgdGhlIG5hbWUgb2YgdGhlIGFjY3VtdWxhdG9yIHNlcnZlciAoYSkuIFxyXG4gKiBAcmVtYXJrcyBUaGlzIHByb2Nlc3MgY29udGludWVzIHVudGlsIGFsbCBzZXJ2ZXJzIGluIHRoZSBhcnJheSBoYXZlIGJlZW4gY29tcGFyZWQsIGF0IHdoaWNoIHBvaW50IHRoZSBuYW1lIG9mIHRoZSBzZXJ2ZXIgd2l0aCB0aGUgaGlnaGVzdCBhbW91bnQgb2YgbW9uZXkgYXZhaWxhYmxlIGlzIHJldHVybmVkLlxyXG4gKiBAcGFyYW0gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZVxyXG4gKiBAcGFyYW0gc2VydmVyTGlzdCBMaXN0IG9mIHNjYW5uZWQgc2VydmVyc1xyXG4gKiBAcmV0dXJucyBUaGUgc2VydmVyIGhvc3RuYW1lIHRoYXQgaGFzIHRoZSBtb3N0IG1vbmV5IGF2YWlsYWJsZSwgdGhlIHNlcnZlciBob3N0bmFtZSB3aWxsIGJlIGEgc3RyaW5nLlxyXG4gKi9cclxuY29uc3Qgc2VydmVyV2l0aE1vc3RNb25leSA9IChuczogTlMsIHNlcnZlckxpc3Q6IGFueSkgPT4ge1xyXG4gICAgY29uc3Qgc2VydmVycyA9IHNlcnZlckxpc3QuZmlsdGVyKChzZXJ2ZXI6IHN0cmluZykgPT4gc2VydmVyICE9PSBgaG9tZWAgJiYgIS9wc2Vydi1cXGQvLnRlc3Qoc2VydmVyKSk7XHJcbiAgICByZXR1cm4gc2VydmVycy5yZWR1Y2UoKGFjY3VtdWxhdG9yOiBzdHJpbmcsIGN1cnJlbnRWYWx1ZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKGN1cnJlbnRWYWx1ZSkgPiBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShhY2N1bXVsYXRvcilcclxuICAgICAgICAgICAgPyBjdXJyZW50VmFsdWVcclxuICAgICAgICAgICAgOiBhY2N1bXVsYXRvcjtcclxuICAgIH0pO1xyXG59OyJdfQ==\",\"filename\":\"hack-servers.js\",\"server\":\"home\"}}],[\"purchase-server-8gb.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // How much RAM each purchased server will have. In this case, it'll\\r\\n    // be 8GB.\\r\\n    const ram = 8;\\r\\n    // Iterator we'll use for our loop\\r\\n    let i = 1; // changed to 1 by j__r0d because 1 is a better place to start than 0 for this counter\\r\\n    // Continuously try to purchase servers until we've reached the maximum\\r\\n    // amount of servers\\r\\n    while (i < ns.getPurchasedServerLimit()) {\\r\\n        // Check if we have enough money to purchase a server\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\r\\n            // If we have enough money, then:\\r\\n            //  1. Purchase the server\\r\\n            //  2. Copy our hacking script onto the newly-purchased server\\r\\n            //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n            //  4. Increment our iterator to indicate that we've bought a new server\\r\\n            let hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n            ns.scp(\\\"early-hack-template.js\\\", hostname);\\r\\n            ns.exec(\\\"early-hack-template.js\\\", hostname, 3);\\r\\n            ++i;\\r\\n        }\\r\\n        //Make the script wait for a second before looping again.\\r\\n        //Removing this line will cause an infinite loop and crash the game.\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2Utc2VydmVyLThnYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wdXJjaGFzZS1zZXJ2ZXItOGdiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLG9FQUFvRTtJQUNwRSxVQUFVO0lBQ1YsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBRWQsa0NBQWtDO0lBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLHNGQUFzRjtJQUVqRyx1RUFBdUU7SUFDdkUsb0JBQW9CO0lBQ3BCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1FBQ3JDLHFEQUFxRDtRQUNyRCxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckUsaUNBQWlDO1lBQ2pDLDBCQUEwQjtZQUMxQiw4REFBOEQ7WUFDOUQsMEVBQTBFO1lBQzFFLHdFQUF3RTtZQUN4RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDcEQsRUFBRSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUMzQyxFQUFFLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQyxFQUFFLENBQUMsQ0FBQztTQUNQO1FBQ0QseURBQXlEO1FBQ3pELG9FQUFvRTtRQUNwRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDeEI7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdGhlIGNvbnRlbnRzIG9mIHRoaXMgc2NyaXB0IGNhbWUgZnJvbSB0aGUgQmVnaW5uZXIncyBHdWlkZSBpbiB0aGUgZ2FtZSdzIGRvY3VtZW50YXRpb24uLi5cclxuaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIC8vIEhvdyBtdWNoIFJBTSBlYWNoIHB1cmNoYXNlZCBzZXJ2ZXIgd2lsbCBoYXZlLiBJbiB0aGlzIGNhc2UsIGl0J2xsXHJcbiAgICAvLyBiZSA4R0IuXHJcbiAgICBjb25zdCByYW0gPSA4O1xyXG5cclxuICAgIC8vIEl0ZXJhdG9yIHdlJ2xsIHVzZSBmb3Igb3VyIGxvb3BcclxuICAgIGxldCBpID0gMTsgLy8gY2hhbmdlZCB0byAxIGJ5IGpfX3IwZCBiZWNhdXNlIDEgaXMgYSBiZXR0ZXIgcGxhY2UgdG8gc3RhcnQgdGhhbiAwIGZvciB0aGlzIGNvdW50ZXJcclxuXHJcbiAgICAvLyBDb250aW51b3VzbHkgdHJ5IHRvIHB1cmNoYXNlIHNlcnZlcnMgdW50aWwgd2UndmUgcmVhY2hlZCB0aGUgbWF4aW11bVxyXG4gICAgLy8gYW1vdW50IG9mIHNlcnZlcnNcclxuICAgIHdoaWxlIChpIDwgbnMuZ2V0UHVyY2hhc2VkU2VydmVyTGltaXQoKSkge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgZW5vdWdoIG1vbmV5IHRvIHB1cmNoYXNlIGEgc2VydmVyXHJcbiAgICAgICAgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKFwiaG9tZVwiKSA+IG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QocmFtKSkge1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGVub3VnaCBtb25leSwgdGhlbjpcclxuICAgICAgICAgICAgLy8gIDEuIFB1cmNoYXNlIHRoZSBzZXJ2ZXJcclxuICAgICAgICAgICAgLy8gIDIuIENvcHkgb3VyIGhhY2tpbmcgc2NyaXB0IG9udG8gdGhlIG5ld2x5LXB1cmNoYXNlZCBzZXJ2ZXJcclxuICAgICAgICAgICAgLy8gIDMuIFJ1biBvdXIgaGFja2luZyBzY3JpcHQgb24gdGhlIG5ld2x5LXB1cmNoYXNlZCBzZXJ2ZXIgd2l0aCAzIHRocmVhZHNcclxuICAgICAgICAgICAgLy8gIDQuIEluY3JlbWVudCBvdXIgaXRlcmF0b3IgdG8gaW5kaWNhdGUgdGhhdCB3ZSd2ZSBib3VnaHQgYSBuZXcgc2VydmVyXHJcbiAgICAgICAgICAgIGxldCBob3N0bmFtZSA9IG5zLnB1cmNoYXNlU2VydmVyKFwicHNlcnYtXCIgKyBpLCByYW0pO1xyXG4gICAgICAgICAgICBucy5zY3AoXCJlYXJseS1oYWNrLXRlbXBsYXRlLmpzXCIsIGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgbnMuZXhlYyhcImVhcmx5LWhhY2stdGVtcGxhdGUuanNcIiwgaG9zdG5hbWUsIDMpO1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vTWFrZSB0aGUgc2NyaXB0IHdhaXQgZm9yIGEgc2Vjb25kIGJlZm9yZSBsb29waW5nIGFnYWluLlxyXG4gICAgICAgIC8vUmVtb3ZpbmcgdGhpcyBsaW5lIHdpbGwgY2F1c2UgYW4gaW5maW5pdGUgbG9vcCBhbmQgY3Jhc2ggdGhlIGdhbWUuXHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XHJcbiAgICB9XHJcbn0iXX0=\",\"filename\":\"purchase-server-8gb.js\",\"server\":\"home\"}}],[\"start-home-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from './colors';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(`INFO: deploying hack on ${colors.Cyan}home${colors.Reset} server...`);\\r\\n    const hackToDeploy = ns.args[0]?.toString();\\r\\n    const hackTarget = ns.args[1]?.toString();\\r\\n    const killallFlag = ns.args[2]?.toString() === '-k';\\r\\n    let hostname = 'home';\\r\\n    if (killallFlag)\\r\\n        ns.killall();\\r\\n    let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n    ns.run(hackToDeploy, ~~threadsToUse, hackTarget);\\r\\n    if (ns.scriptRunning(hackToDeploy, 'home'))\\r\\n        ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtaG9tZS1zZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RhcnQtaG9tZS1zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLDJCQUEyQixNQUFNLENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLFlBQVksQ0FBQyxDQUFDO0lBQ2pGLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDNUMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUMxQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQztJQUNwRCxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFDdEIsSUFBSSxXQUFXO1FBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDL0gsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0NBQWdDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQztBQUNwSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlZCBieSBqX19yMGQgMTAvMTEvMjNcclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2NvbG9ycyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50cHJpbnQoYElORk86IGRlcGxveWluZyBoYWNrIG9uICR7Y29sb3JzLkN5YW59aG9tZSR7Y29sb3JzLlJlc2V0fSBzZXJ2ZXIuLi5gKTtcclxuICAgIGNvbnN0IGhhY2tUb0RlcGxveSA9IG5zLmFyZ3NbMF0/LnRvU3RyaW5nKCk7IFxyXG4gICAgY29uc3QgaGFja1RhcmdldCA9IG5zLmFyZ3NbMV0/LnRvU3RyaW5nKCk7XHJcbiAgICBjb25zdCBraWxsYWxsRmxhZyA9IG5zLmFyZ3NbMl0/LnRvU3RyaW5nKCkgPT09ICctayc7XHJcbiAgICBsZXQgaG9zdG5hbWUgPSAnaG9tZSc7XHJcbiAgICBpZiAoa2lsbGFsbEZsYWcpIG5zLmtpbGxhbGwoKTtcclxuICAgIGxldCB0aHJlYWRzVG9Vc2UgPSBNYXRoLm1heCgxLCAobnMuZ2V0U2VydmVyTWF4UmFtKGhvc3RuYW1lKSAtIG5zLmdldFNlcnZlclVzZWRSYW0oaG9zdG5hbWUpKSAvIG5zLmdldFNjcmlwdFJhbShoYWNrVG9EZXBsb3kpKTtcclxuICAgIG5zLnJ1bihoYWNrVG9EZXBsb3ksIH5+dGhyZWFkc1RvVXNlLCBoYWNrVGFyZ2V0KTtcclxuICAgIGlmIChucy5zY3JpcHRSdW5uaW5nKGhhY2tUb0RlcGxveSwgJ2hvbWUnKSkgbnMudHByaW50KGBJTkZPOiAuLi5oYWNrIGRlcGxveWVkIHVzaW5nICR7Y29sb3JzLk1hZ2VudGF9JHt+fnRocmVhZHNUb1VzZX0ke2NvbG9ycy5SZXNldH0gdGhyZWFkc2ApO1xyXG59Il19\",\"filename\":\"start-home-server.js\",\"server\":\"home\"}}],[\"start-purchased-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from './colors';\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint('INFO: deploying hack on purchased servers...');\\r\\n    const hackToDeploy = ns.args[0].toString();\\r\\n    const hackTarget = ns.args[1].toString();\\r\\n    let hackedCount = 0;\\r\\n    let i = 1;\\r\\n    // TODO: ack okay this could be easier using ns.getPurchasedServers() ...\\r\\n    while (i < ns.getPurchasedServerLimit()) {\\r\\n        let hostname = `pserv-`.concat(i.toString());\\r\\n        ns.killall(hostname);\\r\\n        let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n        ns.scp(hackToDeploy, hostname);\\r\\n        ns.exec(hackToDeploy, hostname, ~~threadsToUse, hackTarget);\\r\\n        if (ns.scriptRunning(hackToDeploy, hostname)) {\\r\\n            ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads on ${colors.Cyan}${hostname}${colors.Reset}`);\\r\\n            ++hackedCount;\\r\\n        }\\r\\n        ;\\r\\n        ++i;\\r\\n    }\\r\\n    ns.tprint(`INFO: hacks deployed on ${colors.Green}${hackedCount}${colors.Reset} purchased servers`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtcHVyY2hhc2VkLXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RhcnQtcHVyY2hhc2VkLXNlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLDhDQUE4QyxDQUFDLENBQUM7SUFDMUQsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFHVix5RUFBeUU7SUFDekUsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixFQUFFLEVBQUU7UUFDckMsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUM3QyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDL0gsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDL0IsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUE7UUFDM0QsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsRUFBRTtZQUMxQyxFQUFFLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLEtBQUssZUFBZSxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtZQUMvSSxFQUFFLFdBQVcsQ0FBQztTQUNqQjtRQUFBLENBQUM7UUFDRixFQUFFLENBQUMsQ0FBQztLQUNQO0lBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsTUFBTSxDQUFDLEtBQUssR0FBRyxXQUFXLEdBQUcsTUFBTSxDQUFDLEtBQUssb0JBQW9CLENBQUMsQ0FBQztBQUN4RyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlZCBieSBqX19yMGQgMTAvMTEvMjNcclxuaW1wb3J0IHsgTlMgfSBmcm9tICdAbnMnO1xyXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuL2NvbG9ycyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50cHJpbnQoJ0lORk86IGRlcGxveWluZyBoYWNrIG9uIHB1cmNoYXNlZCBzZXJ2ZXJzLi4uJyk7XHJcbiAgICBjb25zdCBoYWNrVG9EZXBsb3kgPSBucy5hcmdzWzBdLnRvU3RyaW5nKCk7XHJcbiAgICBjb25zdCBoYWNrVGFyZ2V0ID0gbnMuYXJnc1sxXS50b1N0cmluZygpO1xyXG4gICAgbGV0IGhhY2tlZENvdW50ID0gMDtcclxuICAgIGxldCBpID0gMTtcclxuXHJcbiAgICBcclxuICAgIC8vIFRPRE86IGFjayBva2F5IHRoaXMgY291bGQgYmUgZWFzaWVyIHVzaW5nIG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKSAuLi5cclxuICAgIHdoaWxlIChpIDwgbnMuZ2V0UHVyY2hhc2VkU2VydmVyTGltaXQoKSkge1xyXG4gICAgICAgIGxldCBob3N0bmFtZSA9IGBwc2Vydi1gLmNvbmNhdChpLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIG5zLmtpbGxhbGwoaG9zdG5hbWUpO1xyXG4gICAgICAgIGxldCB0aHJlYWRzVG9Vc2UgPSBNYXRoLm1heCgxLCAobnMuZ2V0U2VydmVyTWF4UmFtKGhvc3RuYW1lKSAtIG5zLmdldFNlcnZlclVzZWRSYW0oaG9zdG5hbWUpKSAvIG5zLmdldFNjcmlwdFJhbShoYWNrVG9EZXBsb3kpKTtcclxuICAgICAgICBucy5zY3AoaGFja1RvRGVwbG95LCBob3N0bmFtZSk7ICBcclxuICAgICAgICBucy5leGVjKGhhY2tUb0RlcGxveSwgaG9zdG5hbWUsIH5+dGhyZWFkc1RvVXNlLCBoYWNrVGFyZ2V0KVxyXG4gICAgICAgIGlmIChucy5zY3JpcHRSdW5uaW5nKGhhY2tUb0RlcGxveSwgaG9zdG5hbWUpKSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChgSU5GTzogLi4uaGFjayBkZXBsb3llZCB1c2luZyAke2NvbG9ycy5NYWdlbnRhfSR7fn50aHJlYWRzVG9Vc2V9JHtjb2xvcnMuUmVzZXR9IHRocmVhZHMgb24gJHtjb2xvcnMuQ3lhbn0ke2hvc3RuYW1lfSR7Y29sb3JzLlJlc2V0fWApXHJcbiAgICAgICAgICAgICsraGFja2VkQ291bnQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICArK2k7XHJcbiAgICB9XHJcbiAgICBucy50cHJpbnQoYElORk86IGhhY2tzIGRlcGxveWVkIG9uICR7Y29sb3JzLkdyZWVufSR7aGFja2VkQ291bnR9JHtjb2xvcnMuUmVzZXR9IHB1cmNoYXNlZCBzZXJ2ZXJzYCk7XHJcbn0iXX0=\",\"filename\":\"start-purchased-servers.js\",\"server\":\"home\"}}],[\"delete-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from './colors';\\r\\n/** @param {NS} ns Netscript namespace */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args.includes(`-a`)) {\\r\\n        deleteAllServers(ns);\\r\\n    }\\r\\n    else if (ns.args[0]) {\\r\\n        const purchasedServer = ns.args[0].toString();\\r\\n        deleteServer(ns, purchasedServer);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`ERROR: no server specified for deletion! ${colors.Red}(use -a to delete all purchased servers)${colors.Reset}`);\\r\\n    }\\r\\n}\\r\\nexport async function deleteServer(ns, server) {\\r\\n    try {\\r\\n        ns.killall(server);\\r\\n        ns.deleteServer(server);\\r\\n        ns.tprint(`INFO: deleted server ${colors.Cyan}${server}${colors.Reset}`);\\r\\n    }\\r\\n    catch {\\r\\n        ns.tprint(`ERROR: failed to delete server ${colors.Cyan}${server}${colors.Reset}`);\\r\\n    }\\r\\n}\\r\\nexport async function deleteAllServers(ns) {\\r\\n    ns.getPurchasedServers().forEach((server) => {\\r\\n        deleteServer(ns, server);\\r\\n    });\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlLXNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWxldGUtc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMseUNBQXlDO0FBRXpDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN4QixnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUN2QjtTQUNJLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNqQixNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFBO1FBQzdDLFlBQVksQ0FBQyxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUM7S0FDckM7U0FDSTtRQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsNENBQTRDLE1BQU0sQ0FBQyxHQUFHLDJDQUEyQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUM5SDtBQUVMLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLFlBQVksQ0FBQyxFQUFNLEVBQUUsTUFBYztJQUNyRCxJQUFJO1FBQ0EsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQixFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLEVBQUUsQ0FBQyxNQUFNLENBQUMsd0JBQXdCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQzVFO0lBQUMsTUFBTTtRQUNKLEVBQUUsQ0FBQyxNQUFNLENBQUMsa0NBQWtDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQ3RGO0FBQ0wsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsRUFBTTtJQUN6QyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRTtRQUNoRCxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJztcclxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnLi9jb2xvcnMnO1xyXG4vKiogQHBhcmFtIHtOU30gbnMgTmV0c2NyaXB0IG5hbWVzcGFjZSAqL1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAobnMuYXJncy5pbmNsdWRlcyhgLWFgKSkge1xyXG4gICAgICAgIGRlbGV0ZUFsbFNlcnZlcnMobnMpXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChucy5hcmdzWzBdKSB7XHJcbiAgICAgICAgY29uc3QgcHVyY2hhc2VkU2VydmVyID0gbnMuYXJnc1swXS50b1N0cmluZygpXHJcbiAgICAgICAgZGVsZXRlU2VydmVyKG5zLCBwdXJjaGFzZWRTZXJ2ZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbnMudHByaW50KGBFUlJPUjogbm8gc2VydmVyIHNwZWNpZmllZCBmb3IgZGVsZXRpb24hICR7Y29sb3JzLlJlZH0odXNlIC1hIHRvIGRlbGV0ZSBhbGwgcHVyY2hhc2VkIHNlcnZlcnMpJHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICB9XHJcbiAgICBcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZVNlcnZlcihuczogTlMsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIG5zLmtpbGxhbGwoc2VydmVyKTtcclxuICAgICAgICBucy5kZWxldGVTZXJ2ZXIoc2VydmVyKTtcclxuICAgICAgICBucy50cHJpbnQoYElORk86IGRlbGV0ZWQgc2VydmVyICR7Y29sb3JzLkN5YW59JHtzZXJ2ZXJ9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICB9IGNhdGNoIHtcclxuICAgICAgICBucy50cHJpbnQoYEVSUk9SOiBmYWlsZWQgdG8gZGVsZXRlIHNlcnZlciAke2NvbG9ycy5DeWFufSR7c2VydmVyfSR7Y29sb3JzLlJlc2V0fWApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlQWxsU2VydmVycyhuczogTlMpIHtcclxuICAgIG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5mb3JFYWNoKChzZXJ2ZXI6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGRlbGV0ZVNlcnZlcihucywgc2VydmVyKTtcclxuICAgIH0pO1xyXG59Il19\",\"filename\":\"delete-server.js\",\"server\":\"home\"}}],[\"purchase-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from './colors';\\r\\nimport { deployHack } from './deploy-hack';\\r\\n/** @param {NS} ns */\\r\\n/**\\r\\n * TODO: fix the purchase server script to properly deploy the hack instead of a hardcoded script name\\r\\n * TODO: allow for the passing of the RAM value\\r\\n * @param {NS} ns\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    const hackToDeploy = ns.args[0].toString();\\r\\n    const hackTarget = ns.args[1].toString();\\r\\n    const ram = ns.args[2] ? parseInt(ns.args[2].toString()) : 16;\\r\\n    // Continuously try to purchase servers until we've reached the maximum\\r\\n    // amount of servers, + 1 to account for 1-based indexing\\r\\n    let i = 1;\\r\\n    while (i < ns.getPurchasedServerLimit() + 1) {\\r\\n        if (ns.getServerMoneyAvailable(`home`) > ns.getPurchasedServerCost(ram)) {\\r\\n            let hostname = ns.purchaseServer(`pserv-` + i, ram);\\r\\n            ns.tprint(`INFO: purchased server ${colors.Cyan}${hostname}${colors.Reset} with ${colors.Green}${ram}GB${colors.Reset} RAM`);\\r\\n            await deployHack(ns, hostname, hackToDeploy, hackTarget);\\r\\n            ++i;\\r\\n        }\\r\\n        //Make the script wait for 100 milli-seconds before looping again.\\r\\n        //Removing this line will cause an infinite loop and crash the game.\\r\\n        await ns.sleep(100);\\r\\n    }\\r\\n}\\r\\nexport async function purchaseServer(ns, hostname, ram) {\\r\\n    ns.purchaseServer(hostname, ram);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2Utc2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3B1cmNoYXNlLXNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MscUJBQXFCO0FBRXJCOzs7O0dBSUc7QUFFSCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sWUFBWSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkQsTUFBTSxVQUFVLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNqRCxNQUFNLEdBQUcsR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFdEUsdUVBQXVFO0lBQ3ZFLHlEQUF5RDtJQUN6RCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDekMsSUFBSSxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3JFLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNwRCxFQUFFLENBQUMsTUFBTSxDQUFDLDBCQUEwQixNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxTQUFTLE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxLQUFLLE1BQU0sQ0FBQyxLQUFLLE1BQU0sQ0FBQyxDQUFDO1lBQzdILE1BQU0sVUFBVSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3pELEVBQUUsQ0FBQyxDQUFDO1NBQ1A7UUFDRCxrRUFBa0U7UUFDbEUsb0VBQW9FO1FBQ3BFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN2QjtBQUNMLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGNBQWMsQ0FBQyxFQUFNLEVBQUUsUUFBZ0IsRUFBRSxHQUFXO0lBQ3RFLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBRXJDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0aGUgY29udGVudHMgb2YgdGhpcyBzY3JpcHQgY2FtZSBmcm9tIHRoZSBCZWdpbm5lcidzIEd1aWRlIGluIHRoZSBnYW1lJ3MgZG9jdW1lbnRhdGlvbi4uLlxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJy4vY29sb3JzJztcclxuaW1wb3J0IHsgZGVwbG95SGFjayB9IGZyb20gJy4vZGVwbG95LWhhY2snO1xyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuXHJcbi8qKlxyXG4gKiBUT0RPOiBmaXggdGhlIHB1cmNoYXNlIHNlcnZlciBzY3JpcHQgdG8gcHJvcGVybHkgZGVwbG95IHRoZSBoYWNrIGluc3RlYWQgb2YgYSBoYXJkY29kZWQgc2NyaXB0IG5hbWVcclxuICogVE9ETzogYWxsb3cgZm9yIHRoZSBwYXNzaW5nIG9mIHRoZSBSQU0gdmFsdWVcclxuICogQHBhcmFtIHtOU30gbnMgXHJcbiAqL1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBjb25zdCBoYWNrVG9EZXBsb3k6IHN0cmluZyA9IG5zLmFyZ3NbMF0udG9TdHJpbmcoKTtcclxuICAgIGNvbnN0IGhhY2tUYXJnZXQ6IHN0cmluZyA9IG5zLmFyZ3NbMV0udG9TdHJpbmcoKTtcclxuICAgIGNvbnN0IHJhbTogbnVtYmVyID0gbnMuYXJnc1syXSA/IHBhcnNlSW50KG5zLmFyZ3NbMl0udG9TdHJpbmcoKSkgOiAxNjtcclxuXHJcbiAgICAvLyBDb250aW51b3VzbHkgdHJ5IHRvIHB1cmNoYXNlIHNlcnZlcnMgdW50aWwgd2UndmUgcmVhY2hlZCB0aGUgbWF4aW11bVxyXG4gICAgLy8gYW1vdW50IG9mIHNlcnZlcnMsICsgMSB0byBhY2NvdW50IGZvciAxLWJhc2VkIGluZGV4aW5nXHJcbiAgICBsZXQgaSA9IDE7XHJcbiAgICB3aGlsZSAoaSA8IG5zLmdldFB1cmNoYXNlZFNlcnZlckxpbWl0KCkgKyAxKSB7XHJcbiAgICAgICAgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKGBob21lYCkgPiBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KHJhbSkpIHtcclxuICAgICAgICAgICAgbGV0IGhvc3RuYW1lID0gbnMucHVyY2hhc2VTZXJ2ZXIoYHBzZXJ2LWAgKyBpLCByYW0pO1xyXG4gICAgICAgICAgICBucy50cHJpbnQoYElORk86IHB1cmNoYXNlZCBzZXJ2ZXIgJHtjb2xvcnMuQ3lhbn0ke2hvc3RuYW1lfSR7Y29sb3JzLlJlc2V0fSB3aXRoICR7Y29sb3JzLkdyZWVufSR7cmFtfUdCJHtjb2xvcnMuUmVzZXR9IFJBTWApO1xyXG4gICAgICAgICAgICBhd2FpdCBkZXBsb3lIYWNrKG5zLCBob3N0bmFtZSwgaGFja1RvRGVwbG95LCBoYWNrVGFyZ2V0KTtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL01ha2UgdGhlIHNjcmlwdCB3YWl0IGZvciAxMDAgbWlsbGktc2Vjb25kcyBiZWZvcmUgbG9vcGluZyBhZ2Fpbi5cclxuICAgICAgICAvL1JlbW92aW5nIHRoaXMgbGluZSB3aWxsIGNhdXNlIGFuIGluZmluaXRlIGxvb3AgYW5kIGNyYXNoIHRoZSBnYW1lLlxyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDEwMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdXJjaGFzZVNlcnZlcihuczogTlMsIGhvc3RuYW1lOiBzdHJpbmcsIHJhbTogbnVtYmVyKSB7XHJcbiAgICBucy5wdXJjaGFzZVNlcnZlcihob3N0bmFtZSwgcmFtKTtcclxuICAgIFxyXG59Il19\",\"filename\":\"purchase-server.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-25\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"server-list.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"server-list.txt\",\"text\":\"[home /]> scan-analyze 2\\r\\n┗ home\\r\\n  ┃   Root Access: YES, Required hacking skill: 1\\r\\n  ┃   Number of open ports required to NUKE: 5\\r\\n  ┃   RAM: 8.00GB\\r\\n  ┣ n00dles\\r\\n  ┃ ┃   Root Access: YES, Required hacking skill: 1\\r\\n  ┃ ┃   Number of open ports required to NUKE: 0\\r\\n  ┃ ┃   RAM: 4.00GB\\r\\n  ┃ ┗ CSEC\\r\\n  ┃       Root Access: NO, Required hacking skill: 52\\r\\n  ┃       Number of open ports required to NUKE: 1\\r\\n  ┃       RAM: 8.00GB\\r\\n  ┣ foodnstuff\\r\\n  ┃ ┃   Root Access: NO, Required hacking skill: 1\\r\\n  ┃ ┃   Number of open ports required to NUKE: 0\\r\\n  ┃ ┃   RAM: 16.00GB\\r\\n  ┃ ┗ max-hardware\\r\\n  ┃       Root Access: NO, Required hacking skill: 80\\r\\n  ┃       Number of open ports required to NUKE: 1\\r\\n  ┃       RAM: 32.00GB\\r\\n  ┣ sigma-cosmetics\\r\\n  ┃ ┃   Root Access: NO, Required hacking skill: 5\\r\\n  ┃ ┃   Number of open ports required to NUKE: 0\\r\\n  ┃ ┃   RAM: 16.00GB\\r\\n  ┃ ┗ zer0\\r\\n  ┃       Root Access: NO, Required hacking skill: 75\\r\\n  ┃       Number of open ports required to NUKE: 1\\r\\n  ┃       RAM: 32.00GB\\r\\n  ┣ joesguns\\r\\n  ┃     Root Access: NO, Required hacking skill: 10\\r\\n  ┃     Number of open ports required to NUKE: 0\\r\\n  ┃     RAM: 16.00GB\\r\\n  ┣ hong-fang-tea\\r\\n  ┃     Root Access: NO, Required hacking skill: 30\\r\\n  ┃     Number of open ports required to NUKE: 0\\r\\n  ┃     RAM: 16.00GB\\r\\n  ┣ harakiri-sushi\\r\\n  ┃ ┃   Root Access: NO, Required hacking skill: 40\\r\\n  ┃ ┃   Number of open ports required to NUKE: 0\\r\\n  ┃ ┃   RAM: 16.00GB\\r\\n  ┃ ┗ nectar-net\\r\\n  ┃       Root Access: NO, Required hacking skill: 20\\r\\n  ┃       Number of open ports required to NUKE: 0\\r\\n  ┃       RAM: 16.00GB\\r\\n  ┗ iron-gym\\r\\n        Root Access: NO, Required hacking skill: 100\\r\\n        Number of open ports required to NUKE: 1\\r\\n        RAM: 32.00GB\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[9740047299.833569,171902,2184517,2351313]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":71013964.84485656,\"onlineMoneyMade\":9740047299.833569,\"onlineRunningTime\":43837.609999923065,\"ramUsage\":2.4,\"server\":\"home\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":851,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"0.4.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":58988862434,\"moneyMax\":1474721560850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1329,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"26.1.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":50608875185,\"moneyMax\":1265221879625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1334,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-992599.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"GGDssssssssIIIIIIIIIIIIYYAAWWWWWWWWWWWWaa77IKNN3Jeepp777777777\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"74.2.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":28537310046,\"moneyMax\":713432751150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":971,\"serverGrowth\":63,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"34.6.1.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":20018569355,\"moneyMax\":500464233875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1197,\"serverGrowth\":84,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"67.4.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":34771648173,\"moneyMax\":869291204325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1184,\"serverGrowth\":84,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"57.9.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":23663450733,\"moneyMax\":591586268325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1215,\"serverGrowth\":60,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-842685-NiteSec.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"TABLEFRAMESHIFTARRAYMEDIA\",\"ALGORITHM\"],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"48.4.3.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":14714351393,\"moneyMax\":367858784825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1089,\"serverGrowth\":99,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"37.7.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":20882546673,\"moneyMax\":522063666825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1047,\"serverGrowth\":80,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"46.4.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":24655885007,\"moneyMax\":616397125175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1242,\"serverGrowth\":98,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-383925.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"PPQR4iiiiiiizzzzzzz2nnnnnnnnzzDDDDDDDDDDDuuiiiiiiiiiimm4kkkkkkkkkkff00000\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"44.4.9.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1493284255,\"moneyMax\":37332106375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1206,\"serverGrowth\":83,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"6.1.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1216,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"33.7.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1056639515,\"moneyMax\":26415987875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":957,\"serverGrowth\":89,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"14.2.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":889405211,\"moneyMax\":22235130275,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1029,\"serverGrowth\":51,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"39.8.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":879058901,\"moneyMax\":21976472525,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":944,\"serverGrowth\":38,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"46.9.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":606717861,\"moneyMax\":15167946525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":847,\"serverGrowth\":71,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"88.0.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":751979824,\"moneyMax\":18799495600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":73,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"69.4.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":968386800,\"moneyMax\":24209670000,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":918,\"serverGrowth\":93,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"76.4.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1157768284,\"moneyMax\":28944207100,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":859,\"serverGrowth\":83,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[375274280.4886804,2652,32474,38337]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1094627.2838693552,\"onlineMoneyMade\":375274280.4886804,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"univ-energy\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-236157-NiteSec.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[65,[1,3,4,5,10,11,12,15,18,19,20]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"71.8.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":869726673,\"moneyMax\":21743166825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":867,\"serverGrowth\":67,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"70.3.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":639902112,\"moneyMax\":15997552800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":74,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"76.4.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":853751163,\"moneyMax\":21343779075,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":881,\"serverGrowth\":77,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"73.4.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":750978490,\"moneyMax\":18774462250,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":845,\"serverGrowth\":84,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"49.5.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1073727844,\"moneyMax\":26843196100,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":875,\"serverGrowth\":56,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"33.8.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":920551101,\"moneyMax\":23013777525,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":920,\"serverGrowth\":61,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"49.6.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":923373259,\"moneyMax\":23084331475,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":779,\"serverGrowth\":68,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"91.5.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":899846176,\"moneyMax\":22496154400,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":786,\"serverGrowth\":73,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-652248.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[171,57,200,122,122,132,145,97,188,145,199,128,74,44,188,24,133,21,182,139,77,112,161,155,58,142,164,154,65,156,197,68,50,116,110,100,188,172,193,30,144,161,140,155,74,185,151,86,3,15]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"51.6.7.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":768297966,\"moneyMax\":19207449150,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":801,\"serverGrowth\":72,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"93.1.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1319129678,\"moneyMax\":32978241950,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":823,\"serverGrowth\":55,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688811-NiteSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[3,13],[4,7],[12,22],[15,19],[7,11],[10,15]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"80.1.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1575212724,\"moneyMax\":39380318100,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":789,\"serverGrowth\":89,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[817985934.0938905,5330,66326,75816]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2199552.557596818,\"onlineMoneyMade\":817985934.0938905,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"global-pharm\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"7.5.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1232455655,\"moneyMax\":30811391375,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":776,\"serverGrowth\":78,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"53.0.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1340544387,\"moneyMax\":33513609675,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":810,\"serverGrowth\":74,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"95.1.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1061259155,\"moneyMax\":26531478875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":789,\"serverGrowth\":74,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[911209094.3067394,5096,66118,76154]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2199748.70978459,\"onlineMoneyMade\":911209094.3067394,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"unitalife\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"86.9.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"syscore\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":767694550,\"moneyMax\":19192363750,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":684,\"serverGrowth\":56,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1092706636.2814045,5460,64844,76934]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2196316.0464985557,\"onlineMoneyMade\":1092706636.2814045,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-777889.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[5,9],[8,9,3],[7,9,1,3],[8,5,6,4,4],[5,7,6,9,4,4],[8,9,1,5,8,8,4],[2,3,9,3,6,8,3,6],[6,2,1,2,9,2,7,8,7],[7,7,6,7,6,4,4,1,3,8]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"19.0.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":665682551,\"moneyMax\":16642063775,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":481,\"serverGrowth\":48,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[170641708.1906843,1224,15102,17610]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505733.150284122,\"onlineMoneyMade\":170641708.1906843,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"72.4.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":626396715,\"moneyMax\":15659917875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":595,\"serverGrowth\":55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[126186002.64888446,1182,15006,17718]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":504940.9972181143,\"onlineMoneyMade\":126186002.64888446,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"37.8.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":229828815,\"moneyMax\":5745720375,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":426,\"serverGrowth\":34,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[922523394.0313194,5278,65468,76362]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2195531.4377474603,\"onlineMoneyMade\":922523394.0313194,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"aevum-police\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"25.5.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":235031176,\"moneyMax\":5875779400,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":394,\"serverGrowth\":39,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[189592680.6982951,1272,15018,17682]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":506887.43046601885,\"onlineMoneyMade\":189592680.6982951,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"77.1.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":922392703,\"moneyMax\":23059817575,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":738,\"serverGrowth\":83,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"62.8.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":232488788,\"moneyMax\":5812219700,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":447,\"serverGrowth\":42,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[144500434.59202704,1242,14814,17850]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":504397.8065442805,\"onlineMoneyMade\":144500434.59202704,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"7.9.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":556388251,\"moneyMax\":13909706275,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":562,\"serverGrowth\":69,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-139814-NiteSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-3,7,3,-3,10,9,-9,-7,3,9,8,-1,1,5,-6,-4,0,4,8,-7,-3,9,-10,2,4,-1,-8,-6,-5,2,4,9],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"2.7.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":527038114,\"moneyMax\":13175952850,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":415,\"serverGrowth\":54,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[171615264.61633527,1272,14760,17886]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505054.1619418298,\"onlineMoneyMade\":171615264.61633527,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"catalyst\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"91.1.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"summit-uni\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":168992524,\"moneyMax\":4224813100,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":279,\"serverGrowth\":54,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[867423010.1151072,5408,65936,76102]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2199160.253221271,\"onlineMoneyMade\":867423010.1151072,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"the-hub\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"93.3.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":230272395,\"moneyMax\":5756809875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":392,\"serverGrowth\":52,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"50.5.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":404,\"serverGrowth\":47,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[397680520.3653952,2847,32630,38272]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1097765.7188737306,\"onlineMoneyMade\":397680520.3653952,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"netlink\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"34.2.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":72537797,\"moneyMax\":1813444925,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":253,\"serverGrowth\":43,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"44.0.0.7\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[23762665.94075756,205,2455,2987]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":84119.1112951264,\"onlineMoneyMade\":23762665.94075756,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"n00dles\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"52.6.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[150918646.75493094,1212,15144,17592]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505438.92200246203,\"onlineMoneyMade\":150918646.75493094,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-791579.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,6,5,6,7,-4,3,-4,-2,9,7,-4,-8,-2,-5,8,-10,3,-4,4,-8],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"52.9.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[189303901.8516275,1290,15006,17700]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":506434.7715711574,\"onlineMoneyMade\":189303901.8516275,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"86.7.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[167718025.69094172,1254,15018,17676]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":506050.01151052496,\"onlineMoneyMade\":167718025.69094172,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"joesguns\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"7.4.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[370912123.8172212,2639,32734,38168]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1095509.9687143352,\"onlineMoneyMade\":370912123.8172212,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"zer0\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"73.3.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[175867586.6133712,1230,15048,17670]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":506321.6068474419,\"onlineMoneyMade\":175867586.6133712,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"87.0.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[426376483.742826,2730,32864,38103]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1098746.4798125979,\"onlineMoneyMade\":426376483.742826,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"neo-net\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"74.5.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[971833109.0793957,5304,65884,76258]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2200042.9380662506,\"onlineMoneyMade\":971833109.0793957,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"46.8.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[150706541.36643016,1212,14946,17736]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505235.2254997743,\"onlineMoneyMade\":150706541.36643016,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"81.8.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[191745107.8566273,1308,15048,17658]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":506977.96224499115,\"onlineMoneyMade\":191745107.8566273,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"77.4.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[385985101.28833973,2652,32721,38220]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1096883.0340287497,\"onlineMoneyMade\":385985101.28833973,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"phantasy\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"45.4.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[404958790.864201,2886,32786,38116]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1099972.4309861823,\"onlineMoneyMade\":404958790.864201,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"65.3.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":33,\"minDifficulty\":11,\"moneyAvailable\":67181549,\"moneyMax\":1679538725,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":205,\"serverGrowth\":36,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[344110269.2903894,2457,32591,38350]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1095706.1209021087,\"onlineMoneyMade\":344110269.2903894,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"omega-net\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"81.9.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":59227552,\"moneyMax\":1480688800,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":225,\"serverGrowth\":30,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"70.6.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[325129992.6952059,2704,32643,38220]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1095019.588244902,\"onlineMoneyMade\":325129992.6952059,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"31.0.6.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":515,\"serverGrowth\":43,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2898383587.624015,16854,287472,295316]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9004592.509184381,\"onlineMoneyMade\":2898383587.624015,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":106,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"83.4.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":997,\"serverGrowth\":58,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-928025-NiteSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[8,10,7,-7,-6,9,-2,3,6,5,3,9,-6,4,-2,3,10,-6,-6,4,8,5,2],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"92.0.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":712,\"serverGrowth\":50,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"70.5.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":522,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"0.3.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":344,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[996116606.139531,5616,65832,76050]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2199356.405409043,\"onlineMoneyMade\":996116606.139531,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"78.0.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":212,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1007082692.3418735,5382,65832,76154]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2197100.6552496483,\"onlineMoneyMade\":1007082692.3418735,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"3.7.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":543,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"35.3.7.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":60,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[68365840.80661343,579,7512,8853]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":252368.65035771325,\"onlineMoneyMade\":68365840.80661343,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"CSEC\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"56.8.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"67.3.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"57.1.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"0.9.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[146016171.2003922,1296,14988,17688]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505393.6561129759,\"onlineMoneyMade\":146016171.2003922,\"onlineRunningTime\":43840.20999992303,\"ramUsage\":2.4,\"server\":\"pserv-1\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"37.2.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[156168485.8771604,1254,15042,17652]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505506.82083669124,\"onlineMoneyMade\":156168485.8771604,\"onlineRunningTime\":43840.00999992303,\"ramUsage\":2.4,\"server\":\"pserv-2\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"33.4.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[160513624.7792072,1164,15078,17658]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505325.7572787466,\"onlineMoneyMade\":160513624.7792072,\"onlineRunningTime\":43840.00999992303,\"ramUsage\":2.4,\"server\":\"pserv-3\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"87.4.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[149381796.6520592,1218,15054,17676]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505778.416173608,\"onlineMoneyMade\":149381796.6520592,\"onlineRunningTime\":43839.80999992303,\"ramUsage\":2.4,\"server\":\"pserv-4\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"85.2.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[148340019.35267514,1212,14994,17742]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505914.2138420666,\"onlineMoneyMade\":148340019.35267514,\"onlineRunningTime\":43839.80999992303,\"ramUsage\":2.4,\"server\":\"pserv-5\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"53.6.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[185825946.78187934,1236,15126,17640]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":507204.29169242183,\"onlineMoneyMade\":185825946.78187934,\"onlineRunningTime\":43839.609999923036,\"ramUsage\":2.4,\"server\":\"pserv-6\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"28.6.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[186062448.2087271,1248,15054,17694]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":507181.6587476788,\"onlineMoneyMade\":186062448.2087271,\"onlineRunningTime\":43839.609999923036,\"ramUsage\":2.4,\"server\":\"pserv-7\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"44.2.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[174090864.7727543,1242,14994,17724]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":506366.8727369281,\"onlineMoneyMade\":174090864.7727543,\"onlineRunningTime\":43839.40999992304,\"ramUsage\":2.4,\"server\":\"pserv-8\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"30.4.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[139818412.4675204,1182,15102,17622]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505280.4913892604,\"onlineMoneyMade\":139818412.4675204,\"onlineRunningTime\":43839.40999992304,\"ramUsage\":2.4,\"server\":\"pserv-9\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"5.2.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[160013256.27438828,1266,14970,17730]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":506117.91034475423,\"onlineMoneyMade\":160013256.27438828,\"onlineRunningTime\":43839.20999992304,\"ramUsage\":2.4,\"server\":\"pserv-10\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"4.1.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[141083178.29147,1224,15030,17706]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505891.5808973235,\"onlineMoneyMade\":141083178.29147,\"onlineRunningTime\":43839.20999992304,\"ramUsage\":2.4,\"server\":\"pserv-11\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"7.8.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[179706718.70411295,1338,14898,17748]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505642.6185051498,\"onlineMoneyMade\":179706718.70411295,\"onlineRunningTime\":43839.009999923044,\"ramUsage\":2.4,\"server\":\"pserv-12\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"22.6.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[177230256.82699126,1344,14802,17850]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505959.47973155277,\"onlineMoneyMade\":177230256.82699126,\"onlineRunningTime\":43838.80999992305,\"ramUsage\":2.4,\"server\":\"pserv-13\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"25.6.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[154845659.07885256,1200,15060,17682]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":506366.87273692805,\"onlineMoneyMade\":154845659.07885256,\"onlineRunningTime\":43838.80999992305,\"ramUsage\":2.4,\"server\":\"pserv-14\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"9.8.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[180255938.32467622,1248,14832,17838]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505868.94795258046,\"onlineMoneyMade\":180255938.32467622,\"onlineRunningTime\":43838.60999992305,\"ramUsage\":2.4,\"server\":\"pserv-15\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"91.9.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[169575642.1035246,1212,15162,17586]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":506434.7715711572,\"onlineMoneyMade\":169575642.1035246,\"onlineRunningTime\":43838.60999992305,\"ramUsage\":2.4,\"server\":\"pserv-16\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"43.9.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[139393849.6640703,1188,14916,17778]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505325.75727874646,\"onlineMoneyMade\":139393849.6640703,\"onlineRunningTime\":43838.40999992305,\"ramUsage\":2.4,\"server\":\"pserv-17\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"33.8.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[176510773.27364236,1212,15168,17580]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":506842.1645765326,\"onlineMoneyMade\":176510773.27364236,\"onlineRunningTime\":43838.40999992305,\"ramUsage\":2.4,\"server\":\"pserv-18\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"43.6.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[157044632.87935674,1290,14910,17772]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":506004.7456210389,\"onlineMoneyMade\":157044632.87935674,\"onlineRunningTime\":43838.209999923056,\"ramUsage\":2.4,\"server\":\"pserv-19\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"88.0.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[157552176.1755608,1230,15114,17634]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505959.47973155277,\"onlineMoneyMade\":157552176.1755608,\"onlineRunningTime\":43838.209999923056,\"ramUsage\":2.4,\"server\":\"pserv-20\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"42.3.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[165206016.8687743,1158,15186,17592]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":506887.4304660188,\"onlineMoneyMade\":165206016.8687743,\"onlineRunningTime\":43838.00999992306,\"ramUsage\":2.4,\"server\":\"pserv-21\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"78.9.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[156671789.97912687,1200,15072,17658]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505574.7196709204,\"onlineMoneyMade\":156671789.97912687,\"onlineRunningTime\":43838.00999992306,\"ramUsage\":2.4,\"server\":\"pserv-22\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"28.5.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[157528004.57654586,1176,15030,17700]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505687.88439463574,\"onlineMoneyMade\":157528004.57654586,\"onlineRunningTime\":43837.80999992306,\"ramUsage\":2.4,\"server\":\"pserv-23\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"83.5.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[150591251.42540258,1236,15066,17634]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505733.15028412204,\"onlineMoneyMade\":150591251.42540258,\"onlineRunningTime\":43837.80999992306,\"ramUsage\":2.4,\"server\":\"pserv-24\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-25\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-25\",\"httpPortOpen\":false,\"ip\":\"63.9.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the 'target server', which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy9ERUJVRzogbnMudHByaW50ZihgJHtucy5nZXRIb3N0bmFtZSgpfSByZXBvcnRpbmcgaW4uLi5gKVxyXG4gIFxyXG4gIC8vIERlZmluZXMgdGhlICd0YXJnZXQgc2VydmVyJywgd2hpY2ggaXMgdGhlIHNlcnZlclxyXG4gIC8vIHRoYXQgd2UncmUgZ29pbmcgdG8gaGFjay4gXHJcbiAgY29uc3QgdGFyZ2V0OiBhbnkgPSBucy5hcmdzWzBdO1xyXG4gIC8vIERlZmluZXMgaG93IG11Y2ggbW9uZXkgYSBzZXJ2ZXIgc2hvdWxkIGhhdmUgYmVmb3JlIHdlIGhhY2sgaXRcclxuICAvLyBJbiB0aGlzIGNhc2UsIGl0IGlzIHNldCB0byB0aGUgbWF4aW11bSBhbW91bnQgb2YgbW9uZXkuXHJcbiAgY29uc3QgbW9uZXlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICAvLyBEZWZpbmVzIHRoZSBtYXhpbXVtIHNlY3VyaXR5IGxldmVsIHRoZSB0YXJnZXQgc2VydmVyIGNhblxyXG4gIC8vIGhhdmUuIElmIHRoZSB0YXJnZXQncyBzZWN1cml0eSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGlzLFxyXG4gIC8vIHdlJ2xsIHdlYWtlbiBpdCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG4gIGNvbnN0IHNlY3VyaXR5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICAvLyBJbmZpbml0ZSBsb29wIHRoYXQgY29udGlub3VzbHkgaGFja3MvZ3Jvd3Mvd2Vha2VucyB0aGUgdGFyZ2V0IHNlcnZlclxyXG4gICAgaWYgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KSA+IHNlY3VyaXR5VGhyZXNoKSB7XHJcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIncyBzZWN1cml0eSBsZXZlbCBpcyBhYm92ZSBvdXIgdGhyZXNob2xkLCB3ZWFrZW4gaXRcclxuICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldCk7XHJcbiAgICB9IGVsc2UgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgPCBtb25leVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3MgbW9uZXkgaXMgbGVzcyB0aGFuIG91ciB0aHJlc2hvbGQsIGdyb3cgaXRcclxuICAgICAgYXdhaXQgbnMuZ3Jvdyh0YXJnZXQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBoYWNrIGl0XHJcbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-25\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[176766729.57419133,1146,15036,17706]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":505891.5808973234,\"onlineMoneyMade\":176766729.57419133,\"onlineRunningTime\":43837.609999923065,\"ramUsage\":2.4,\"server\":\"pserv-25\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.5529,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":31.1948,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":5.368,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":11.0158,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":3.4048,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":148.7651,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":259577.15552934093}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":146.734,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":30.8584,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":122.1116,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":180,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#E3B54A\",\"primary\":\"#CAA243\",\"primarydark\":\"#7E6937\",\"successlight\":\"#82FF82\",\"success\":\"#6FDA6F\",\"successdark\":\"#64C364\",\"errorlight\":\"#FD5555\",\"error\":\"#D84A4A\",\"errordark\":\"#AC3939\",\"secondarylight\":\"#D8D0B8\",\"secondary\":\"#B1AA95\",\"secondarydark\":\"#736E5E\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#111111\",\"white\":\"#fff\",\"black\":\"#070300\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#0A0A0E\",\"backgroundsecondary\":\"#0E0E10\",\"button\":\"#222222\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1424,\"y\":1027,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Consolas\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":true,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1697945014622","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}