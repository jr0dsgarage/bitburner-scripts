{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":21,\"max\":21},\"skills\":{\"hacking\":425,\"strength\":114,\"defense\":114,\"dexterity\":159,\"agility\":120,\"charisma\":127,\"intelligence\":0},\"exp\":{\"hacking\":10251046.588669168,\"strength\":11583.79797362596,\"defense\":11583.79797362596,\"dexterity\":11583.79797362596,\"agility\":11583.79797362596,\"charisma\":8957.994213706308,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.1950153252843068,\"hacking_speed\":1.2076551730963139,\"hacking_money\":1.1381098336041016,\"hacking_grow\":1.1381098336041016,\"hacking\":1.3425997179569187,\"strength\":1.1381098336041016,\"defense\":1.1381098336041016,\"dexterity\":1.577420229375285,\"agility\":1.1950153252843068,\"charisma\":1.365731800324922,\"hacking_exp\":1.2519208169645117,\"strength_exp\":1.2519208169645117,\"defense_exp\":1.2519208169645117,\"dexterity_exp\":1.2519208169645117,\"agility_exp\":1.2519208169645117,\"charisma_exp\":1.2519208169645117,\"company_rep\":1.1381098336041016,\"faction_rep\":1.1381098336041016,\"crime_money\":1.1381098336041016,\"crime_success\":1.1381098336041016,\"hacknet_node_money\":2.8704196981464447,\"hacknet_node_purchase_cost\":0.6721671120066165,\"hacknet_node_ram_cost\":0.8786498196164921,\"hacknet_node_core_cost\":0.8786498196164921,\"hacknet_node_level_cost\":0.7468523466740183,\"work_money\":1.1381098336041016,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"}],\"queuedAugmentations\":[{\"level\":14,\"name\":\"NeuroFlux Governor\"},{\"level\":15,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":16,\"name\":\"NeuroFlux Governor\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":18,\"name\":\"NeuroFlux Governor\"},{\"level\":19,\"name\":\"NeuroFlux Governor\"},{\"level\":20,\"name\":\"NeuroFlux Governor\"},{\"level\":21,\"name\":\"NeuroFlux Governor\"},{\"level\":22,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Sector-12\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26325.50662184812,\"onlineTimeSeconds\":121110.19999930687,\"ram\":64,\"totalMoneyGenerated\":2037578205.819919,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26325.50662184812,\"onlineTimeSeconds\":121109.39999930689,\"ram\":64,\"totalMoneyGenerated\":2037486983.175671,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26325.50662184812,\"onlineTimeSeconds\":121108.7999993069,\"ram\":64,\"totalMoneyGenerated\":2037409919.960516,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26325.50662184812,\"onlineTimeSeconds\":121108.3999993069,\"ram\":64,\"totalMoneyGenerated\":2037262342.6632805,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26325.50662184812,\"onlineTimeSeconds\":121107.79999930691,\"ram\":64,\"totalMoneyGenerated\":2037299492.2542534,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26325.50662184812,\"onlineTimeSeconds\":121107.39999930692,\"ram\":64,\"totalMoneyGenerated\":2037345417.2297683,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26325.50662184812,\"onlineTimeSeconds\":121106.19999930693,\"ram\":64,\"totalMoneyGenerated\":2037194430.3345466,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26325.50662184812,\"onlineTimeSeconds\":121105.59999930694,\"ram\":64,\"totalMoneyGenerated\":2037130902.3863072,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26325.50662184812,\"onlineTimeSeconds\":121105.19999930695,\"ram\":64,\"totalMoneyGenerated\":2037083624.7287498,\"name\":\"hacknet-node-8\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":10774851999.367186,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":13502048201.561663,\"hacknet\":18335791318.354797,\"hacknet_expenses\":-3198102874.3772616,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":10773851999.366823,\"work\":0,\"servers\":-10560000,\"other\":0,\"augmentations\":-17855324646.51051}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":40071373182.87658,\"hacknet\":18516638942.641697,\"hacknet_expenses\":-5045384202.208437,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":29159653744.018955,\"work\":9800544.803266961,\"servers\":-231749182.23116505,\"other\":-200000,\"augmentations\":-24160825546.460594}},\"playtimeSinceLastAug\":122444800,\"playtimeSinceLastBitnode\":730399000,\"lastAugReset\":1697600868501,\"lastNodeReset\":-1,\"purchasedServers\":[\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"scriptProdSinceLastAug\":13495901587.847261,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1696993342778},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1697002312401},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1697003975843},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1697004035834},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1697042616276},{\"ID\":\"TOR\",\"unlockedOn\":1697052216278},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1697124200234},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1697173256423},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1697174276424},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1697178716426},{\"ID\":\"FROZE\",\"unlockedOn\":1697506902150}],\"terminalCommandHistory\":[\"cat my-first-hack.js \",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"ls -l -g .exe\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"clear; killall; run hack-servers.js my-first-hack.js \",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"scan\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"ls -l\",\"run ServerProfiler.exe \",\"run ServerProfiler.exe joesguns\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"scan-analyze 5\",\"home\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"scan\",\"scan-analyze 2\",\"connect harakiri-sushi\",\"connect csec\",\"connect CSEC\",\"backdoor\",\"home\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"cat hack-servers.js \",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"cat hack-servers.js \",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"connect harakiri-sushi\",\"connect CSEC\",\"backdoor\",\"home\",\"run purchase-server-8gb.js \",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"run serverprofiler.exe joesguns\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"clear; run scan-servers.js 5\",\"clear; run scan-servers.js 5 \\\"home\\\"\",\"clear; run scan-servers.js 5\",\"cat scan-servers.js \",\"clear; run scan-servers.js 5\",\"clear\",\"clear; run scan-servers.js 5\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"scan-analyze 5\",\"scan-analyze 3\",\"clear\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"run open-ports.js nova-med\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"ls -l -g .msg\"],\"lastUpdate\":1697723313543,\"lastSave\":1697723159516,\"totalPlaytime\":730399000,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":199258,\"factionWorkType\":\"hacking\",\"factionName\":\"Sector-12\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"103d6a1d75d61f\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"5.7.5.1\",\"isConnectedTo\":true,\"maxRam\":256,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"ServerProfiler.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"connected-servers-info.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(\\\"Connected servers:\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGVkLXNlcnZlcnMtaW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25uZWN0ZWQtc2VydmVycy1pbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLEVBQUUsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNwQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBhbnkpIHtcclxuICAgIG5zLnRwcmludChcIkNvbm5lY3RlZCBzZXJ2ZXJzOlwiKTtcclxufSJdfQ==\",\"filename\":\"connected-servers-info.js\",\"server\":\"home\"}}],[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"home\"}}],[\"purchase-server-8gb.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// the contents of this script came from the Beginner's Guide in the game's documentation...\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // How much RAM each purchased server will have. In this case, it'll\\r\\n    // be 8GB.\\r\\n    const ram = 8;\\r\\n    // Iterator we'll use for our loop\\r\\n    let i = 1; // changed to 1 by j__r0d because 1 is a better place to start than 0 for this counter\\r\\n    // Continuously try to purchase servers until we've reached the maximum\\r\\n    // amount of servers\\r\\n    while (i < ns.getPurchasedServerLimit()) {\\r\\n        // Check if we have enough money to purchase a server\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\r\\n            // If we have enough money, then:\\r\\n            //  1. Purchase the server\\r\\n            //  2. Copy our hacking script onto the newly-purchased server\\r\\n            //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n            //  4. Increment our iterator to indicate that we've bought a new server\\r\\n            let hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n            ns.scp(\\\"early-hack-template.js\\\", hostname);\\r\\n            ns.exec(\\\"early-hack-template.js\\\", hostname, 3);\\r\\n            ++i;\\r\\n        }\\r\\n        //Make the script wait for a second before looping again.\\r\\n        //Removing this line will cause an infinite loop and crash the game.\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2Utc2VydmVyLThnYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wdXJjaGFzZS1zZXJ2ZXItOGdiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDRGQUE0RjtBQUU1RixxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixvRUFBb0U7SUFDcEUsVUFBVTtJQUNWLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztJQUVkLGtDQUFrQztJQUNsQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxzRkFBc0Y7SUFFakcsdUVBQXVFO0lBQ3ZFLG9CQUFvQjtJQUNwQixPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsRUFBRTtRQUNyQyxxREFBcUQ7UUFDckQsSUFBSSxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3JFLGlDQUFpQztZQUNqQywwQkFBMEI7WUFDMUIsOERBQThEO1lBQzlELDBFQUEwRTtZQUMxRSx3RUFBd0U7WUFDeEUsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3BELEVBQUUsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDM0MsRUFBRSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0MsRUFBRSxDQUFDLENBQUM7U0FDUDtRQUNELHlEQUF5RDtRQUN6RCxvRUFBb0U7UUFDcEUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3hCO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRoZSBjb250ZW50cyBvZiB0aGlzIHNjcmlwdCBjYW1lIGZyb20gdGhlIEJlZ2lubmVyJ3MgR3VpZGUgaW4gdGhlIGdhbWUncyBkb2N1bWVudGF0aW9uLi4uXHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IGFueSkge1xyXG4gICAgLy8gSG93IG11Y2ggUkFNIGVhY2ggcHVyY2hhc2VkIHNlcnZlciB3aWxsIGhhdmUuIEluIHRoaXMgY2FzZSwgaXQnbGxcclxuICAgIC8vIGJlIDhHQi5cclxuICAgIGNvbnN0IHJhbSA9IDg7XHJcblxyXG4gICAgLy8gSXRlcmF0b3Igd2UnbGwgdXNlIGZvciBvdXIgbG9vcFxyXG4gICAgbGV0IGkgPSAxOyAvLyBjaGFuZ2VkIHRvIDEgYnkgal9fcjBkIGJlY2F1c2UgMSBpcyBhIGJldHRlciBwbGFjZSB0byBzdGFydCB0aGFuIDAgZm9yIHRoaXMgY291bnRlclxyXG5cclxuICAgIC8vIENvbnRpbnVvdXNseSB0cnkgdG8gcHVyY2hhc2Ugc2VydmVycyB1bnRpbCB3ZSd2ZSByZWFjaGVkIHRoZSBtYXhpbXVtXHJcbiAgICAvLyBhbW91bnQgb2Ygc2VydmVyc1xyXG4gICAgd2hpbGUgKGkgPCBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggbW9uZXkgdG8gcHVyY2hhc2UgYSBzZXJ2ZXJcclxuICAgICAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoXCJob21lXCIpID4gbnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChyYW0pKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgZW5vdWdoIG1vbmV5LCB0aGVuOlxyXG4gICAgICAgICAgICAvLyAgMS4gUHVyY2hhc2UgdGhlIHNlcnZlclxyXG4gICAgICAgICAgICAvLyAgMi4gQ29weSBvdXIgaGFja2luZyBzY3JpcHQgb250byB0aGUgbmV3bHktcHVyY2hhc2VkIHNlcnZlclxyXG4gICAgICAgICAgICAvLyAgMy4gUnVuIG91ciBoYWNraW5nIHNjcmlwdCBvbiB0aGUgbmV3bHktcHVyY2hhc2VkIHNlcnZlciB3aXRoIDMgdGhyZWFkc1xyXG4gICAgICAgICAgICAvLyAgNC4gSW5jcmVtZW50IG91ciBpdGVyYXRvciB0byBpbmRpY2F0ZSB0aGF0IHdlJ3ZlIGJvdWdodCBhIG5ldyBzZXJ2ZXJcclxuICAgICAgICAgICAgbGV0IGhvc3RuYW1lID0gbnMucHVyY2hhc2VTZXJ2ZXIoXCJwc2Vydi1cIiArIGksIHJhbSk7XHJcbiAgICAgICAgICAgIG5zLnNjcChcImVhcmx5LWhhY2stdGVtcGxhdGUuanNcIiwgaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICBucy5leGVjKFwiZWFybHktaGFjay10ZW1wbGF0ZS5qc1wiLCBob3N0bmFtZSwgMyk7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9NYWtlIHRoZSBzY3JpcHQgd2FpdCBmb3IgYSBzZWNvbmQgYmVmb3JlIGxvb3BpbmcgYWdhaW4uXHJcbiAgICAgICAgLy9SZW1vdmluZyB0aGlzIGxpbmUgd2lsbCBjYXVzZSBhbiBpbmZpbml0ZSBsb29wIGFuZCBjcmFzaCB0aGUgZ2FtZS5cclxuICAgICAgICBhd2FpdCBucy5zbGVlcCgxMDAwKTtcclxuICAgIH1cclxufSJdfQ==\",\"filename\":\"purchase-server-8gb.js\",\"server\":\"home\"}}],[\"start-purchased-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from \\\"./colors\\\";\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(\\\"INFO: deploying hack on purchased servers...\\\");\\r\\n    const hackToDeploy = ns.args[0].toString();\\r\\n    const hackTarget = ns.args[1].toString();\\r\\n    let hackedCount = 0;\\r\\n    let i = 1;\\r\\n    while (i < ns.getPurchasedServerLimit()) {\\r\\n        let hostname = \\\"pserv-\\\".concat(i.toString());\\r\\n        ns.killall(hostname);\\r\\n        let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n        ns.scp(hackToDeploy, hostname);\\r\\n        ns.exec(hackToDeploy, hostname, ~~threadsToUse, hackTarget);\\r\\n        if (ns.scriptRunning(hackToDeploy, hostname)) {\\r\\n            ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads on ${colors.Cyan}${hostname}${colors.Reset}`);\\r\\n            ++hackedCount;\\r\\n        }\\r\\n        ;\\r\\n        ++i;\\r\\n    }\\r\\n    ns.tprint(`INFO: hacks deployed on ${colors.Green}${hackedCount}${colors.Reset} purchased servers`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtcHVyY2hhc2VkLXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RhcnQtcHVyY2hhc2VkLXNlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLDhDQUE4QyxDQUFDLENBQUM7SUFDMUQsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsRUFBRTtRQUNyQyxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckIsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUMvSCxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMvQixFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUMzRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxFQUFFO1lBQzFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0NBQWdDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxlQUFlLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO1lBQy9JLEVBQUUsV0FBVyxDQUFDO1NBQ2pCO1FBQUEsQ0FBQztRQUNGLEVBQUUsQ0FBQyxDQUFDO0tBQ1A7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLDJCQUEyQixNQUFNLENBQUMsS0FBSyxHQUFHLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3hHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZCAxMC8xMS8yM1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSBcIi4vY29sb3JzXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50cHJpbnQoXCJJTkZPOiBkZXBsb3lpbmcgaGFjayBvbiBwdXJjaGFzZWQgc2VydmVycy4uLlwiKTtcclxuICAgIGNvbnN0IGhhY2tUb0RlcGxveSA9IG5zLmFyZ3NbMF0udG9TdHJpbmcoKTtcclxuICAgIGNvbnN0IGhhY2tUYXJnZXQgPSBucy5hcmdzWzFdLnRvU3RyaW5nKCk7XHJcbiAgICBsZXQgaGFja2VkQ291bnQgPSAwO1xyXG4gICAgbGV0IGkgPSAxO1xyXG4gICAgd2hpbGUgKGkgPCBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpKSB7XHJcbiAgICAgICAgbGV0IGhvc3RuYW1lID0gXCJwc2Vydi1cIi5jb25jYXQoaS50b1N0cmluZygpKTtcclxuICAgICAgICBucy5raWxsYWxsKGhvc3RuYW1lKTtcclxuICAgICAgICBsZXQgdGhyZWFkc1RvVXNlID0gTWF0aC5tYXgoMSwgKG5zLmdldFNlcnZlck1heFJhbShob3N0bmFtZSkgLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKGhvc3RuYW1lKSkgLyBucy5nZXRTY3JpcHRSYW0oaGFja1RvRGVwbG95KSk7XHJcbiAgICAgICAgbnMuc2NwKGhhY2tUb0RlcGxveSwgaG9zdG5hbWUpOyAgXHJcbiAgICAgICAgbnMuZXhlYyhoYWNrVG9EZXBsb3ksIGhvc3RuYW1lLCB+fnRocmVhZHNUb1VzZSwgaGFja1RhcmdldClcclxuICAgICAgICBpZiAobnMuc2NyaXB0UnVubmluZyhoYWNrVG9EZXBsb3ksIGhvc3RuYW1lKSkge1xyXG4gICAgICAgICAgICBucy50cHJpbnQoYElORk86IC4uLmhhY2sgZGVwbG95ZWQgdXNpbmcgJHtjb2xvcnMuTWFnZW50YX0ke35+dGhyZWFkc1RvVXNlfSR7Y29sb3JzLlJlc2V0fSB0aHJlYWRzIG9uICR7Y29sb3JzLkN5YW59JHtob3N0bmFtZX0ke2NvbG9ycy5SZXNldH1gKVxyXG4gICAgICAgICAgICArK2hhY2tlZENvdW50O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgKytpO1xyXG4gICAgfVxyXG4gICAgbnMudHByaW50KGBJTkZPOiBoYWNrcyBkZXBsb3llZCBvbiAke2NvbG9ycy5HcmVlbn0ke2hhY2tlZENvdW50fSR7Y29sb3JzLlJlc2V0fSBwdXJjaGFzZWQgc2VydmVyc2ApO1xyXG59Il19\",\"filename\":\"start-purchased-servers.js\",\"server\":\"home\"}}],[\"hack-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d 10/11/23\\r\\nimport { colors } from \\\"./colors\\\";\\r\\nimport { buildScannedServerList } from \\\"./scan-servers\\\";\\r\\nimport { openPorts } from \\\"./open-ports\\\";\\r\\n/**\\r\\n * @param {NS} ns Netscript namespace\\r\\n */\\r\\n/**\\r\\n * TODO: write a logger script that will log all the things - might be unnecessary?  i'm only after a better way to format the terminal output\\r\\n * TODO: add a check to find existing purchased servers, and then purchase them if they don't exist\\r\\n * TODO: abstract this mess of a script so that each snippet is its own, call-able script that can be used in other scripts\\r\\n * TODO: check for different deepscan exe's to probe to the appropriate depth\\r\\n * TODO: hack target??  from Documentation/beginner's guide:\\r\\n *      \\\"your hacking target should be the  with highest max money that's required hacking level is under 1/2 of your hacking level.\\\"\\r\\n *\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    const hackToDeploy = ns.args[0]?.toString();\\r\\n    const includeHome = (ns.args[1]?.toString() === \\\"-h\\\");\\r\\n    let scanDepth = 3;\\r\\n    if (ns.fileExists(\\\"DeepscanV1.exe\\\"))\\r\\n        scanDepth = 5;\\r\\n    if (ns.fileExists(\\\"DeepscanV2.exe\\\"))\\r\\n        scanDepth = 10;\\r\\n    ns.tprint(\\\"INFO: hack initiated...\\\");\\r\\n    if (hackToDeploy) {\\r\\n        let serverList = await buildScannedServerList(ns, scanDepth);\\r\\n        ns.tprint(`INFO: found ${colors.Cyan}${serverList.length}${colors.Reset} servers during scan of depth ${colors.Magenta}${scanDepth}${colors.Reset}...`);\\r\\n        const hackTarget = `joesguns`; //serverWithMostMoney(ns, serverList);\\r\\n        ns.tprint(`INFO: 🎯${colors.Green}${hackTarget}${colors.Reset} `);\\r\\n        ns.tprint(`INFO: ...attempting to hack servers...`);\\r\\n        serverList.forEach((hostname) => {\\r\\n            ns.scp(hackToDeploy, hostname);\\r\\n            if (!ns.hasRootAccess(hostname)) {\\r\\n                ns.tprint(`WARN: ${colors.Cyan}${hostname}${colors.Reset} does not have root access. attempting root...`);\\r\\n                openPorts(ns, hostname);\\r\\n                try {\\r\\n                    ns.nuke(hostname);\\r\\n                    ns.tprint(`INFO: ...root access granted!`);\\r\\n                }\\r\\n                catch {\\r\\n                    ns.tprint(`ERROR: ...root access denied! cannot hack ${colors.Cyan}${hostname}${colors.Reset}!`);\\r\\n                }\\r\\n            }\\r\\n            // at this point the server _should_ have root access,\\r\\n            // but still could have failed to deploy NUKE.exe\\r\\n            // so check for root access again before deploying hack\\r\\n            // and make sure hacking skill is high enough, no sense in hacking without the skill required!\\r\\n            if (ns.hasRootAccess(hostname)) { //&& ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname)) {\\r\\n                ns.killall(hostname);\\r\\n                let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n                ns.tprint(`INFO: deploying hack to server: ${colors.Cyan}${hostname}${colors.Reset}`);\\r\\n                ns.exec(hackToDeploy, hostname, ~~threadsToUse, hackTarget);\\r\\n                if (ns.scriptRunning(hackToDeploy, hostname))\\r\\n                    ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads!`);\\r\\n            }\\r\\n        });\\r\\n        // TODO: add a check to find existing purchased servers and then purchase them if they don't exist\\r\\n        if (ns.scan().includes(`pserv-1`))\\r\\n            ns.run(\\\"start-purchased-servers.js\\\", 1, hackToDeploy, hackTarget);\\r\\n        else\\r\\n            ns.tprint(\\\"INFO: no purchased servers, skipping...\\\");\\r\\n        if (includeHome)\\r\\n            ns.run(\\\"start-home-server.js\\\", 1, hackToDeploy, hackTarget, \\\"-k\\\");\\r\\n        else\\r\\n            ns.tprint(\\\"INFO: skipping home server. use 2nd arg '-h' to include home server in hacktivities.\\\");\\r\\n        ns.toast(\\\"hacks deployed!\\\");\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(\\\"ERROR: no hack to deploy. include script name! use 2nd arg '-h' to include home server in hacktivities.\\\");\\r\\n    }\\r\\n    ;\\r\\n}\\r\\n/**\\r\\n * @remarks If the money available on the current server is greater than the money available on the accumulator server,\\r\\n * @remarks the callback function returns the name of the current server (b), otherwise it returns the name of the accumulator server (a).\\r\\n * @remarks This process continues until all servers in the array have been compared, at which point the name of the server with the highest amount of money available is returned.\\r\\n * @param ns Netscript namespace\\r\\n * @param serverList List of scanned servers\\r\\n * @returns The server hostname that has the most money available, the server hostname will be a string.\\r\\n */\\r\\nconst serverWithMostMoney = (ns, serverList) => {\\r\\n    const servers = serverList.filter((server) => server !== \\\"home\\\" && !/pserv-\\\\d/.test(server));\\r\\n    return servers.reduce((accumulator, currentValue) => {\\r\\n        return ns.getServerMoneyAvailable(currentValue) > ns.getServerMoneyAvailable(accumulator)\\r\\n            ? currentValue\\r\\n            : accumulator;\\r\\n    });\\r\\n};\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1zZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhY2stc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFDN0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXpDOztHQUVHO0FBRUg7Ozs7Ozs7O0dBUUc7QUFFSCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sWUFBWSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDcEQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQ3RELElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNsQixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUM7UUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ25ELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUFFLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFFcEQsRUFBRSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ3JDLElBQUksWUFBWSxFQUFFO1FBQ2QsSUFBSSxVQUFVLEdBQUcsTUFBTSxzQkFBc0IsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDN0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyxlQUFlLE1BQU0sQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxpQ0FBaUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUM7UUFFeEosTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLENBQUMsc0NBQXNDO1FBQ3JFLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVyxNQUFNLENBQUMsS0FBSyxHQUFHLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUVsRSxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWdCLEVBQUUsRUFBRTtZQUNwQyxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDN0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLGdEQUFnRCxDQUFDLENBQUM7Z0JBQzFHLFNBQVMsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ3hCLElBQUk7b0JBQ0EsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO2lCQUM5QztnQkFDRCxNQUFNO29CQUNGLEVBQUUsQ0FBQyxNQUFNLENBQUMsNkNBQTZDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2lCQUNwRzthQUNKO1lBRUQsc0RBQXNEO1lBQ3RELGlEQUFpRDtZQUNqRCx1REFBdUQ7WUFDdkQsOEZBQThGO1lBQzlGLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLDBFQUEwRTtnQkFDeEcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDckIsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztnQkFDL0gsRUFBRSxDQUFDLE1BQU0sQ0FBQyxtQ0FBbUMsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBRXRGLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO2dCQUM1RCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQztvQkFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLEtBQUssV0FBVyxDQUFDLENBQUM7YUFDdEo7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILGtHQUFrRztRQUNsRyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO1lBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDOztZQUNoRyxFQUFFLENBQUMsTUFBTSxDQUFDLHlDQUF5QyxDQUFDLENBQUM7UUFFMUQsSUFBSSxXQUFXO1lBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQzs7WUFDOUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxzRkFBc0YsQ0FBQyxDQUFDO1FBRXZHLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztLQUMvQjtTQUNJO1FBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyx5R0FBeUcsQ0FBQyxDQUFDO0tBQ3hIO0lBQUEsQ0FBQztBQUNOLENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEVBQU0sRUFBRSxVQUFlLEVBQUUsRUFBRTtJQUNwRCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3JHLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQW1CLEVBQUUsWUFBb0IsRUFBRSxFQUFFO1FBQ2xFLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLENBQUM7WUFDdkYsQ0FBQyxDQUFDLFlBQVk7WUFDZCxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ2xCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlZCBieSBqX19yMGQgMTAvMTEvMjNcclxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSBcIi4vY29sb3JzXCI7XHJcbmltcG9ydCB7IGJ1aWxkU2Nhbm5lZFNlcnZlckxpc3QgfSBmcm9tIFwiLi9zY2FuLXNlcnZlcnNcIjtcclxuaW1wb3J0IHsgb3BlblBvcnRzIH0gZnJvbSBcIi4vb3Blbi1wb3J0c1wiO1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuLyoqIFxyXG4gKiBAcGFyYW0ge05TfSBucyBOZXRzY3JpcHQgbmFtZXNwYWNlXHJcbiAqL1xyXG5cclxuLyoqIFxyXG4gKiBUT0RPOiB3cml0ZSBhIGxvZ2dlciBzY3JpcHQgdGhhdCB3aWxsIGxvZyBhbGwgdGhlIHRoaW5ncyAtIG1pZ2h0IGJlIHVubmVjZXNzYXJ5PyAgaSdtIG9ubHkgYWZ0ZXIgYSBiZXR0ZXIgd2F5IHRvIGZvcm1hdCB0aGUgdGVybWluYWwgb3V0cHV0XHJcbiAqIFRPRE86IGFkZCBhIGNoZWNrIHRvIGZpbmQgZXhpc3RpbmcgcHVyY2hhc2VkIHNlcnZlcnMsIGFuZCB0aGVuIHB1cmNoYXNlIHRoZW0gaWYgdGhleSBkb24ndCBleGlzdFxyXG4gKiBUT0RPOiBhYnN0cmFjdCB0aGlzIG1lc3Mgb2YgYSBzY3JpcHQgc28gdGhhdCBlYWNoIHNuaXBwZXQgaXMgaXRzIG93biwgY2FsbC1hYmxlIHNjcmlwdCB0aGF0IGNhbiBiZSB1c2VkIGluIG90aGVyIHNjcmlwdHNcclxuICogVE9ETzogY2hlY2sgZm9yIGRpZmZlcmVudCBkZWVwc2NhbiBleGUncyB0byBwcm9iZSB0byB0aGUgYXBwcm9wcmlhdGUgZGVwdGhcclxuICogVE9ETzogaGFjayB0YXJnZXQ/PyAgZnJvbSBEb2N1bWVudGF0aW9uL2JlZ2lubmVyJ3MgZ3VpZGU6IFxyXG4gKiAgICAgIFwieW91ciBoYWNraW5nIHRhcmdldCBzaG91bGQgYmUgdGhlICB3aXRoIGhpZ2hlc3QgbWF4IG1vbmV5IHRoYXQncyByZXF1aXJlZCBoYWNraW5nIGxldmVsIGlzIHVuZGVyIDEvMiBvZiB5b3VyIGhhY2tpbmcgbGV2ZWwuXCJcclxuICogXHJcbiAqL1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBjb25zdCBoYWNrVG9EZXBsb3k6IHN0cmluZyA9IG5zLmFyZ3NbMF0/LnRvU3RyaW5nKCk7XHJcbiAgICBjb25zdCBpbmNsdWRlSG9tZSA9IChucy5hcmdzWzFdPy50b1N0cmluZygpID09PSBcIi1oXCIpO1xyXG4gICAgbGV0IHNjYW5EZXB0aCA9IDM7IFxyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoXCJEZWVwc2NhblYxLmV4ZVwiKSkgc2NhbkRlcHRoID0gNTtcclxuICAgIGlmIChucy5maWxlRXhpc3RzKFwiRGVlcHNjYW5WMi5leGVcIikpIHNjYW5EZXB0aCA9IDEwO1xyXG4gICAgXHJcbiAgICBucy50cHJpbnQoXCJJTkZPOiBoYWNrIGluaXRpYXRlZC4uLlwiKTtcclxuICAgIGlmIChoYWNrVG9EZXBsb3kpIHtcclxuICAgICAgICBsZXQgc2VydmVyTGlzdCA9IGF3YWl0IGJ1aWxkU2Nhbm5lZFNlcnZlckxpc3QobnMsIHNjYW5EZXB0aCk7XHJcbiAgICAgICAgbnMudHByaW50KGBJTkZPOiBmb3VuZCAke2NvbG9ycy5DeWFufSR7c2VydmVyTGlzdC5sZW5ndGh9JHtjb2xvcnMuUmVzZXR9IHNlcnZlcnMgZHVyaW5nIHNjYW4gb2YgZGVwdGggJHtjb2xvcnMuTWFnZW50YX0ke3NjYW5EZXB0aH0ke2NvbG9ycy5SZXNldH0uLi5gKTtcclxuXHJcbiAgICAgICAgY29uc3QgaGFja1RhcmdldCA9IGBqb2VzZ3Vuc2A7IC8vc2VydmVyV2l0aE1vc3RNb25leShucywgc2VydmVyTGlzdCk7XHJcbiAgICAgICAgbnMudHByaW50KGBJTkZPOiDwn46vJHtjb2xvcnMuR3JlZW59JHtoYWNrVGFyZ2V0fSR7Y29sb3JzLlJlc2V0fSBgKTtcclxuXHJcbiAgICAgICAgbnMudHByaW50KGBJTkZPOiAuLi5hdHRlbXB0aW5nIHRvIGhhY2sgc2VydmVycy4uLmApO1xyXG4gICAgICAgIHNlcnZlckxpc3QuZm9yRWFjaCgoaG9zdG5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBucy5zY3AoaGFja1RvRGVwbG95LCBob3N0bmFtZSk7XHJcbiAgICAgICAgICAgIGlmICghbnMuaGFzUm9vdEFjY2Vzcyhob3N0bmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIG5zLnRwcmludChgV0FSTjogJHtjb2xvcnMuQ3lhbn0ke2hvc3RuYW1lfSR7Y29sb3JzLlJlc2V0fSBkb2VzIG5vdCBoYXZlIHJvb3QgYWNjZXNzLiBhdHRlbXB0aW5nIHJvb3QuLi5gKTtcclxuICAgICAgICAgICAgICAgIG9wZW5Qb3J0cyhucywgaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBucy5udWtlKGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBucy50cHJpbnQoYElORk86IC4uLnJvb3QgYWNjZXNzIGdyYW50ZWQhYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnMudHByaW50KGBFUlJPUjogLi4ucm9vdCBhY2Nlc3MgZGVuaWVkISBjYW5ub3QgaGFjayAke2NvbG9ycy5DeWFufSR7aG9zdG5hbWV9JHtjb2xvcnMuUmVzZXR9IWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhdCB0aGlzIHBvaW50IHRoZSBzZXJ2ZXIgX3Nob3VsZF8gaGF2ZSByb290IGFjY2VzcyxcclxuICAgICAgICAgICAgLy8gYnV0IHN0aWxsIGNvdWxkIGhhdmUgZmFpbGVkIHRvIGRlcGxveSBOVUtFLmV4ZVxyXG4gICAgICAgICAgICAvLyBzbyBjaGVjayBmb3Igcm9vdCBhY2Nlc3MgYWdhaW4gYmVmb3JlIGRlcGxveWluZyBoYWNrXHJcbiAgICAgICAgICAgIC8vIGFuZCBtYWtlIHN1cmUgaGFja2luZyBza2lsbCBpcyBoaWdoIGVub3VnaCwgbm8gc2Vuc2UgaW4gaGFja2luZyB3aXRob3V0IHRoZSBza2lsbCByZXF1aXJlZCFcclxuICAgICAgICAgICAgaWYgKG5zLmhhc1Jvb3RBY2Nlc3MoaG9zdG5hbWUpKSB7IC8vJiYgbnMuZ2V0SGFja2luZ0xldmVsKCkgPj0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoaG9zdG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBucy5raWxsYWxsKGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgIGxldCB0aHJlYWRzVG9Vc2UgPSBNYXRoLm1heCgxLCAobnMuZ2V0U2VydmVyTWF4UmFtKGhvc3RuYW1lKSAtIG5zLmdldFNlcnZlclVzZWRSYW0oaG9zdG5hbWUpKSAvIG5zLmdldFNjcmlwdFJhbShoYWNrVG9EZXBsb3kpKTtcclxuICAgICAgICAgICAgICAgIG5zLnRwcmludChgSU5GTzogZGVwbG95aW5nIGhhY2sgdG8gc2VydmVyOiAke2NvbG9ycy5DeWFufSR7aG9zdG5hbWV9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIG5zLmV4ZWMoaGFja1RvRGVwbG95LCBob3N0bmFtZSwgfn50aHJlYWRzVG9Vc2UsIGhhY2tUYXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5zLnNjcmlwdFJ1bm5pbmcoaGFja1RvRGVwbG95LCBob3N0bmFtZSkpIG5zLnRwcmludChgSU5GTzogLi4uaGFjayBkZXBsb3llZCB1c2luZyAke2NvbG9ycy5NYWdlbnRhfSR7fn50aHJlYWRzVG9Vc2V9JHtjb2xvcnMuUmVzZXR9IHRocmVhZHMhYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gVE9ETzogYWRkIGEgY2hlY2sgdG8gZmluZCBleGlzdGluZyBwdXJjaGFzZWQgc2VydmVycyBhbmQgdGhlbiBwdXJjaGFzZSB0aGVtIGlmIHRoZXkgZG9uJ3QgZXhpc3RcclxuICAgICAgICBpZiAobnMuc2NhbigpLmluY2x1ZGVzKGBwc2Vydi0xYCkpIG5zLnJ1bihcInN0YXJ0LXB1cmNoYXNlZC1zZXJ2ZXJzLmpzXCIsIDEsIGhhY2tUb0RlcGxveSwgaGFja1RhcmdldCk7XHJcbiAgICAgICAgZWxzZSBucy50cHJpbnQoXCJJTkZPOiBubyBwdXJjaGFzZWQgc2VydmVycywgc2tpcHBpbmcuLi5cIik7XHJcblxyXG4gICAgICAgIGlmIChpbmNsdWRlSG9tZSkgbnMucnVuKFwic3RhcnQtaG9tZS1zZXJ2ZXIuanNcIiwgMSwgaGFja1RvRGVwbG95LCBoYWNrVGFyZ2V0LCBcIi1rXCIpO1xyXG4gICAgICAgIGVsc2UgbnMudHByaW50KFwiSU5GTzogc2tpcHBpbmcgaG9tZSBzZXJ2ZXIuIHVzZSAybmQgYXJnICctaCcgdG8gaW5jbHVkZSBob21lIHNlcnZlciBpbiBoYWNrdGl2aXRpZXMuXCIpO1xyXG5cclxuICAgICAgICBucy50b2FzdChcImhhY2tzIGRlcGxveWVkIVwiKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIG5zLnRwcmludChcIkVSUk9SOiBubyBoYWNrIHRvIGRlcGxveS4gaW5jbHVkZSBzY3JpcHQgbmFtZSEgdXNlIDJuZCBhcmcgJy1oJyB0byBpbmNsdWRlIGhvbWUgc2VydmVyIGluIGhhY2t0aXZpdGllcy5cIik7XHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogQHJlbWFya3MgSWYgdGhlIG1vbmV5IGF2YWlsYWJsZSBvbiB0aGUgY3VycmVudCBzZXJ2ZXIgaXMgZ3JlYXRlciB0aGFuIHRoZSBtb25leSBhdmFpbGFibGUgb24gdGhlIGFjY3VtdWxhdG9yIHNlcnZlciwgXHJcbiAqIEByZW1hcmtzIHRoZSBjYWxsYmFjayBmdW5jdGlvbiByZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IHNlcnZlciAoYiksIG90aGVyd2lzZSBpdCByZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBhY2N1bXVsYXRvciBzZXJ2ZXIgKGEpLiBcclxuICogQHJlbWFya3MgVGhpcyBwcm9jZXNzIGNvbnRpbnVlcyB1bnRpbCBhbGwgc2VydmVycyBpbiB0aGUgYXJyYXkgaGF2ZSBiZWVuIGNvbXBhcmVkLCBhdCB3aGljaCBwb2ludCB0aGUgbmFtZSBvZiB0aGUgc2VydmVyIHdpdGggdGhlIGhpZ2hlc3QgYW1vdW50IG9mIG1vbmV5IGF2YWlsYWJsZSBpcyByZXR1cm5lZC5cclxuICogQHBhcmFtIG5zIE5ldHNjcmlwdCBuYW1lc3BhY2VcclxuICogQHBhcmFtIHNlcnZlckxpc3QgTGlzdCBvZiBzY2FubmVkIHNlcnZlcnNcclxuICogQHJldHVybnMgVGhlIHNlcnZlciBob3N0bmFtZSB0aGF0IGhhcyB0aGUgbW9zdCBtb25leSBhdmFpbGFibGUsIHRoZSBzZXJ2ZXIgaG9zdG5hbWUgd2lsbCBiZSBhIHN0cmluZy5cclxuICovXHJcbmNvbnN0IHNlcnZlcldpdGhNb3N0TW9uZXkgPSAobnM6IE5TLCBzZXJ2ZXJMaXN0OiBhbnkpID0+IHtcclxuICAgIGNvbnN0IHNlcnZlcnMgPSBzZXJ2ZXJMaXN0LmZpbHRlcigoc2VydmVyOiBzdHJpbmcpID0+IHNlcnZlciAhPT0gXCJob21lXCIgJiYgIS9wc2Vydi1cXGQvLnRlc3Qoc2VydmVyKSk7XHJcbiAgICByZXR1cm4gc2VydmVycy5yZWR1Y2UoKGFjY3VtdWxhdG9yOiBzdHJpbmcsIGN1cnJlbnRWYWx1ZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHJldHVybiBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShjdXJyZW50VmFsdWUpID4gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoYWNjdW11bGF0b3IpXHJcbiAgICAgICAgPyBjdXJyZW50VmFsdWVcclxuICAgICAgICA6IGFjY3VtdWxhdG9yO1xyXG4gICAgfSk7XHJcbiAgfTsiXX0=\",\"filename\":\"hack-servers.js\",\"server\":\"home\"}}],[\"start-home-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from \\\"./colors\\\";\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(`INFO: deploying hack on ${colors.Cyan}home${colors.Reset} server...`);\\r\\n    const hackToDeploy = ns.args[0]?.toString();\\r\\n    const hackTarget = ns.args[1]?.toString();\\r\\n    const killallFlag = ns.args[2]?.toString() === \\\"-k\\\";\\r\\n    let hostname = \\\"home\\\";\\r\\n    if (killallFlag)\\r\\n        ns.killall();\\r\\n    let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n    ns.run(hackToDeploy, ~~threadsToUse, hackTarget);\\r\\n    if (ns.scriptRunning(hackToDeploy, \\\"home\\\"))\\r\\n        ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtaG9tZS1zZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RhcnQtaG9tZS1zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLDJCQUEyQixNQUFNLENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLFlBQVksQ0FBQyxDQUFDO0lBQ2pGLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDNUMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUMxQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQztJQUNwRCxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFDdEIsSUFBSSxXQUFXO1FBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDL0gsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0NBQWdDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQztBQUNwSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlZCBieSBqX19yMGQgMTAvMTEvMjNcclxuaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuL2NvbG9yc1wiO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudHByaW50KGBJTkZPOiBkZXBsb3lpbmcgaGFjayBvbiAke2NvbG9ycy5DeWFufWhvbWUke2NvbG9ycy5SZXNldH0gc2VydmVyLi4uYCk7XHJcbiAgICBjb25zdCBoYWNrVG9EZXBsb3kgPSBucy5hcmdzWzBdPy50b1N0cmluZygpOyBcclxuICAgIGNvbnN0IGhhY2tUYXJnZXQgPSBucy5hcmdzWzFdPy50b1N0cmluZygpO1xyXG4gICAgY29uc3Qga2lsbGFsbEZsYWcgPSBucy5hcmdzWzJdPy50b1N0cmluZygpID09PSBcIi1rXCI7XHJcbiAgICBsZXQgaG9zdG5hbWUgPSBcImhvbWVcIjtcclxuICAgIGlmIChraWxsYWxsRmxhZykgbnMua2lsbGFsbCgpO1xyXG4gICAgbGV0IHRocmVhZHNUb1VzZSA9IE1hdGgubWF4KDEsIChucy5nZXRTZXJ2ZXJNYXhSYW0oaG9zdG5hbWUpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShob3N0bmFtZSkpIC8gbnMuZ2V0U2NyaXB0UmFtKGhhY2tUb0RlcGxveSkpO1xyXG4gICAgbnMucnVuKGhhY2tUb0RlcGxveSwgfn50aHJlYWRzVG9Vc2UsIGhhY2tUYXJnZXQpO1xyXG4gICAgaWYgKG5zLnNjcmlwdFJ1bm5pbmcoaGFja1RvRGVwbG95LCBcImhvbWVcIikpIG5zLnRwcmludChgSU5GTzogLi4uaGFjayBkZXBsb3llZCB1c2luZyAke2NvbG9ycy5NYWdlbnRhfSR7fn50aHJlYWRzVG9Vc2V9JHtjb2xvcnMuUmVzZXR9IHRocmVhZHNgKTtcclxufSJdfQ==\",\"filename\":\"start-home-server.js\",\"server\":\"home\"}}],[\"colors.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d 10/11/23\\r\\n// colors found on reddit\\r\\nexport const colors = {\\r\\n    Black: '\\\\u001b[30m',\\r\\n    Red: '\\\\u001b[31m',\\r\\n    Green: '\\\\u001b[32m',\\r\\n    Yellow: '\\\\u001b[33m',\\r\\n    Blue: '\\\\u001b[34m',\\r\\n    Magenta: '\\\\u001b[35m',\\r\\n    Cyan: '\\\\u001b[36m',\\r\\n    White: '\\\\u001b[37m',\\r\\n    BrightBlack: '\\\\u001b[30;1m',\\r\\n    BrightRed: '\\\\u001b[31;1m',\\r\\n    BrightGreen: '\\\\u001b[32;1m',\\r\\n    BrightYellow: '\\\\u001b[33;1m',\\r\\n    BrightBlue: '\\\\u001b[34;1m',\\r\\n    BrightMagenta: '\\\\u001b[35;1m',\\r\\n    BrightCyan: '\\\\u001b[36;1m',\\r\\n    BrightWhite: '\\\\u001b[37;1m',\\r\\n    Reset: \\\"\\\\u001b[0m\\\",\\r\\n};\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFDN0IseUJBQXlCO0FBQ3pCLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRztJQUNsQixLQUFLLEVBQUUsWUFBWTtJQUNuQixHQUFHLEVBQUUsWUFBWTtJQUNqQixLQUFLLEVBQUUsWUFBWTtJQUNuQixNQUFNLEVBQUUsWUFBWTtJQUNwQixJQUFJLEVBQUUsWUFBWTtJQUNsQixPQUFPLEVBQUUsWUFBWTtJQUNyQixJQUFJLEVBQUUsWUFBWTtJQUNsQixLQUFLLEVBQUUsWUFBWTtJQUNuQixXQUFXLEVBQUUsY0FBYztJQUMzQixTQUFTLEVBQUUsY0FBYztJQUN6QixXQUFXLEVBQUUsY0FBYztJQUMzQixZQUFZLEVBQUUsY0FBYztJQUM1QixVQUFVLEVBQUUsY0FBYztJQUMxQixhQUFhLEVBQUUsY0FBYztJQUM3QixVQUFVLEVBQUUsY0FBYztJQUMxQixXQUFXLEVBQUUsY0FBYztJQUMzQixLQUFLLEVBQUUsV0FBVztDQUNyQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlZCBieSBqX19yMGQgMTAvMTEvMjNcclxuLy8gY29sb3JzIGZvdW5kIG9uIHJlZGRpdFxyXG5leHBvcnQgY29uc3QgY29sb3JzID0ge1xyXG4gICAgQmxhY2s6ICdcXHUwMDFiWzMwbScsXHJcbiAgICBSZWQ6ICdcXHUwMDFiWzMxbScsXHJcbiAgICBHcmVlbjogJ1xcdTAwMWJbMzJtJyxcclxuICAgIFllbGxvdzogJ1xcdTAwMWJbMzNtJyxcclxuICAgIEJsdWU6ICdcXHUwMDFiWzM0bScsXHJcbiAgICBNYWdlbnRhOiAnXFx1MDAxYlszNW0nLFxyXG4gICAgQ3lhbjogJ1xcdTAwMWJbMzZtJyxcclxuICAgIFdoaXRlOiAnXFx1MDAxYlszN20nLFxyXG4gICAgQnJpZ2h0QmxhY2s6ICdcXHUwMDFiWzMwOzFtJyxcclxuICAgIEJyaWdodFJlZDogJ1xcdTAwMWJbMzE7MW0nLFxyXG4gICAgQnJpZ2h0R3JlZW46ICdcXHUwMDFiWzMyOzFtJyxcclxuICAgIEJyaWdodFllbGxvdzogJ1xcdTAwMWJbMzM7MW0nLFxyXG4gICAgQnJpZ2h0Qmx1ZTogJ1xcdTAwMWJbMzQ7MW0nLFxyXG4gICAgQnJpZ2h0TWFnZW50YTogJ1xcdTAwMWJbMzU7MW0nLFxyXG4gICAgQnJpZ2h0Q3lhbjogJ1xcdTAwMWJbMzY7MW0nLFxyXG4gICAgQnJpZ2h0V2hpdGU6ICdcXHUwMDFiWzM3OzFtJyxcclxuICAgIFJlc2V0OiBcIlxcdTAwMWJbMG1cIixcclxufSJdfQ==\",\"filename\":\"colors.js\",\"server\":\"home\"}}],[\"scan-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from \\\"./colors\\\";\\r\\n/** @param {NS} ns Netscript namespace */\\r\\nexport async function main(ns) {\\r\\n    // for testing in bitburner Terminal\\r\\n    let depth = ns.args[0].toString() || 3;\\r\\n    let serverList = await buildScannedServerList(ns, ~~depth);\\r\\n    ns.tprintf(`found ${colors.Cyan}${serverList.length}${colors.Reset} servers`);\\r\\n    ns.tprintf(`${colors.Cyan}${serverList}${colors.Reset}`);\\r\\n}\\r\\n/**\\r\\n * I gave Copilot this comment block and asked it to write the function for me, using what existing code I had as a base, so it would use the canAddServer function.\\r\\n *\\r\\n * if list is empty, do a scan(), which runs scan on home server and make a list of all scannedServers\\r\\n * add scannedServers to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done one scan and serverAdd\\r\\n * check that depth > 0\\r\\n * scan each of the serverList servers to get neighborsList and add neighborsList to scannedServers\\r\\n * add neighborsList to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done another scan\\r\\n * scan each of the neighborsList servers to get secondNeighborsList and add secondNeighborsList to scannedServers\\r\\n * add secondNeighborsList to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done another scan\\r\\n * if depth is ever 0, return serverList\\r\\n */\\r\\n/**\\r\\n * @remarks This function is a recursive function that scans servers to a given tree depth and returns a list of all servers to hack.\\r\\n * @param {NS} ns\\r\\n * @param depth scan depth; defaults to 1\\r\\n * @param serverList [Optional] running list of servers (is returned at end of recursion)\\r\\n * @param scannedServers [Optional] list of servers already scanned\\r\\n * @returns Array of all servers found up to specified depth.  The server hostnames in the returned array are string values.\\r\\n */\\r\\nexport async function buildScannedServerList(ns, depth, serverList = [], scannedServers = []) {\\r\\n    if (serverList.length === 0) {\\r\\n        scannedServers = ns.scan();\\r\\n        serverList = scannedServers.filter(server => canAddServer(server, serverList));\\r\\n        --depth;\\r\\n    }\\r\\n    while (depth > 0) {\\r\\n        const newServers = [];\\r\\n        for (const server of serverList) {\\r\\n            const neighbors = await ns.scan(server);\\r\\n            const newNeighbors = neighbors.filter(server => canAddServer(server, serverList.concat(newServers)));\\r\\n            newServers.push(...newNeighbors);\\r\\n            scannedServers.push(...newNeighbors);\\r\\n        }\\r\\n        serverList.push(...newServers);\\r\\n        --depth;\\r\\n    }\\r\\n    return serverList;\\r\\n}\\r\\n/**\\r\\n * the following function was created by Copilot after I asked a few questions about a better way to do this.\\r\\n * below was my attempt....clearly I wasn't thinking in the same direction at all,\\r\\n * however copilot _did_ use this code to generate its own code.\\r\\nexport function canAddServer(serverName: string, serverListName: string[]) {\\r\\n    if (!(serverListName.includes(serverName)) || !(serverName == \\\"home\\\" || \\\"darkweb\\\") || !serverName.includes(\\\"pserv\\\")) {\\r\\n        return true;\\r\\n    }\\r\\n    else {\\r\\n        return false;\\r\\n    }\\r\\n};\\r\\n*/\\r\\n/**\\r\\n *\\r\\n * @param serverHostname Name of server to check against forbidden servers and prefixes\\r\\n * @param serverListName List of servers to check against for duplicates\\r\\n * @returns\\r\\n */\\r\\nexport function canAddServer(serverHostname, serverListName) {\\r\\n    const forbiddenServers = ['home', 'darkweb'];\\r\\n    const forbiddenServerPrefixes = ['pserv-'];\\r\\n    const isForbiddenServer = forbiddenServers.some(forbiddenServer => forbiddenServer === serverHostname);\\r\\n    const isForbiddenServerPrefix = forbiddenServerPrefixes.some(prefix => serverHostname.startsWith(prefix));\\r\\n    const isDuplicateServer = serverListName.includes(serverHostname);\\r\\n    return !isForbiddenServer && !isDuplicateServer && !isForbiddenServerPrefix;\\r\\n}\\r\\n;\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi1zZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NjYW4tc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxDLHlDQUF5QztBQUN6QyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLG9DQUFvQztJQUNwQyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxJQUFJLFVBQVUsR0FBRyxNQUFNLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLE1BQU0sQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQTtJQUM3RSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDN0QsQ0FBQztBQUdEOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBRUg7Ozs7Ozs7R0FPRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsc0JBQXNCLENBQUMsRUFBTSxFQUFFLEtBQWEsRUFBRSxhQUF1QixFQUFFLEVBQUUsaUJBQTJCLEVBQUU7SUFDeEgsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN6QixjQUFjLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzNCLFVBQVUsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQy9FLEVBQUUsS0FBSyxDQUFDO0tBQ1g7SUFFRCxPQUFPLEtBQUssR0FBRyxDQUFDLEVBQUU7UUFDZCxNQUFNLFVBQVUsR0FBYSxFQUFFLENBQUM7UUFFaEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxVQUFVLEVBQUU7WUFDN0IsTUFBTSxTQUFTLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JHLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQztZQUNqQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUM7U0FDeEM7UUFFRCxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDL0IsRUFBRSxLQUFLLENBQUM7S0FDWDtJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3RCLENBQUM7QUFJRDs7Ozs7Ozs7Ozs7O0VBWUU7QUFFRjs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsY0FBc0IsRUFBRSxjQUF3QjtJQUN6RSxNQUFNLGdCQUFnQixHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUUzQyxNQUFNLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLGVBQWUsS0FBSyxjQUFjLENBQUMsQ0FBQztJQUN2RyxNQUFNLHVCQUF1QixHQUFHLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMxRyxNQUFNLGlCQUFpQixHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFbEUsT0FBTyxDQUFDLGlCQUFpQixJQUFJLENBQUMsaUJBQWlCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztBQUNoRixDQUFDO0FBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkIDEwLzEyLzIzXHJcbi8vIHNjYW5zIGFsbCBzZXJ2ZXJzIGFuZCBidWlsZHMgYSBsaXN0IG9mIHNlcnZlcnMgdG8gaGFja1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuL2NvbG9yc1wiO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zIE5ldHNjcmlwdCBuYW1lc3BhY2UgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICAvLyBmb3IgdGVzdGluZyBpbiBiaXRidXJuZXIgVGVybWluYWxcclxuICAgIGxldCBkZXB0aCA9IG5zLmFyZ3NbMF0udG9TdHJpbmcoKSB8fCAzO1xyXG4gICAgbGV0IHNlcnZlckxpc3QgPSBhd2FpdCBidWlsZFNjYW5uZWRTZXJ2ZXJMaXN0KG5zLCB+fmRlcHRoKTtcclxuICAgIG5zLnRwcmludGYoYGZvdW5kICR7Y29sb3JzLkN5YW59JHtzZXJ2ZXJMaXN0Lmxlbmd0aH0ke2NvbG9ycy5SZXNldH0gc2VydmVyc2ApXHJcbiAgICBucy50cHJpbnRmKGAke2NvbG9ycy5DeWFufSR7c2VydmVyTGlzdH0ke2NvbG9ycy5SZXNldH1gKTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBJIGdhdmUgQ29waWxvdCB0aGlzIGNvbW1lbnQgYmxvY2sgYW5kIGFza2VkIGl0IHRvIHdyaXRlIHRoZSBmdW5jdGlvbiBmb3IgbWUsIHVzaW5nIHdoYXQgZXhpc3RpbmcgY29kZSBJIGhhZCBhcyBhIGJhc2UsIHNvIGl0IHdvdWxkIHVzZSB0aGUgY2FuQWRkU2VydmVyIGZ1bmN0aW9uLlxyXG4gKiBcclxuICogaWYgbGlzdCBpcyBlbXB0eSwgZG8gYSBzY2FuKCksIHdoaWNoIHJ1bnMgc2NhbiBvbiBob21lIHNlcnZlciBhbmQgbWFrZSBhIGxpc3Qgb2YgYWxsIHNjYW5uZWRTZXJ2ZXJzXHJcbiAqIGFkZCBzY2FubmVkU2VydmVycyB0byBzZXJ2ZXJMaXN0IGlmIHRoZXkgY2FuIGJlIGFkZGVkIChub3QgZm9yYmlkZGVuLCBub3QgYSBkdXBsaWNhdGUsIG5vdCBhIHByZWZpeClcclxuICogZGVjcmVhc2UgZGVwdGggYmVjYXVzZSB3ZSd2ZSBkb25lIG9uZSBzY2FuIGFuZCBzZXJ2ZXJBZGRcclxuICogY2hlY2sgdGhhdCBkZXB0aCA+IDBcclxuICogc2NhbiBlYWNoIG9mIHRoZSBzZXJ2ZXJMaXN0IHNlcnZlcnMgdG8gZ2V0IG5laWdoYm9yc0xpc3QgYW5kIGFkZCBuZWlnaGJvcnNMaXN0IHRvIHNjYW5uZWRTZXJ2ZXJzXHJcbiAqIGFkZCBuZWlnaGJvcnNMaXN0IHRvIHNlcnZlckxpc3QgaWYgdGhleSBjYW4gYmUgYWRkZWQgKG5vdCBmb3JiaWRkZW4sIG5vdCBhIGR1cGxpY2F0ZSwgbm90IGEgcHJlZml4KVxyXG4gKiBkZWNyZWFzZSBkZXB0aCBiZWNhdXNlIHdlJ3ZlIGRvbmUgYW5vdGhlciBzY2FuXHJcbiAqIHNjYW4gZWFjaCBvZiB0aGUgbmVpZ2hib3JzTGlzdCBzZXJ2ZXJzIHRvIGdldCBzZWNvbmROZWlnaGJvcnNMaXN0IGFuZCBhZGQgc2Vjb25kTmVpZ2hib3JzTGlzdCB0byBzY2FubmVkU2VydmVyc1xyXG4gKiBhZGQgc2Vjb25kTmVpZ2hib3JzTGlzdCB0byBzZXJ2ZXJMaXN0IGlmIHRoZXkgY2FuIGJlIGFkZGVkIChub3QgZm9yYmlkZGVuLCBub3QgYSBkdXBsaWNhdGUsIG5vdCBhIHByZWZpeClcclxuICogZGVjcmVhc2UgZGVwdGggYmVjYXVzZSB3ZSd2ZSBkb25lIGFub3RoZXIgc2NhblxyXG4gKiBpZiBkZXB0aCBpcyBldmVyIDAsIHJldHVybiBzZXJ2ZXJMaXN0XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIFRoaXMgZnVuY3Rpb24gaXMgYSByZWN1cnNpdmUgZnVuY3Rpb24gdGhhdCBzY2FucyBzZXJ2ZXJzIHRvIGEgZ2l2ZW4gdHJlZSBkZXB0aCBhbmQgcmV0dXJucyBhIGxpc3Qgb2YgYWxsIHNlcnZlcnMgdG8gaGFjay5cclxuICogQHBhcmFtIHtOU30gbnMgXHJcbiAqIEBwYXJhbSBkZXB0aCBzY2FuIGRlcHRoOyBkZWZhdWx0cyB0byAxXHJcbiAqIEBwYXJhbSBzZXJ2ZXJMaXN0IFtPcHRpb25hbF0gcnVubmluZyBsaXN0IG9mIHNlcnZlcnMgKGlzIHJldHVybmVkIGF0IGVuZCBvZiByZWN1cnNpb24pXHJcbiAqIEBwYXJhbSBzY2FubmVkU2VydmVycyBbT3B0aW9uYWxdIGxpc3Qgb2Ygc2VydmVycyBhbHJlYWR5IHNjYW5uZWRcclxuICogQHJldHVybnMgQXJyYXkgb2YgYWxsIHNlcnZlcnMgZm91bmQgdXAgdG8gc3BlY2lmaWVkIGRlcHRoLiAgVGhlIHNlcnZlciBob3N0bmFtZXMgaW4gdGhlIHJldHVybmVkIGFycmF5IGFyZSBzdHJpbmcgdmFsdWVzLiBcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBidWlsZFNjYW5uZWRTZXJ2ZXJMaXN0KG5zOiBOUywgZGVwdGg6IG51bWJlciwgc2VydmVyTGlzdDogc3RyaW5nW10gPSBbXSwgc2Nhbm5lZFNlcnZlcnM6IHN0cmluZ1tdID0gW10pIHtcclxuICAgIGlmIChzZXJ2ZXJMaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHNjYW5uZWRTZXJ2ZXJzID0gbnMuc2NhbigpO1xyXG4gICAgICAgIHNlcnZlckxpc3QgPSBzY2FubmVkU2VydmVycy5maWx0ZXIoc2VydmVyID0+IGNhbkFkZFNlcnZlcihzZXJ2ZXIsIHNlcnZlckxpc3QpKTtcclxuICAgICAgICAtLWRlcHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHdoaWxlIChkZXB0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBuZXdTZXJ2ZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHNlcnZlciBvZiBzZXJ2ZXJMaXN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5laWdoYm9ycyA9IGF3YWl0IG5zLnNjYW4oc2VydmVyKTtcclxuICAgICAgICAgICAgY29uc3QgbmV3TmVpZ2hib3JzID0gbmVpZ2hib3JzLmZpbHRlcihzZXJ2ZXIgPT4gY2FuQWRkU2VydmVyKHNlcnZlciwgc2VydmVyTGlzdC5jb25jYXQobmV3U2VydmVycykpKTtcclxuICAgICAgICAgICAgbmV3U2VydmVycy5wdXNoKC4uLm5ld05laWdoYm9ycyk7XHJcbiAgICAgICAgICAgIHNjYW5uZWRTZXJ2ZXJzLnB1c2goLi4ubmV3TmVpZ2hib3JzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlcnZlckxpc3QucHVzaCguLi5uZXdTZXJ2ZXJzKTtcclxuICAgICAgICAtLWRlcHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJMaXN0O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uIHdhcyBjcmVhdGVkIGJ5IENvcGlsb3QgYWZ0ZXIgSSBhc2tlZCBhIGZldyBxdWVzdGlvbnMgYWJvdXQgYSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXMuXHJcbiAqIGJlbG93IHdhcyBteSBhdHRlbXB0Li4uLmNsZWFybHkgSSB3YXNuJ3QgdGhpbmtpbmcgaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGF0IGFsbCxcclxuICogaG93ZXZlciBjb3BpbG90IF9kaWRfIHVzZSB0aGlzIGNvZGUgdG8gZ2VuZXJhdGUgaXRzIG93biBjb2RlLlxyXG5leHBvcnQgZnVuY3Rpb24gY2FuQWRkU2VydmVyKHNlcnZlck5hbWU6IHN0cmluZywgc2VydmVyTGlzdE5hbWU6IHN0cmluZ1tdKSB7XHJcbiAgICBpZiAoIShzZXJ2ZXJMaXN0TmFtZS5pbmNsdWRlcyhzZXJ2ZXJOYW1lKSkgfHwgIShzZXJ2ZXJOYW1lID09IFwiaG9tZVwiIHx8IFwiZGFya3dlYlwiKSB8fCAhc2VydmVyTmFtZS5pbmNsdWRlcyhcInBzZXJ2XCIpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn07IFxyXG4qL1xyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0gc2VydmVySG9zdG5hbWUgTmFtZSBvZiBzZXJ2ZXIgdG8gY2hlY2sgYWdhaW5zdCBmb3JiaWRkZW4gc2VydmVycyBhbmQgcHJlZml4ZXNcclxuICogQHBhcmFtIHNlcnZlckxpc3ROYW1lIExpc3Qgb2Ygc2VydmVycyB0byBjaGVjayBhZ2FpbnN0IGZvciBkdXBsaWNhdGVzXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbkFkZFNlcnZlcihzZXJ2ZXJIb3N0bmFtZTogc3RyaW5nLCBzZXJ2ZXJMaXN0TmFtZTogc3RyaW5nW10pIHtcclxuICAgIGNvbnN0IGZvcmJpZGRlblNlcnZlcnMgPSBbJ2hvbWUnLCAnZGFya3dlYiddO1xyXG4gICAgY29uc3QgZm9yYmlkZGVuU2VydmVyUHJlZml4ZXMgPSBbJ3BzZXJ2LSddO1xyXG5cclxuICAgIGNvbnN0IGlzRm9yYmlkZGVuU2VydmVyID0gZm9yYmlkZGVuU2VydmVycy5zb21lKGZvcmJpZGRlblNlcnZlciA9PiBmb3JiaWRkZW5TZXJ2ZXIgPT09IHNlcnZlckhvc3RuYW1lKTtcclxuICAgIGNvbnN0IGlzRm9yYmlkZGVuU2VydmVyUHJlZml4ID0gZm9yYmlkZGVuU2VydmVyUHJlZml4ZXMuc29tZShwcmVmaXggPT4gc2VydmVySG9zdG5hbWUuc3RhcnRzV2l0aChwcmVmaXgpKTtcclxuICAgIGNvbnN0IGlzRHVwbGljYXRlU2VydmVyID0gc2VydmVyTGlzdE5hbWUuaW5jbHVkZXMoc2VydmVySG9zdG5hbWUpO1xyXG5cclxuICAgIHJldHVybiAhaXNGb3JiaWRkZW5TZXJ2ZXIgJiYgIWlzRHVwbGljYXRlU2VydmVyICYmICFpc0ZvcmJpZGRlblNlcnZlclByZWZpeDtcclxufTtcclxuXHJcblxyXG4iXX0=\",\"filename\":\"scan-servers.js\",\"server\":\"home\"}}],[\"purchase-server-16gb.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// the contents of this script came from the Beginner's Guide in the game's documentation...\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // How much RAM each purchased server will have. In this case, it'll\\r\\n    // be 8GB.\\r\\n    const ram = 16;\\r\\n    // Iterator we'll use for our loop\\r\\n    let i = 1; // changed to 1 by j__r0d because 1 is a better place to start than 0 for this counter\\r\\n    // Continuously try to purchase servers until we've reached the maximum\\r\\n    // amount of servers\\r\\n    while (i < ns.getPurchasedServerLimit()) {\\r\\n        // Check if we have enough money to purchase a server\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\r\\n            // If we have enough money, then:\\r\\n            //  1. Purchase the server\\r\\n            //  2. Copy our hacking script onto the newly-purchased server\\r\\n            //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n            //  4. Increment our iterator to indicate that we've bought a new server\\r\\n            let hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n            ns.scp(\\\"early-hack-template.js\\\", hostname);\\r\\n            ns.exec(\\\"early-hack-template.js\\\", hostname, 3);\\r\\n            ++i;\\r\\n        }\\r\\n        //Make the script wait for a second before looping again.\\r\\n        //Removing this line will cause an infinite loop and crash the game.\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2Utc2VydmVyLTE2Z2IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcHVyY2hhc2Utc2VydmVyLTE2Z2IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNEZBQTRGO0FBRTVGLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLG9FQUFvRTtJQUNwRSxVQUFVO0lBQ1YsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBRWYsa0NBQWtDO0lBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLHNGQUFzRjtJQUVqRyx1RUFBdUU7SUFDdkUsb0JBQW9CO0lBQ3BCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1FBQ3JDLHFEQUFxRDtRQUNyRCxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckUsaUNBQWlDO1lBQ2pDLDBCQUEwQjtZQUMxQiw4REFBOEQ7WUFDOUQsMEVBQTBFO1lBQzFFLHdFQUF3RTtZQUN4RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDcEQsRUFBRSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUMzQyxFQUFFLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQyxFQUFFLENBQUMsQ0FBQztTQUNQO1FBQ0QseURBQXlEO1FBQ3pELG9FQUFvRTtRQUNwRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDeEI7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdGhlIGNvbnRlbnRzIG9mIHRoaXMgc2NyaXB0IGNhbWUgZnJvbSB0aGUgQmVnaW5uZXIncyBHdWlkZSBpbiB0aGUgZ2FtZSdzIGRvY3VtZW50YXRpb24uLi5cclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogYW55KSB7XHJcbiAgICAvLyBIb3cgbXVjaCBSQU0gZWFjaCBwdXJjaGFzZWQgc2VydmVyIHdpbGwgaGF2ZS4gSW4gdGhpcyBjYXNlLCBpdCdsbFxyXG4gICAgLy8gYmUgOEdCLlxyXG4gICAgY29uc3QgcmFtID0gMTY7XHJcblxyXG4gICAgLy8gSXRlcmF0b3Igd2UnbGwgdXNlIGZvciBvdXIgbG9vcFxyXG4gICAgbGV0IGkgPSAxOyAvLyBjaGFuZ2VkIHRvIDEgYnkgal9fcjBkIGJlY2F1c2UgMSBpcyBhIGJldHRlciBwbGFjZSB0byBzdGFydCB0aGFuIDAgZm9yIHRoaXMgY291bnRlclxyXG5cclxuICAgIC8vIENvbnRpbnVvdXNseSB0cnkgdG8gcHVyY2hhc2Ugc2VydmVycyB1bnRpbCB3ZSd2ZSByZWFjaGVkIHRoZSBtYXhpbXVtXHJcbiAgICAvLyBhbW91bnQgb2Ygc2VydmVyc1xyXG4gICAgd2hpbGUgKGkgPCBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggbW9uZXkgdG8gcHVyY2hhc2UgYSBzZXJ2ZXJcclxuICAgICAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoXCJob21lXCIpID4gbnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChyYW0pKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgZW5vdWdoIG1vbmV5LCB0aGVuOlxyXG4gICAgICAgICAgICAvLyAgMS4gUHVyY2hhc2UgdGhlIHNlcnZlclxyXG4gICAgICAgICAgICAvLyAgMi4gQ29weSBvdXIgaGFja2luZyBzY3JpcHQgb250byB0aGUgbmV3bHktcHVyY2hhc2VkIHNlcnZlclxyXG4gICAgICAgICAgICAvLyAgMy4gUnVuIG91ciBoYWNraW5nIHNjcmlwdCBvbiB0aGUgbmV3bHktcHVyY2hhc2VkIHNlcnZlciB3aXRoIDMgdGhyZWFkc1xyXG4gICAgICAgICAgICAvLyAgNC4gSW5jcmVtZW50IG91ciBpdGVyYXRvciB0byBpbmRpY2F0ZSB0aGF0IHdlJ3ZlIGJvdWdodCBhIG5ldyBzZXJ2ZXJcclxuICAgICAgICAgICAgbGV0IGhvc3RuYW1lID0gbnMucHVyY2hhc2VTZXJ2ZXIoXCJwc2Vydi1cIiArIGksIHJhbSk7XHJcbiAgICAgICAgICAgIG5zLnNjcChcImVhcmx5LWhhY2stdGVtcGxhdGUuanNcIiwgaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICBucy5leGVjKFwiZWFybHktaGFjay10ZW1wbGF0ZS5qc1wiLCBob3N0bmFtZSwgMyk7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9NYWtlIHRoZSBzY3JpcHQgd2FpdCBmb3IgYSBzZWNvbmQgYmVmb3JlIGxvb3BpbmcgYWdhaW4uXHJcbiAgICAgICAgLy9SZW1vdmluZyB0aGlzIGxpbmUgd2lsbCBjYXVzZSBhbiBpbmZpbml0ZSBsb29wIGFuZCBjcmFzaCB0aGUgZ2FtZS5cclxuICAgICAgICBhd2FpdCBucy5zbGVlcCgxMDAwKTtcclxuICAgIH1cclxufSJdfQ==\",\"filename\":\"purchase-server-16gb.js\",\"server\":\"home\"}}],[\"open-ports.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from \\\"./colors\\\";\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let hostname = ns.args[0]?.toString();\\r\\n    openPorts(ns, hostname);\\r\\n}\\r\\n/**\\r\\n * @remarks This function opens a specified number of ports on a server.\\r\\n * @param ns\\r\\n * @param hostname server's hostname\\r\\n * @param portsRequired number of ports to open\\r\\n * @returns\\r\\n */\\r\\nexport async function openPorts(ns, hostname) {\\r\\n    const programs = [\\r\\n        `brutessh.exe`,\\r\\n        `ftpcrack.exe`,\\r\\n        `relaysmtp.exe`,\\r\\n        `httpworm.exe`,\\r\\n        `sqlinject.exe`\\r\\n    ];\\r\\n    const maxPorts = programs.length;\\r\\n    const portsRequired = ns.getServerNumPortsRequired(hostname);\\r\\n    for (let i = 0; i < portsRequired && i < maxPorts; i++) {\\r\\n        //ns.tprint(`INFO: ...opening port ${colors.Magenta}${i+1}${colors.Reset}...`); // i+1 because ports are 1-indexed\\r\\n        try {\\r\\n            if (ns.fileExists(programs[i])) {\\r\\n                switch (i) {\\r\\n                    case 0:\\r\\n                        ns.brutessh(hostname);\\r\\n                        break;\\r\\n                    case 1:\\r\\n                        ns.ftpcrack(hostname);\\r\\n                        break;\\r\\n                    case 2:\\r\\n                        ns.relaysmtp(hostname);\\r\\n                        break;\\r\\n                    case 3:\\r\\n                        ns.httpworm(hostname);\\r\\n                        break;\\r\\n                    case 4:\\r\\n                        ns.sqlinject(hostname);\\r\\n                        break;\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                throw (`${colors.Yellow}${programs[i]}${colors.Reset} unavailable, cannot open port ${colors.Magenta}${i + 1}${colors.Reset}`);\\r\\n            }\\r\\n        }\\r\\n        catch (err) {\\r\\n            ns.tprint(`ERROR: ${err} ...aborting`);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Blbi1wb3J0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9vcGVuLXBvcnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUN0QyxTQUFTLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLFNBQVMsQ0FBQyxFQUFNLEVBQUUsUUFBZ0I7SUFDcEQsTUFBTSxRQUFRLEdBQUc7UUFDYixjQUFjO1FBQ2QsY0FBYztRQUNkLGVBQWU7UUFDZixjQUFjO1FBQ2QsZUFBZTtLQUNsQixDQUFDO0lBQ0YsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUNqQyxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsSUFBSSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BELGtIQUFrSDtRQUNsSCxJQUFJO1lBQ0EsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUM1QixRQUFRLENBQUMsRUFBRTtvQkFDUCxLQUFLLENBQUM7d0JBQ0YsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDdEIsTUFBTTtvQkFDVixLQUFLLENBQUM7d0JBQ0YsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDdEIsTUFBTTtvQkFDVixLQUFLLENBQUM7d0JBQ0YsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDdkIsTUFBTTtvQkFDVixLQUFLLENBQUM7d0JBQ0YsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDdEIsTUFBTTtvQkFDVixLQUFLLENBQUM7d0JBQ0YsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDdkIsTUFBTTtpQkFDYjthQUNKO2lCQUFNO2dCQUNILE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLGtDQUFrQyxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7YUFDaEk7U0FDSjtRQUFDLE9BQU0sR0FBRyxFQUFFO1lBQ1QsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDLENBQUM7WUFDdkMsT0FBTztTQUNWO0tBQ0o7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlZCBieSBqX19yMGQgMTAvMTYvMjNcclxuaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuL2NvbG9yc1wiO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbGV0IGhvc3RuYW1lID0gbnMuYXJnc1swXT8udG9TdHJpbmcoKTtcclxuICAgIG9wZW5Qb3J0cyhucywgaG9zdG5hbWUpO1xyXG59XHJcblxyXG4vKipcclxuICogQHJlbWFya3MgVGhpcyBmdW5jdGlvbiBvcGVucyBhIHNwZWNpZmllZCBudW1iZXIgb2YgcG9ydHMgb24gYSBzZXJ2ZXIuIFxyXG4gKiBAcGFyYW0gbnMgXHJcbiAqIEBwYXJhbSBob3N0bmFtZSBzZXJ2ZXIncyBob3N0bmFtZVxyXG4gKiBAcGFyYW0gcG9ydHNSZXF1aXJlZCBudW1iZXIgb2YgcG9ydHMgdG8gb3BlblxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBvcGVuUG9ydHMobnM6IE5TLCBob3N0bmFtZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBwcm9ncmFtcyA9IFtcclxuICAgICAgICBgYnJ1dGVzc2guZXhlYCxcclxuICAgICAgICBgZnRwY3JhY2suZXhlYCxcclxuICAgICAgICBgcmVsYXlzbXRwLmV4ZWAsXHJcbiAgICAgICAgYGh0dHB3b3JtLmV4ZWAsXHJcbiAgICAgICAgYHNxbGluamVjdC5leGVgXHJcbiAgICBdO1xyXG4gICAgY29uc3QgbWF4UG9ydHMgPSBwcm9ncmFtcy5sZW5ndGg7XHJcbiAgICBjb25zdCBwb3J0c1JlcXVpcmVkID0gbnMuZ2V0U2VydmVyTnVtUG9ydHNSZXF1aXJlZChob3N0bmFtZSk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvcnRzUmVxdWlyZWQgJiYgaSA8IG1heFBvcnRzOyBpKyspIHtcclxuICAgICAgICAvL25zLnRwcmludChgSU5GTzogLi4ub3BlbmluZyBwb3J0ICR7Y29sb3JzLk1hZ2VudGF9JHtpKzF9JHtjb2xvcnMuUmVzZXR9Li4uYCk7IC8vIGkrMSBiZWNhdXNlIHBvcnRzIGFyZSAxLWluZGV4ZWRcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAobnMuZmlsZUV4aXN0cyhwcm9ncmFtc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuYnJ1dGVzc2goaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5zLmZ0cGNyYWNrKGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBucy5yZWxheXNtdHAoaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5zLmh0dHB3b3JtKGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBucy5zcWxpbmplY3QoaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IChgJHtjb2xvcnMuWWVsbG93fSR7cHJvZ3JhbXNbaV19JHtjb2xvcnMuUmVzZXR9IHVuYXZhaWxhYmxlLCBjYW5ub3Qgb3BlbiBwb3J0ICR7Y29sb3JzLk1hZ2VudGF9JHtpKzF9JHtjb2xvcnMuUmVzZXR9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoKGVycikge1xyXG4gICAgICAgICAgICBucy50cHJpbnQoYEVSUk9SOiAke2Vycn0gLi4uYWJvcnRpbmdgKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==\",\"filename\":\"open-ports.js\",\"server\":\"home\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"server-list.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"server-list.txt\",\"text\":\"[home /]> scan-analyze 2\\r\\n┗ home\\r\\n  ┃   Root Access: YES, Required hacking skill: 1\\r\\n  ┃   Number of open ports required to NUKE: 5\\r\\n  ┃   RAM: 8.00GB\\r\\n  ┣ n00dles\\r\\n  ┃ ┃   Root Access: YES, Required hacking skill: 1\\r\\n  ┃ ┃   Number of open ports required to NUKE: 0\\r\\n  ┃ ┃   RAM: 4.00GB\\r\\n  ┃ ┗ CSEC\\r\\n  ┃       Root Access: NO, Required hacking skill: 52\\r\\n  ┃       Number of open ports required to NUKE: 1\\r\\n  ┃       RAM: 8.00GB\\r\\n  ┣ foodnstuff\\r\\n  ┃ ┃   Root Access: NO, Required hacking skill: 1\\r\\n  ┃ ┃   Number of open ports required to NUKE: 0\\r\\n  ┃ ┃   RAM: 16.00GB\\r\\n  ┃ ┗ max-hardware\\r\\n  ┃       Root Access: NO, Required hacking skill: 80\\r\\n  ┃       Number of open ports required to NUKE: 1\\r\\n  ┃       RAM: 32.00GB\\r\\n  ┣ sigma-cosmetics\\r\\n  ┃ ┃   Root Access: NO, Required hacking skill: 5\\r\\n  ┃ ┃   Number of open ports required to NUKE: 0\\r\\n  ┃ ┃   RAM: 16.00GB\\r\\n  ┃ ┗ zer0\\r\\n  ┃       Root Access: NO, Required hacking skill: 75\\r\\n  ┃       Number of open ports required to NUKE: 1\\r\\n  ┃       RAM: 32.00GB\\r\\n  ┣ joesguns\\r\\n  ┃     Root Access: NO, Required hacking skill: 10\\r\\n  ┃     Number of open ports required to NUKE: 0\\r\\n  ┃     RAM: 16.00GB\\r\\n  ┣ hong-fang-tea\\r\\n  ┃     Root Access: NO, Required hacking skill: 30\\r\\n  ┃     Number of open ports required to NUKE: 0\\r\\n  ┃     RAM: 16.00GB\\r\\n  ┣ harakiri-sushi\\r\\n  ┃ ┃   Root Access: NO, Required hacking skill: 40\\r\\n  ┃ ┃   Number of open ports required to NUKE: 0\\r\\n  ┃ ┃   RAM: 16.00GB\\r\\n  ┃ ┗ nectar-net\\r\\n  ┃       Root Access: NO, Required hacking skill: 20\\r\\n  ┃       Number of open ports required to NUKE: 0\\r\\n  ┃       RAM: 16.00GB\\r\\n  ┗ iron-gym\\r\\n        Root Access: NO, Required hacking skill: 100\\r\\n        Number of open ports required to NUKE: 1\\r\\n        RAM: 32.00GB\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[128473632.92055482,624,5304,5616]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":108391.30433278723,\"onlineMoneyMade\":128473632.92055482,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"home\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":104,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"81.5.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":57741129880,\"moneyMax\":1443528247000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1073,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"4.3.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":49497377719,\"moneyMax\":1237434442975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1124,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"78.6.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":23189817579,\"moneyMax\":579745439475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1130,\"serverGrowth\":63,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-167595.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[68,[1,3,4,5,6,7,8,10,11,13]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"67.4.9.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":36850591526,\"moneyMax\":921264788150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":978,\"serverGrowth\":57,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"32.3.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":21037742000,\"moneyMax\":525943550000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1199,\"serverGrowth\":90,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"83.2.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":19794381156,\"moneyMax\":494859528900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":991,\"serverGrowth\":67,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-376660.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"60.0.4.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":14999222148,\"moneyMax\":374980553700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1065,\"serverGrowth\":95,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"85.8.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":15169373300,\"moneyMax\":379234332500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1150,\"serverGrowth\":89,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"32.9.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":28694427823,\"moneyMax\":717360695575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1171,\"serverGrowth\":91,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"43.4.5.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1411115691,\"moneyMax\":35277892275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1059,\"serverGrowth\":90,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"8.8.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1363,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-977262-CyberSec.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"SHIFT TRASH FRAME SHELL DEBUG\",14],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"35.1.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1047193573,\"moneyMax\":26179839325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1015,\"serverGrowth\":70,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"7.0.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":930346102,\"moneyMax\":23258652550,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1001,\"serverGrowth\":70,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-482008.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"055VVooooooooZ5HHHHHHHHHHHHo155555hVIIj0eQKKKKKKn6XXXXXXXXXrrriiQ\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"5.4.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":653763067,\"moneyMax\":16344076675,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":918,\"serverGrowth\":49,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-857176-CyberSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0],[0,0,1,1,0],[0,0,0,0,0],[0,0,1,1,0],[1,0,0,0,1],[0,0,1,0,0],[0,0,0,0,1],[0,0,0,0,0],[0,0,0,1,1],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"89.2.7.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":717943747,\"moneyMax\":17948593675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":871,\"serverGrowth\":75,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"75.8.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":782802726,\"moneyMax\":19570068150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":847,\"serverGrowth\":64,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"10.8.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":905109129,\"moneyMax\":22627728225,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":870,\"serverGrowth\":88,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"65.7.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"omnia\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1111041518,\"moneyMax\":27776037950,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":868,\"serverGrowth\":89,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-738328-Netburners.cct\",\"type\":\"Total Ways to Sum\",\"data\":25,\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"13.2.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":848705500,\"moneyMax\":21217637500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":870,\"serverGrowth\":68,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"67.6.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":647056284,\"moneyMax\":16176407100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":90,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"29.6.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"solaris\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":882048400,\"moneyMax\":22051210000,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":946,\"serverGrowth\":72,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"86.8.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":815549055,\"moneyMax\":20388726375,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":828,\"serverGrowth\":90,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"71.8.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1122625257,\"moneyMax\":28065631425,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":924,\"serverGrowth\":59,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-772747.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[124,[2,3,5,6,8,11,13,14,15,16]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"48.7.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":981958251,\"moneyMax\":24548956275,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":902,\"serverGrowth\":70,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"35.2.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":930968030,\"moneyMax\":23274200750,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":813,\"serverGrowth\":69,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-85619.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")(()))(a\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"28.8.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":807186552,\"moneyMax\":20179663800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":70,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-449873.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())(()()a()(\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"54.7.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":854818440,\"moneyMax\":21370461000,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":782,\"serverGrowth\":70,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-22293.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":401383702,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-799698.cct\",\"type\":\"Total Ways to Sum\",\"data\":21,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"9.9.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1562828888,\"moneyMax\":39070722200,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":859,\"serverGrowth\":59,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-937369.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-1,1,-2,-5,-9,-6,8,4,-10,-4,1,-7,-9,7,8,-1,-8,8,7,2,2,-8,3,-1,5,-7],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-966143.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[61,[1,3,5,6,7,10,11,13,15]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"64.7.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1598864745,\"moneyMax\":39971618625,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":770,\"serverGrowth\":82,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-355920-Netburners.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[1,7],[2,9],[3,9],[7,8],[2,8],[1,3],[0,7],[0,3],[6,9],[3,8],[1,5],[4,7],[6,8],[1,2],[5,9]]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"12.6.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1158413857,\"moneyMax\":28960346425,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":820,\"serverGrowth\":77,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-431833.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,1,1,0,0],[0,1,0,1,0,0,0,1,0,0],[0,1,1,0,1,0,0,1,0,0],[0,1,0,0,1,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,1],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[1,0,1,0,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0,0],[0,0,0,0,0,1,1,1,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-118457-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[54,84,136,180,186,80,154,187,85,197,64,52,65,115,194,139,14,27,174,9,100,37,28,45,107,182,7,123,145,158,12,83,33,22,163]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"41.4.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1479603683,\"moneyMax\":36990092075,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":829,\"serverGrowth\":79,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-738169.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,1,0,0,0],[0,0,0,0,0,1,1],[0,0,0,0,0,0,1],[1,0,0,0,0,0,0],[0,1,0,1,0,0,0],[0,0,0,1,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"73.9.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1070859138,\"moneyMax\":26771478450,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":795,\"serverGrowth\":78,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"72.1.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":729179155,\"moneyMax\":18229478875,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":720,\"serverGrowth\":59,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"24.2.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":643551179,\"moneyMax\":16088779475,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":519,\"serverGrowth\":42,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[15995718.749030352,91,637,741]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13793.037600906482,\"onlineMoneyMade\":15995718.749030352,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"88.0.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":748517015,\"moneyMax\":18712925375,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":559,\"serverGrowth\":58,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"53.2.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":206886785,\"moneyMax\":5172169625,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":447,\"serverGrowth\":30,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"10.6.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":204716156,\"moneyMax\":5117903900,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":398,\"serverGrowth\":36,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[11144548.408423873,91,650,715]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13670.975321252443,\"onlineMoneyMade\":11144548.408423873,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-118579-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,1,0,8,3,9,9,10,0,6,3,9,5,9,7,0],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"16.4.1.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":854983407,\"moneyMax\":21374585175,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":740,\"serverGrowth\":80,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"68.2.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":289029803,\"moneyMax\":7225745075,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":467,\"serverGrowth\":48,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[14358206.708284333,78,650,728]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13670.975321252443,\"onlineMoneyMade\":14358206.708284333,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"25.4.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":417659124,\"moneyMax\":10441478100,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":633,\"serverGrowth\":63,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"64.7.2.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":474049096,\"moneyMax\":11851227400,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":434,\"serverGrowth\":27,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[37733378.12973894,371,2703,2862]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":55735.51477126008,\"onlineMoneyMade\":37733378.12973894,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"catalyst\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":53,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"56.8.7.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":178115840,\"moneyMax\":4452896000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":315,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[47479649.89561556,234,1274,1482]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28074.32432042912,\"onlineMoneyMade\":47479649.89561556,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"the-hub\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"12.1.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":245921963,\"moneyMax\":6148049075,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":325,\"serverGrowth\":48,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"75.8.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":418,\"serverGrowth\":52,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[13235579.296344219,104,650,728]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13915.099880560521,\"onlineMoneyMade\":13235579.296344219,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"netlink\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-478727.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"23315946185\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"36.7.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":83252121,\"moneyMax\":2081303025,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":276,\"serverGrowth\":57,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-721618.cct\",\"type\":\"Total Ways to Sum\",\"data\":53,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"94.3.7.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[891706.7092454606,6,48,58]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1051.6134862501917,\"onlineMoneyMade\":891706.7092454606,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"n00dles\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"36.6.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[7168190.182227871,36,288,348]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6309.680917501143,\"onlineMoneyMade\":7168190.182227871,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-158030.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[105,169,136,21,2,181,167,79,142,105,108,105],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"41.4.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[5881133.644012504,30,294,342]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6253.34448073774,\"onlineMoneyMade\":5881133.644012504,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"51.9.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.215999999999998,\"minDifficulty\":5,\"moneyAvailable\":35956027.191328555,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[6763097.478064425,42,288,348]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6366.017354264546,\"onlineMoneyMade\":6763097.478064425,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"joesguns\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-288948-CyberSec.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"81101123146\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"52.4.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[11950289.738509811,65,650,728]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13548.913041598404,\"onlineMoneyMade\":11950289.738509811,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"zer0\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"14.3.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[9689015.09033254,48,288,348]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6422.353791027949,\"onlineMoneyMade\":9689015.09033254,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"29.7.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[17079453.018165905,91,624,754]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13793.037600906482,\"onlineMoneyMade\":17079453.018165905,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"neo-net\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-759209.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,1,0,0,0,1,0,0,1],[0,0,0,1,0,0,0,0,1],[0,0,0,0,1,1,1,0,1],[0,0,1,1,0,0,0,1,0],[0,0,0,1,0,0,0,1,0],[0,1,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0,1],[1,1,0,0,0,1,0,0,1],[0,0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,1,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-546628.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"447652\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-207430.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[32,101,16,66,32],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"53.6.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[50736410.514008455,234,1300,1456]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28074.32432042912,\"onlineMoneyMade\":50736410.514008455,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-76728.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[7,9],[4,5,3],[9,2,1,7],[4,8,5,6,6]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-656130.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[48,99,151,110,64,30,125,48,187,61,2,163,190,73,142,140,70,79,196,189,164,130,169,52,165,103,68,167,175,66,153,56,8,103,61,127,85,80,8,185,17,174,59,82,110,145,134],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"83.6.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[5461625.190808886,42,294,342]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6366.017354264546,\"onlineMoneyMade\":5461625.190808886,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"77.0.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[5120010.314885588,42,294,342]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6366.017354264546,\"onlineMoneyMade\":5120010.314885588,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"23.0.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[15800149.93222043,104,637,728]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13793.037600906482,\"onlineMoneyMade\":15800149.93222043,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"phantasy\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"13.8.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[13020345.693216901,78,637,728]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13548.913041598404,\"onlineMoneyMade\":13020345.693216901,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"37.7.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":29,\"minDifficulty\":10,\"moneyAvailable\":65368879,\"moneyMax\":1634221975,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":193,\"serverGrowth\":37,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[25730944.964941815,117,637,741]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14037.16216021456,\"onlineMoneyMade\":25730944.964941815,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"omega-net\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-297049.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"ttttttttttttttBBBBBBBBBBBBBBaFKq11JddddddddddddddmttB6666FFhHHHHHHHHSSXjjjr3aaaaakkVVV\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"64.1.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":58101834,\"moneyMax\":1452545850,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":245,\"serverGrowth\":32,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-16532.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"Pnnnbb66UpphhDD00uuuL7EElXXXXXXXXXiiKKKKKiijCBBBBBBBBBBBBhhhTT6\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"14.9.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[14164276.671538007,65,650,728]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13548.913041598404,\"onlineMoneyMade\":14164276.671538007,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-511014.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"01000000000000100000100000101100\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"79.4.5.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":477,\"serverGrowth\":41,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[64160628.96886407,477,2650,2915]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":56730.79182074687,\"onlineMoneyMade\":64160628.96886407,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":53,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"70.9.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1084,\"serverGrowth\":54,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"62.5.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":735,\"serverGrowth\":40,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-116937.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"CACHEMOUSEFRAMEARRAYENTER\",\"SOFTWARE\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-759742.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,1,0,0,0,1,0],[0,0,1,1,1,0,0,1,0],[0,0,0,1,0,1,0,0,1],[0,1,1,0,0,0,1,0,0],[0,0,1,1,0,0,0,0,0],[0,1,1,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-168469-Sector12.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a()))\",\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-312818.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0],[0,0,0,0],[0,0,0,1],[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,1,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"28.9.3.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":512,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"94.2.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":345,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[5454866.909311003,36,300,336]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6309.680917501143,\"onlineMoneyMade\":5454866.909311003,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-899614.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[4,11],[22,30],[3,9],[23,24],[11,16],[20,27],[5,12],[18,28],[11,20],[25,27]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"11.6.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":204,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[5637363.049373828,30,294,342]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6253.34448073774,\"onlineMoneyMade\":5637363.049373828,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-775767.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((((a(()))((a(a)(())\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-885357-Sector12.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[154,[6,7,9,11,13,14,15,16]],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"30.0.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":538,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-348108.cct\",\"type\":\"Total Ways to Sum\",\"data\":59,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-850517.cct\",\"type\":\"Total Ways to Sum\",\"data\":76,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"59.6.1.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":51,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2790034.565059892,18,147,168]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3126.67224036887,\"onlineMoneyMade\":2790034.565059892,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"CSEC\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-541542-CyberSec.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[3,19,12,11,14]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"9.1.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"35.3.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"44.6.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"82.1.5.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-1\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3704892.577490575,24,144,171]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3183.008677132273,\"onlineMoneyMade\":3704892.577490575,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-1\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"44.4.3.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-2\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3980095.334502596,24,144,171]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3183.008677132273,\"onlineMoneyMade\":3980095.334502596,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-2\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"92.7.6.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-3\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3256057.576102887,21,147,171]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3183.008677132273,\"onlineMoneyMade\":3256057.576102887,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-3\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"18.9.7.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-4\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3690007.870841083,24,144,171]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3183.008677132273,\"onlineMoneyMade\":3690007.870841083,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-4\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"76.8.0.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-5\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2370042.247747767,15,150,168]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3126.67224036887,\"onlineMoneyMade\":2370042.247747767,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-5\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"58.0.5.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-6\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3671566.560112741,24,144,171]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3183.008677132273,\"onlineMoneyMade\":3671566.560112741,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-6\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"48.0.4.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-7\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2829670.488577303,21,147,171]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3183.008677132273,\"onlineMoneyMade\":2829670.488577303,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-7\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"93.1.1.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-8\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[4064746.6068851934,24,147,168]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3183.008677132273,\"onlineMoneyMade\":4064746.6068851934,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-8\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"87.2.3.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-9\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2378218.4710967843,15,150,168]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3126.67224036887,\"onlineMoneyMade\":2378218.4710967843,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-9\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"89.6.5.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-10\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2130872.1775768897,15,147,168]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3098.5040219871685,\"onlineMoneyMade\":2130872.1775768897,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-10\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"51.9.6.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-11\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2808883.300829651,18,144,174]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3154.8404587505715,\"onlineMoneyMade\":2808883.300829651,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-11\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"17.2.5.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-12\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2584165.782717331,18,147,171]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3154.8404587505715,\"onlineMoneyMade\":2584165.782717331,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-12\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"28.9.1.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-13\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3316408.0791932,21,147,171]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3183.008677132273,\"onlineMoneyMade\":3316408.0791932,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-13\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"13.7.5.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-14\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[4086304.772842312,24,147,171]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3211.1768955139746,\"onlineMoneyMade\":4086304.772842312,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-14\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"82.7.3.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-15\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3718614.858089379,24,147,168]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3183.008677132273,\"onlineMoneyMade\":3718614.858089379,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-15\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"75.2.8.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-16\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3373295.2945779935,21,144,174]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3183.008677132273,\"onlineMoneyMade\":3373295.2945779935,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-16\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"59.0.2.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-17\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2830010.7176388125,18,144,174]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3154.8404587505715,\"onlineMoneyMade\":2830010.7176388125,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-17\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"39.7.1.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-18\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2222756.063957092,18,150,165]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3126.67224036887,\"onlineMoneyMade\":2222756.063957092,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-18\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"54.0.8.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-19\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2229423.659218274,15,150,168]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3126.67224036887,\"onlineMoneyMade\":2229423.659218274,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-19\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"9.5.8.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-20\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1093459.4816974758,9,150,171]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3098.5040219871685,\"onlineMoneyMade\":1093459.4816974758,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-20\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"64.2.5.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-21\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2235299.2745925426,15,150,168]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3126.67224036887,\"onlineMoneyMade\":2235299.2745925426,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-21\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"2.7.1.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-22\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2831446.3574909866,18,147,171]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3154.8404587505715,\"onlineMoneyMade\":2831446.3574909866,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-22\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"74.9.3.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-23\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3535643.677557101,21,144,174]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3183.008677132273,\"onlineMoneyMade\":3535643.677557101,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-23\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"58.3.9.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-24\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2549571.2342156502,18,144,174]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3154.8404587505715,\"onlineMoneyMade\":2549571.2342156502,\"onlineRunningTime\":37011.209999998086,\"ramUsage\":2.4,\"server\":\"pserv-24\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.5529,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":31.1948,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":5.368,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":3.4048,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":77.4516,\"isBanned\":false,\"isMember\":true,\"playerReputation\":194290.49656039188}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":21.4787,\"isBanned\":false,\"isMember\":true,\"playerReputation\":7805.905396093955}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":50.2692,\"isBanned\":false,\"isMember\":true,\"playerReputation\":116456.5734925805}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":180,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#E3B54A\",\"primary\":\"#CAA243\",\"primarydark\":\"#7E6937\",\"successlight\":\"#82FF82\",\"success\":\"#6FDA6F\",\"successdark\":\"#64C364\",\"errorlight\":\"#FD5555\",\"error\":\"#D84A4A\",\"errordark\":\"#AC3939\",\"secondarylight\":\"#D8D0B8\",\"secondary\":\"#B1AA95\",\"secondarydark\":\"#736E5E\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#111111\",\"white\":\"#fff\",\"black\":\"#070300\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#0A0A0E\",\"backgroundsecondary\":\"#0E0E10\",\"button\":\"#222222\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1138,\"y\":1217,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Consolas\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":true,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1697723313694","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}