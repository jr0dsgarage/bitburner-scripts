{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":504,\"strength\":2,\"defense\":2,\"dexterity\":2,\"agility\":2,\"charisma\":29,\"intelligence\":0},\"exp\":{\"hacking\":23690351.19985261,\"strength\":10.597771678646266,\"defense\":10.597771678646266,\"dexterity\":10.597771678646266,\"agility\":10.597771678646266,\"charisma\":423.311148283499,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.4376822044675173,\"hacking_speed\":1.347224136379899,\"hacking_money\":1.2447464973744735,\"hacking_grow\":1.2447464973744735,\"hacking\":1.4683963242902325,\"strength\":1.2447464973744735,\"defense\":1.2447464973744735,\"dexterity\":1.7252186453610208,\"agility\":1.3069838222431973,\"charisma\":1.4936957968493683,\"hacking_exp\":1.5335276847653516,\"strength_exp\":1.3692211471119209,\"defense_exp\":1.3692211471119209,\"dexterity_exp\":1.3692211471119209,\"agility_exp\":1.3692211471119209,\"charisma_exp\":1.3692211471119209,\"company_rep\":1.2447464973744735,\"faction_rep\":1.2447464973744735,\"crime_money\":1.2447464973744735,\"crime_success\":1.2447464973744735,\"hacknet_node_money\":3.1393673613625515,\"hacknet_node_purchase_cost\":0.6145829705997192,\"hacknet_node_ram_cost\":0.8033764321564957,\"hacknet_node_core_cost\":0.8033764321564957,\"hacknet_node_level_cost\":0.6828699673330213,\"work_money\":1.2447464973744735,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":22,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neuralstimulator\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"}],\"city\":\"Aevum\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"The Black Hand\",\"Sector-12\",\"CyberSec\"],\"factionInvitations\":[\"Aevum\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":7.889303157240362,\"onlineTimeSeconds\":94402.79999918981,\"ram\":16,\"totalMoneyGenerated\":744757.3305112271,\"name\":\"hacknet-node-0\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{\"Alpha Enterprises\":\"Software Engineering Intern\"},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":2284682426.1214457,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-4,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":26537243853.22702,\"hacknet\":744757.3305112271,\"hacknet_expenses\":-648718.0174463041,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2283682426.121423,\"work\":630037.5262955668,\"servers\":-22000000,\"other\":-200000,\"augmentations\":-24232087499.999996}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-4,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":66608617036.10388,\"hacknet\":18521601046.67819,\"hacknet_expenses\":-5046032920.2258835,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":31447553515.739243,\"work\":10430582.329556147,\"servers\":-253749182.23116505,\"other\":-400000,\"augmentations\":-48392913046.46059}},\"playtimeSinceLastAug\":94441800,\"playtimeSinceLastBitnode\":824858600,\"lastAugReset\":1697723331453,\"lastNodeReset\":-1,\"purchasedServers\":[\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-1-0\"],\"scriptProdSinceLastAug\":26510836559.514633,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1696993342778},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1697002312401},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1697003975843},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1697004035834},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1697042616276},{\"ID\":\"TOR\",\"unlockedOn\":1697052216278},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1697124200234},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1697173256423},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1697174276424},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1697178716426},{\"ID\":\"FROZE\",\"unlockedOn\":1697506902150},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1697774759350},{\"ID\":\"TRAVEL\",\"unlockedOn\":1697776259361}],\"terminalCommandHistory\":[\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"scan-analyze 5\",\"scan-analyze 3\",\"clear\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"run open-ports.js nova-med\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"ls -l -g .msg\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"ls -l .msg\",\"run fl1ght.exe\",\"scan-analyze 2\",\"connect hong-fang-tea \",\"connect CSEC \",\"backdoor\",\"home \",\"ls -l .msg\",\"cat nitesec-test.msg \",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"scan-analyze 2\",\"scan-analyze 5\",\"scan-analyze 3\",\"scan-analyze 5\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"run purchase-server-16gb.js \",\"run start-purchased-servers.js \",\"run start-purchased-servers.js joesguns\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"ls -l -g .msg\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"scan-analyze 5\",\"connect n00dles; connect max-hardware; connect omega-net; connect netlink; connect I.I.I.I\",\"backdoor\",\"home\",\"scan-analyze 5\",\"run fl1ght.exe\",\"home\",\"scan-analyze 5\",\"ls\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"scan-analyze 5\",\"ls\",\"home\",\"ls\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"ls\",\"clear; killall; run hack-servers.js my-first-hack.js -h\",\"run start-purchased-servers.js my-first-hack.js joesguns\",\"ls -l -g .msg\",\"clear; killall; run hack-servers.js my-first-hack.js -h\"],\"lastUpdate\":1697817773367,\"lastSave\":1697817755169,\"totalPlaytime\":824858600,\"currentWork\":null,\"focus\":false,\"entropy\":0,\"identifier\":\"103d6a1d75d61f\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"5.7.5.1\",\"isConnectedTo\":true,\"maxRam\":256,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"DeepscanV1.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"AutoLink.exe\",\"DeepscanV2.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"home\"}}],[\"colors.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d 10/11/23\\r\\n// colors found on reddit\\r\\nexport const colors = {\\r\\n    Black: '\\\\u001b[30m',\\r\\n    Red: '\\\\u001b[31m',\\r\\n    Green: '\\\\u001b[32m',\\r\\n    Yellow: '\\\\u001b[33m',\\r\\n    Blue: '\\\\u001b[34m',\\r\\n    Magenta: '\\\\u001b[35m',\\r\\n    Cyan: '\\\\u001b[36m',\\r\\n    White: '\\\\u001b[37m',\\r\\n    BrightBlack: '\\\\u001b[30;1m',\\r\\n    BrightRed: '\\\\u001b[31;1m',\\r\\n    BrightGreen: '\\\\u001b[32;1m',\\r\\n    BrightYellow: '\\\\u001b[33;1m',\\r\\n    BrightBlue: '\\\\u001b[34;1m',\\r\\n    BrightMagenta: '\\\\u001b[35;1m',\\r\\n    BrightCyan: '\\\\u001b[36;1m',\\r\\n    BrightWhite: '\\\\u001b[37;1m',\\r\\n    Reset: \\\"\\\\u001b[0m\\\",\\r\\n};\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFDN0IseUJBQXlCO0FBQ3pCLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRztJQUNsQixLQUFLLEVBQUUsWUFBWTtJQUNuQixHQUFHLEVBQUUsWUFBWTtJQUNqQixLQUFLLEVBQUUsWUFBWTtJQUNuQixNQUFNLEVBQUUsWUFBWTtJQUNwQixJQUFJLEVBQUUsWUFBWTtJQUNsQixPQUFPLEVBQUUsWUFBWTtJQUNyQixJQUFJLEVBQUUsWUFBWTtJQUNsQixLQUFLLEVBQUUsWUFBWTtJQUNuQixXQUFXLEVBQUUsY0FBYztJQUMzQixTQUFTLEVBQUUsY0FBYztJQUN6QixXQUFXLEVBQUUsY0FBYztJQUMzQixZQUFZLEVBQUUsY0FBYztJQUM1QixVQUFVLEVBQUUsY0FBYztJQUMxQixhQUFhLEVBQUUsY0FBYztJQUM3QixVQUFVLEVBQUUsY0FBYztJQUMxQixXQUFXLEVBQUUsY0FBYztJQUMzQixLQUFLLEVBQUUsV0FBVztDQUNyQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlZCBieSBqX19yMGQgMTAvMTEvMjNcclxuLy8gY29sb3JzIGZvdW5kIG9uIHJlZGRpdFxyXG5leHBvcnQgY29uc3QgY29sb3JzID0ge1xyXG4gICAgQmxhY2s6ICdcXHUwMDFiWzMwbScsXHJcbiAgICBSZWQ6ICdcXHUwMDFiWzMxbScsXHJcbiAgICBHcmVlbjogJ1xcdTAwMWJbMzJtJyxcclxuICAgIFllbGxvdzogJ1xcdTAwMWJbMzNtJyxcclxuICAgIEJsdWU6ICdcXHUwMDFiWzM0bScsXHJcbiAgICBNYWdlbnRhOiAnXFx1MDAxYlszNW0nLFxyXG4gICAgQ3lhbjogJ1xcdTAwMWJbMzZtJyxcclxuICAgIFdoaXRlOiAnXFx1MDAxYlszN20nLFxyXG4gICAgQnJpZ2h0QmxhY2s6ICdcXHUwMDFiWzMwOzFtJyxcclxuICAgIEJyaWdodFJlZDogJ1xcdTAwMWJbMzE7MW0nLFxyXG4gICAgQnJpZ2h0R3JlZW46ICdcXHUwMDFiWzMyOzFtJyxcclxuICAgIEJyaWdodFllbGxvdzogJ1xcdTAwMWJbMzM7MW0nLFxyXG4gICAgQnJpZ2h0Qmx1ZTogJ1xcdTAwMWJbMzQ7MW0nLFxyXG4gICAgQnJpZ2h0TWFnZW50YTogJ1xcdTAwMWJbMzU7MW0nLFxyXG4gICAgQnJpZ2h0Q3lhbjogJ1xcdTAwMWJbMzY7MW0nLFxyXG4gICAgQnJpZ2h0V2hpdGU6ICdcXHUwMDFiWzM3OzFtJyxcclxuICAgIFJlc2V0OiBcIlxcdTAwMWJbMG1cIixcclxufSJdfQ==\",\"filename\":\"colors.js\",\"server\":\"home\"}}],[\"connected-servers-info.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(\\\"Connected servers:\\\");\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGVkLXNlcnZlcnMtaW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25uZWN0ZWQtc2VydmVycy1pbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLEVBQUUsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNwQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBhbnkpIHtcclxuICAgIG5zLnRwcmludChcIkNvbm5lY3RlZCBzZXJ2ZXJzOlwiKTtcclxufSJdfQ==\",\"filename\":\"connected-servers-info.js\",\"server\":\"home\"}}],[\"deploy-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from \\\"./colors\\\";\\r\\n/**\\r\\n * @param {NS} ns\\r\\n * @param {string} hostname\\r\\n * @param {string} hackToDeploy\\r\\n * @param {string} hackTarget\\r\\n *  */\\r\\nexport async function main(ns) {\\r\\n    let hostname = ns.args[0]?.toString();\\r\\n    let hackToDeploy = ns.args[1]?.toString();\\r\\n    let hackTarget = ns.args[2]?.toString() || `joesguns`;\\r\\n    ns.killall(hostname);\\r\\n    let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n    ns.tprint(`INFO: deploying hack to server: ${colors.Cyan}${hostname}${colors.Reset}`);\\r\\n    ns.exec(hackToDeploy, hostname, ~~threadsToUse, hackTarget);\\r\\n    if (ns.scriptRunning(hackToDeploy, hostname))\\r\\n        ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads!`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LWhhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZGVwbG95LWhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQzs7Ozs7TUFLTTtBQUNOLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUN0QyxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDO0lBQzFDLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksVUFBVSxDQUFDO0lBQ3RELEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckIsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUMvSCxFQUFFLENBQUMsTUFBTSxDQUFDLG1DQUFtQyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUN0RixFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUM1RCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQztRQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0NBQWdDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQztBQUN2SixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuL2NvbG9yc1wiO1xyXG5cclxuLyoqIFxyXG4gKiBAcGFyYW0ge05TfSBuc1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gaG9zdG5hbWVcclxuICogQHBhcmFtIHtzdHJpbmd9IGhhY2tUb0RlcGxveVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFja1RhcmdldFxyXG4gKiAgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBsZXQgaG9zdG5hbWUgPSBucy5hcmdzWzBdPy50b1N0cmluZygpO1xyXG4gICAgbGV0IGhhY2tUb0RlcGxveSA9IG5zLmFyZ3NbMV0/LnRvU3RyaW5nKCk7XHJcbiAgICBsZXQgaGFja1RhcmdldCA9IG5zLmFyZ3NbMl0/LnRvU3RyaW5nKCkgfHwgYGpvZXNndW5zYDtcclxuICAgIG5zLmtpbGxhbGwoaG9zdG5hbWUpO1xyXG4gICAgbGV0IHRocmVhZHNUb1VzZSA9IE1hdGgubWF4KDEsIChucy5nZXRTZXJ2ZXJNYXhSYW0oaG9zdG5hbWUpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShob3N0bmFtZSkpIC8gbnMuZ2V0U2NyaXB0UmFtKGhhY2tUb0RlcGxveSkpO1xyXG4gICAgbnMudHByaW50KGBJTkZPOiBkZXBsb3lpbmcgaGFjayB0byBzZXJ2ZXI6ICR7Y29sb3JzLkN5YW59JHtob3N0bmFtZX0ke2NvbG9ycy5SZXNldH1gKTtcclxuICAgIG5zLmV4ZWMoaGFja1RvRGVwbG95LCBob3N0bmFtZSwgfn50aHJlYWRzVG9Vc2UsIGhhY2tUYXJnZXQpO1xyXG4gICAgaWYgKG5zLnNjcmlwdFJ1bm5pbmcoaGFja1RvRGVwbG95LCBob3N0bmFtZSkpIG5zLnRwcmludChgSU5GTzogLi4uaGFjayBkZXBsb3llZCB1c2luZyAke2NvbG9ycy5NYWdlbnRhfSR7fn50aHJlYWRzVG9Vc2V9JHtjb2xvcnMuUmVzZXR9IHRocmVhZHMhYCk7XHJcbn0iXX0=\",\"filename\":\"deploy-hack.js\",\"server\":\"home\"}}],[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"home\"}}],[\"scan-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from \\\"./colors\\\";\\r\\n/** @param {NS} ns Netscript namespace */\\r\\nexport async function main(ns) {\\r\\n    // for testing in bitburner Terminal\\r\\n    let depth = ns.args[0].toString() || 3;\\r\\n    let serverList = await buildScannedServerList(ns, ~~depth);\\r\\n    ns.tprintf(`found ${colors.Cyan}${serverList.length}${colors.Reset} servers`);\\r\\n    ns.tprintf(`${colors.Cyan}${serverList}${colors.Reset}`);\\r\\n}\\r\\n/**\\r\\n * I gave Copilot this comment block and asked it to write the function for me, using what existing code I had as a base, so it would use the canAddServer function.\\r\\n *\\r\\n * if list is empty, do a scan(), which runs scan on home server and make a list of all scannedServers\\r\\n * add scannedServers to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done one scan and serverAdd\\r\\n * check that depth > 0\\r\\n * scan each of the serverList servers to get neighborsList and add neighborsList to scannedServers\\r\\n * add neighborsList to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done another scan\\r\\n * scan each of the neighborsList servers to get secondNeighborsList and add secondNeighborsList to scannedServers\\r\\n * add secondNeighborsList to serverList if they can be added (not forbidden, not a duplicate, not a prefix)\\r\\n * decrease depth because we've done another scan\\r\\n * if depth is ever 0, return serverList\\r\\n */\\r\\n/**\\r\\n * @remarks This function is a recursive function that scans servers to a given tree depth and returns a list of all servers to hack.\\r\\n * @param {NS} ns\\r\\n * @param depth scan depth; defaults to 1\\r\\n * @param serverList [Optional] running list of servers (is returned at end of recursion)\\r\\n * @param scannedServers [Optional] list of servers already scanned\\r\\n * @returns Array of all servers found up to specified depth.  The server hostnames in the returned array are string values.\\r\\n */\\r\\nexport async function buildScannedServerList(ns, depth, serverList = [], scannedServers = []) {\\r\\n    if (serverList.length === 0) {\\r\\n        scannedServers = ns.scan();\\r\\n        serverList = scannedServers.filter(server => canAddServer(server, serverList));\\r\\n        --depth;\\r\\n    }\\r\\n    while (depth > 0) {\\r\\n        const newServers = [];\\r\\n        for (const server of serverList) {\\r\\n            const neighbors = await ns.scan(server);\\r\\n            const newNeighbors = neighbors.filter(server => canAddServer(server, serverList.concat(newServers)));\\r\\n            newServers.push(...newNeighbors);\\r\\n            scannedServers.push(...newNeighbors);\\r\\n        }\\r\\n        serverList.push(...newServers);\\r\\n        --depth;\\r\\n    }\\r\\n    return serverList;\\r\\n}\\r\\n/**\\r\\n * the following function was created by Copilot after I asked a few questions about a better way to do this.\\r\\n * below was my attempt....clearly I wasn't thinking in the same direction at all,\\r\\n * however copilot _did_ use this code to generate its own code.\\r\\nexport function canAddServer(serverName: string, serverListName: string[]) {\\r\\n    if (!(serverListName.includes(serverName)) || !(serverName == \\\"home\\\" || \\\"darkweb\\\") || !serverName.includes(\\\"pserv\\\")) {\\r\\n        return true;\\r\\n    }\\r\\n    else {\\r\\n        return false;\\r\\n    }\\r\\n};\\r\\n*/\\r\\n/**\\r\\n *\\r\\n * @param serverHostname Name of server to check against forbidden servers and prefixes\\r\\n * @param serverListName List of servers to check against for duplicates\\r\\n * @returns\\r\\n */\\r\\nexport function canAddServer(serverHostname, serverListName) {\\r\\n    const forbiddenServers = ['home', 'darkweb'];\\r\\n    const forbiddenServerPrefixes = ['pserv-'];\\r\\n    const isForbiddenServer = forbiddenServers.some(forbiddenServer => forbiddenServer === serverHostname);\\r\\n    const isForbiddenServerPrefix = forbiddenServerPrefixes.some(prefix => serverHostname.startsWith(prefix));\\r\\n    const isDuplicateServer = serverListName.includes(serverHostname);\\r\\n    return !isForbiddenServer && !isDuplicateServer && !isForbiddenServerPrefix;\\r\\n}\\r\\n;\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi1zZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NjYW4tc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxDLHlDQUF5QztBQUN6QyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLG9DQUFvQztJQUNwQyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxJQUFJLFVBQVUsR0FBRyxNQUFNLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0QsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLE1BQU0sQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQTtJQUM3RSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDN0QsQ0FBQztBQUdEOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBRUg7Ozs7Ozs7R0FPRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsc0JBQXNCLENBQUMsRUFBTSxFQUFFLEtBQWEsRUFBRSxhQUF1QixFQUFFLEVBQUUsaUJBQTJCLEVBQUU7SUFDeEgsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN6QixjQUFjLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzNCLFVBQVUsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQy9FLEVBQUUsS0FBSyxDQUFDO0tBQ1g7SUFFRCxPQUFPLEtBQUssR0FBRyxDQUFDLEVBQUU7UUFDZCxNQUFNLFVBQVUsR0FBYSxFQUFFLENBQUM7UUFFaEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxVQUFVLEVBQUU7WUFDN0IsTUFBTSxTQUFTLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JHLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQztZQUNqQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUM7U0FDeEM7UUFFRCxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDL0IsRUFBRSxLQUFLLENBQUM7S0FDWDtJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3RCLENBQUM7QUFJRDs7Ozs7Ozs7Ozs7O0VBWUU7QUFFRjs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsY0FBc0IsRUFBRSxjQUF3QjtJQUN6RSxNQUFNLGdCQUFnQixHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUUzQyxNQUFNLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLGVBQWUsS0FBSyxjQUFjLENBQUMsQ0FBQztJQUN2RyxNQUFNLHVCQUF1QixHQUFHLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMxRyxNQUFNLGlCQUFpQixHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFbEUsT0FBTyxDQUFDLGlCQUFpQixJQUFJLENBQUMsaUJBQWlCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztBQUNoRixDQUFDO0FBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkIDEwLzEyLzIzXHJcbi8vIHNjYW5zIGFsbCBzZXJ2ZXJzIGFuZCBidWlsZHMgYSBsaXN0IG9mIHNlcnZlcnMgdG8gaGFja1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuL2NvbG9yc1wiO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zIE5ldHNjcmlwdCBuYW1lc3BhY2UgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICAvLyBmb3IgdGVzdGluZyBpbiBiaXRidXJuZXIgVGVybWluYWxcclxuICAgIGxldCBkZXB0aCA9IG5zLmFyZ3NbMF0udG9TdHJpbmcoKSB8fCAzO1xyXG4gICAgbGV0IHNlcnZlckxpc3QgPSBhd2FpdCBidWlsZFNjYW5uZWRTZXJ2ZXJMaXN0KG5zLCB+fmRlcHRoKTtcclxuICAgIG5zLnRwcmludGYoYGZvdW5kICR7Y29sb3JzLkN5YW59JHtzZXJ2ZXJMaXN0Lmxlbmd0aH0ke2NvbG9ycy5SZXNldH0gc2VydmVyc2ApXHJcbiAgICBucy50cHJpbnRmKGAke2NvbG9ycy5DeWFufSR7c2VydmVyTGlzdH0ke2NvbG9ycy5SZXNldH1gKTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBJIGdhdmUgQ29waWxvdCB0aGlzIGNvbW1lbnQgYmxvY2sgYW5kIGFza2VkIGl0IHRvIHdyaXRlIHRoZSBmdW5jdGlvbiBmb3IgbWUsIHVzaW5nIHdoYXQgZXhpc3RpbmcgY29kZSBJIGhhZCBhcyBhIGJhc2UsIHNvIGl0IHdvdWxkIHVzZSB0aGUgY2FuQWRkU2VydmVyIGZ1bmN0aW9uLlxyXG4gKiBcclxuICogaWYgbGlzdCBpcyBlbXB0eSwgZG8gYSBzY2FuKCksIHdoaWNoIHJ1bnMgc2NhbiBvbiBob21lIHNlcnZlciBhbmQgbWFrZSBhIGxpc3Qgb2YgYWxsIHNjYW5uZWRTZXJ2ZXJzXHJcbiAqIGFkZCBzY2FubmVkU2VydmVycyB0byBzZXJ2ZXJMaXN0IGlmIHRoZXkgY2FuIGJlIGFkZGVkIChub3QgZm9yYmlkZGVuLCBub3QgYSBkdXBsaWNhdGUsIG5vdCBhIHByZWZpeClcclxuICogZGVjcmVhc2UgZGVwdGggYmVjYXVzZSB3ZSd2ZSBkb25lIG9uZSBzY2FuIGFuZCBzZXJ2ZXJBZGRcclxuICogY2hlY2sgdGhhdCBkZXB0aCA+IDBcclxuICogc2NhbiBlYWNoIG9mIHRoZSBzZXJ2ZXJMaXN0IHNlcnZlcnMgdG8gZ2V0IG5laWdoYm9yc0xpc3QgYW5kIGFkZCBuZWlnaGJvcnNMaXN0IHRvIHNjYW5uZWRTZXJ2ZXJzXHJcbiAqIGFkZCBuZWlnaGJvcnNMaXN0IHRvIHNlcnZlckxpc3QgaWYgdGhleSBjYW4gYmUgYWRkZWQgKG5vdCBmb3JiaWRkZW4sIG5vdCBhIGR1cGxpY2F0ZSwgbm90IGEgcHJlZml4KVxyXG4gKiBkZWNyZWFzZSBkZXB0aCBiZWNhdXNlIHdlJ3ZlIGRvbmUgYW5vdGhlciBzY2FuXHJcbiAqIHNjYW4gZWFjaCBvZiB0aGUgbmVpZ2hib3JzTGlzdCBzZXJ2ZXJzIHRvIGdldCBzZWNvbmROZWlnaGJvcnNMaXN0IGFuZCBhZGQgc2Vjb25kTmVpZ2hib3JzTGlzdCB0byBzY2FubmVkU2VydmVyc1xyXG4gKiBhZGQgc2Vjb25kTmVpZ2hib3JzTGlzdCB0byBzZXJ2ZXJMaXN0IGlmIHRoZXkgY2FuIGJlIGFkZGVkIChub3QgZm9yYmlkZGVuLCBub3QgYSBkdXBsaWNhdGUsIG5vdCBhIHByZWZpeClcclxuICogZGVjcmVhc2UgZGVwdGggYmVjYXVzZSB3ZSd2ZSBkb25lIGFub3RoZXIgc2NhblxyXG4gKiBpZiBkZXB0aCBpcyBldmVyIDAsIHJldHVybiBzZXJ2ZXJMaXN0XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEByZW1hcmtzIFRoaXMgZnVuY3Rpb24gaXMgYSByZWN1cnNpdmUgZnVuY3Rpb24gdGhhdCBzY2FucyBzZXJ2ZXJzIHRvIGEgZ2l2ZW4gdHJlZSBkZXB0aCBhbmQgcmV0dXJucyBhIGxpc3Qgb2YgYWxsIHNlcnZlcnMgdG8gaGFjay5cclxuICogQHBhcmFtIHtOU30gbnMgXHJcbiAqIEBwYXJhbSBkZXB0aCBzY2FuIGRlcHRoOyBkZWZhdWx0cyB0byAxXHJcbiAqIEBwYXJhbSBzZXJ2ZXJMaXN0IFtPcHRpb25hbF0gcnVubmluZyBsaXN0IG9mIHNlcnZlcnMgKGlzIHJldHVybmVkIGF0IGVuZCBvZiByZWN1cnNpb24pXHJcbiAqIEBwYXJhbSBzY2FubmVkU2VydmVycyBbT3B0aW9uYWxdIGxpc3Qgb2Ygc2VydmVycyBhbHJlYWR5IHNjYW5uZWRcclxuICogQHJldHVybnMgQXJyYXkgb2YgYWxsIHNlcnZlcnMgZm91bmQgdXAgdG8gc3BlY2lmaWVkIGRlcHRoLiAgVGhlIHNlcnZlciBob3N0bmFtZXMgaW4gdGhlIHJldHVybmVkIGFycmF5IGFyZSBzdHJpbmcgdmFsdWVzLiBcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBidWlsZFNjYW5uZWRTZXJ2ZXJMaXN0KG5zOiBOUywgZGVwdGg6IG51bWJlciwgc2VydmVyTGlzdDogc3RyaW5nW10gPSBbXSwgc2Nhbm5lZFNlcnZlcnM6IHN0cmluZ1tdID0gW10pIHtcclxuICAgIGlmIChzZXJ2ZXJMaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHNjYW5uZWRTZXJ2ZXJzID0gbnMuc2NhbigpO1xyXG4gICAgICAgIHNlcnZlckxpc3QgPSBzY2FubmVkU2VydmVycy5maWx0ZXIoc2VydmVyID0+IGNhbkFkZFNlcnZlcihzZXJ2ZXIsIHNlcnZlckxpc3QpKTtcclxuICAgICAgICAtLWRlcHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHdoaWxlIChkZXB0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBuZXdTZXJ2ZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHNlcnZlciBvZiBzZXJ2ZXJMaXN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5laWdoYm9ycyA9IGF3YWl0IG5zLnNjYW4oc2VydmVyKTtcclxuICAgICAgICAgICAgY29uc3QgbmV3TmVpZ2hib3JzID0gbmVpZ2hib3JzLmZpbHRlcihzZXJ2ZXIgPT4gY2FuQWRkU2VydmVyKHNlcnZlciwgc2VydmVyTGlzdC5jb25jYXQobmV3U2VydmVycykpKTtcclxuICAgICAgICAgICAgbmV3U2VydmVycy5wdXNoKC4uLm5ld05laWdoYm9ycyk7XHJcbiAgICAgICAgICAgIHNjYW5uZWRTZXJ2ZXJzLnB1c2goLi4ubmV3TmVpZ2hib3JzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlcnZlckxpc3QucHVzaCguLi5uZXdTZXJ2ZXJzKTtcclxuICAgICAgICAtLWRlcHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJMaXN0O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uIHdhcyBjcmVhdGVkIGJ5IENvcGlsb3QgYWZ0ZXIgSSBhc2tlZCBhIGZldyBxdWVzdGlvbnMgYWJvdXQgYSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXMuXHJcbiAqIGJlbG93IHdhcyBteSBhdHRlbXB0Li4uLmNsZWFybHkgSSB3YXNuJ3QgdGhpbmtpbmcgaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGF0IGFsbCxcclxuICogaG93ZXZlciBjb3BpbG90IF9kaWRfIHVzZSB0aGlzIGNvZGUgdG8gZ2VuZXJhdGUgaXRzIG93biBjb2RlLlxyXG5leHBvcnQgZnVuY3Rpb24gY2FuQWRkU2VydmVyKHNlcnZlck5hbWU6IHN0cmluZywgc2VydmVyTGlzdE5hbWU6IHN0cmluZ1tdKSB7XHJcbiAgICBpZiAoIShzZXJ2ZXJMaXN0TmFtZS5pbmNsdWRlcyhzZXJ2ZXJOYW1lKSkgfHwgIShzZXJ2ZXJOYW1lID09IFwiaG9tZVwiIHx8IFwiZGFya3dlYlwiKSB8fCAhc2VydmVyTmFtZS5pbmNsdWRlcyhcInBzZXJ2XCIpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn07IFxyXG4qL1xyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0gc2VydmVySG9zdG5hbWUgTmFtZSBvZiBzZXJ2ZXIgdG8gY2hlY2sgYWdhaW5zdCBmb3JiaWRkZW4gc2VydmVycyBhbmQgcHJlZml4ZXNcclxuICogQHBhcmFtIHNlcnZlckxpc3ROYW1lIExpc3Qgb2Ygc2VydmVycyB0byBjaGVjayBhZ2FpbnN0IGZvciBkdXBsaWNhdGVzXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbkFkZFNlcnZlcihzZXJ2ZXJIb3N0bmFtZTogc3RyaW5nLCBzZXJ2ZXJMaXN0TmFtZTogc3RyaW5nW10pIHtcclxuICAgIGNvbnN0IGZvcmJpZGRlblNlcnZlcnMgPSBbJ2hvbWUnLCAnZGFya3dlYiddO1xyXG4gICAgY29uc3QgZm9yYmlkZGVuU2VydmVyUHJlZml4ZXMgPSBbJ3BzZXJ2LSddO1xyXG5cclxuICAgIGNvbnN0IGlzRm9yYmlkZGVuU2VydmVyID0gZm9yYmlkZGVuU2VydmVycy5zb21lKGZvcmJpZGRlblNlcnZlciA9PiBmb3JiaWRkZW5TZXJ2ZXIgPT09IHNlcnZlckhvc3RuYW1lKTtcclxuICAgIGNvbnN0IGlzRm9yYmlkZGVuU2VydmVyUHJlZml4ID0gZm9yYmlkZGVuU2VydmVyUHJlZml4ZXMuc29tZShwcmVmaXggPT4gc2VydmVySG9zdG5hbWUuc3RhcnRzV2l0aChwcmVmaXgpKTtcclxuICAgIGNvbnN0IGlzRHVwbGljYXRlU2VydmVyID0gc2VydmVyTGlzdE5hbWUuaW5jbHVkZXMoc2VydmVySG9zdG5hbWUpO1xyXG5cclxuICAgIHJldHVybiAhaXNGb3JiaWRkZW5TZXJ2ZXIgJiYgIWlzRHVwbGljYXRlU2VydmVyICYmICFpc0ZvcmJpZGRlblNlcnZlclByZWZpeDtcclxufTtcclxuXHJcblxyXG4iXX0=\",\"filename\":\"scan-servers.js\",\"server\":\"home\"}}],[\"open-ports.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from \\\"./colors\\\";\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let hostname = ns.args[0]?.toString();\\r\\n    openPorts(ns, hostname);\\r\\n}\\r\\n/**\\r\\n * @remarks This function opens a specified number of ports on a server.\\r\\n * @param ns\\r\\n * @param hostname server's hostname\\r\\n * @returns\\r\\n */\\r\\nexport async function openPorts(ns, hostname) {\\r\\n    const programs = [\\r\\n        `brutessh.exe`,\\r\\n        `ftpcrack.exe`,\\r\\n        `relaysmtp.exe`,\\r\\n        `httpworm.exe`,\\r\\n        `sqlinject.exe`\\r\\n    ];\\r\\n    const maxPorts = programs.length;\\r\\n    const portsRequired = ns.getServerNumPortsRequired(hostname);\\r\\n    for (let i = 0; i < portsRequired && i < maxPorts; i++) {\\r\\n        //ns.tprint(`INFO: ...opening port ${colors.Magenta}${i+1}${colors.Reset}...`); // i+1 because ports are 1-indexed\\r\\n        try {\\r\\n            if (ns.fileExists(programs[i])) {\\r\\n                switch (i) {\\r\\n                    case 0:\\r\\n                        ns.brutessh(hostname);\\r\\n                        break;\\r\\n                    case 1:\\r\\n                        ns.ftpcrack(hostname);\\r\\n                        break;\\r\\n                    case 2:\\r\\n                        ns.relaysmtp(hostname);\\r\\n                        break;\\r\\n                    case 3:\\r\\n                        ns.httpworm(hostname);\\r\\n                        break;\\r\\n                    case 4:\\r\\n                        ns.sqlinject(hostname);\\r\\n                        break;\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                throw (`${colors.Yellow}${programs[i]}${colors.Reset} unavailable, cannot open port ${colors.Magenta}${i + 1}${colors.Reset}`);\\r\\n            }\\r\\n        }\\r\\n        catch (err) {\\r\\n            ns.tprint(`ERROR: ${err} ...aborting`);\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Blbi1wb3J0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9vcGVuLXBvcnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEMscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDN0IsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUN0QyxTQUFTLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsU0FBUyxDQUFDLEVBQU0sRUFBRSxRQUFnQjtJQUNwRCxNQUFNLFFBQVEsR0FBRztRQUNiLGNBQWM7UUFDZCxjQUFjO1FBQ2QsZUFBZTtRQUNmLGNBQWM7UUFDZCxlQUFlO0tBQ2xCLENBQUM7SUFDRixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQ2pDLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsYUFBYSxJQUFJLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEQsa0hBQWtIO1FBQ2xILElBQUk7WUFDQSxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzVCLFFBQVEsQ0FBQyxFQUFFO29CQUNQLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN0QixNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN0QixNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN2QixNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN0QixNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN2QixNQUFNO2lCQUNiO2FBQ0o7aUJBQU07Z0JBQ0gsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssa0NBQWtDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUNoSTtTQUNKO1FBQUMsT0FBTSxHQUFHLEVBQUU7WUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxjQUFjLENBQUMsQ0FBQztZQUN2QyxPQUFPO1NBQ1Y7S0FDSjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZCAxMC8xNi8yM1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSBcIi4vY29sb3JzXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBsZXQgaG9zdG5hbWUgPSBucy5hcmdzWzBdPy50b1N0cmluZygpO1xyXG4gICAgb3BlblBvcnRzKG5zLCBob3N0bmFtZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcmVtYXJrcyBUaGlzIGZ1bmN0aW9uIG9wZW5zIGEgc3BlY2lmaWVkIG51bWJlciBvZiBwb3J0cyBvbiBhIHNlcnZlci4gXHJcbiAqIEBwYXJhbSBucyBcclxuICogQHBhcmFtIGhvc3RuYW1lIHNlcnZlcidzIGhvc3RuYW1lXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9wZW5Qb3J0cyhuczogTlMsIGhvc3RuYW1lOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHByb2dyYW1zID0gW1xyXG4gICAgICAgIGBicnV0ZXNzaC5leGVgLFxyXG4gICAgICAgIGBmdHBjcmFjay5leGVgLFxyXG4gICAgICAgIGByZWxheXNtdHAuZXhlYCxcclxuICAgICAgICBgaHR0cHdvcm0uZXhlYCxcclxuICAgICAgICBgc3FsaW5qZWN0LmV4ZWBcclxuICAgIF07XHJcbiAgICBjb25zdCBtYXhQb3J0cyA9IHByb2dyYW1zLmxlbmd0aDtcclxuICAgIGNvbnN0IHBvcnRzUmVxdWlyZWQgPSBucy5nZXRTZXJ2ZXJOdW1Qb3J0c1JlcXVpcmVkKGhvc3RuYW1lKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9ydHNSZXF1aXJlZCAmJiBpIDwgbWF4UG9ydHM7IGkrKykge1xyXG4gICAgICAgIC8vbnMudHByaW50KGBJTkZPOiAuLi5vcGVuaW5nIHBvcnQgJHtjb2xvcnMuTWFnZW50YX0ke2krMX0ke2NvbG9ycy5SZXNldH0uLi5gKTsgLy8gaSsxIGJlY2F1c2UgcG9ydHMgYXJlIDEtaW5kZXhlZFxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChucy5maWxlRXhpc3RzKHByb2dyYW1zW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBucy5icnV0ZXNzaChob3N0bmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuZnRwY3JhY2soaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5zLnJlbGF5c210cChob3N0bmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnMuaHR0cHdvcm0oaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5zLnNxbGluamVjdChob3N0bmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgKGAke2NvbG9ycy5ZZWxsb3d9JHtwcm9ncmFtc1tpXX0ke2NvbG9ycy5SZXNldH0gdW5hdmFpbGFibGUsIGNhbm5vdCBvcGVuIHBvcnQgJHtjb2xvcnMuTWFnZW50YX0ke2krMX0ke2NvbG9ycy5SZXNldH1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2goZXJyKSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChgRVJST1I6ICR7ZXJyfSAuLi5hYm9ydGluZ2ApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19\",\"filename\":\"open-ports.js\",\"server\":\"home\"}}],[\"hack-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d 10/11/23\\r\\nimport { colors } from \\\"./colors\\\";\\r\\nimport { buildScannedServerList } from \\\"./scan-servers\\\";\\r\\nimport { openPorts } from \\\"./open-ports\\\";\\r\\n/**\\r\\n * @param {NS} ns Netscript namespace\\r\\n */\\r\\n/**\\r\\n * TODO: write a logger script that will log all the things - might be unnecessary?  i'm only after a better way to format the terminal output\\r\\n * TODO: add a check to find existing purchased servers, and then purchase them if they don't exist\\r\\n * TODO: abstract this mess of a script so that each snippet is its own, call-able script that can be used in other scripts\\r\\n\\r\\n * TODO: hack target??  from Documentation/beginner's guide:\\r\\n *      `your hacking target should be the  with highest max money that's required hacking level is under 1/2 of your hacking level.`\\r\\n *\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    const hackToDeploy = ns.args[0]?.toString();\\r\\n    const includeHome = (ns.args[1]?.toString() === `-h`);\\r\\n    let scanDepth = 3;\\r\\n    if (ns.fileExists(`DeepscanV1.exe`))\\r\\n        scanDepth = 5;\\r\\n    if (ns.fileExists(`DeepscanV2.exe`))\\r\\n        scanDepth = 10;\\r\\n    ns.tprint(`INFO: hack initiated...`);\\r\\n    if (hackToDeploy) {\\r\\n        let serverList = await buildScannedServerList(ns, scanDepth);\\r\\n        ns.tprint(`INFO: found ${colors.Cyan}${serverList.length}${colors.Reset} servers during scan of depth ${colors.Magenta}${scanDepth}${colors.Reset}...`);\\r\\n        ns.tprint(`INFO: selecting best server to 🎯...`);\\r\\n        const hackTarget = `joesguns`; //serverWithMostMoney(ns, serverList); --need to account for hacking level, and choose the best server that has high money but low hacking level\\r\\n        ns.tprint(`INFO: ...${colors.Green}${hackTarget}${colors.Reset} selected!`);\\r\\n        ns.tprint(`INFO: attempting to hack servers...`);\\r\\n        serverList.forEach((hostname) => {\\r\\n            ns.scp(hackToDeploy, hostname);\\r\\n            if (!ns.hasRootAccess(hostname)) {\\r\\n                ns.tprint(`WARN: ${colors.Cyan}${hostname}${colors.Reset} does not have root access. attempting root...`);\\r\\n                openPorts(ns, hostname);\\r\\n                try {\\r\\n                    ns.nuke(hostname);\\r\\n                    ns.tprint(`INFO: ...💣 successful. root access granted!`);\\r\\n                }\\r\\n                catch {\\r\\n                    ns.tprint(`ERROR: ...root access denied! cannot hack ${colors.Cyan}${hostname}${colors.Reset}!`);\\r\\n                }\\r\\n            }\\r\\n            // at this point the server _should_ have root access,\\r\\n            // but still could have failed to deploy NUKE.exe\\r\\n            // so check for root access again before deploying hack\\r\\n            if (ns.hasRootAccess(hostname))\\r\\n                ns.run(`deploy-hack.js`, 1, hostname, hackToDeploy, hackTarget);\\r\\n        });\\r\\n        //   BROKEN - doesn't find purchased servers, having to manually deploy the hack to them\\r\\n        // check for existing purchased servers and start them, or purchase them if they don't exist and there's enough money\\r\\n        if (ns.scan().some((server) => /pserv-\\\\d/.test(server))) {\\r\\n            ns.tprint(`INFO: found purchased servers, deploying hack...`);\\r\\n            ns.run(`start-purchased-servers.js`, 1, hackToDeploy, hackTarget);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(`home`) > (ns.getPurchasedServerCost(16) * ns.getPurchasedServerLimit())) {\\r\\n            // TODO: fix the purchase server script to properly deploy the hack instead of a hardcoded script name\\r\\n            ns.run(`purchase-server-16gb.js`, 1, hackToDeploy, hackTarget);\\r\\n        }\\r\\n        else\\r\\n            ns.tprint(`INFO: no purchased servers, skipping...`);\\r\\n        if (includeHome)\\r\\n            ns.run(`start-home-server.js`, 1, hackToDeploy, hackTarget, `-k`);\\r\\n        else\\r\\n            ns.tprint(`INFO: skipping home server. use 2nd arg '-h' to include home server in hacktivities.`);\\r\\n        ns.toast(`hacks deployed!`);\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`ERROR: no hack to deploy. include script name! use 2nd arg '-h' to include home server in hacktivities.`);\\r\\n    }\\r\\n    ;\\r\\n}\\r\\n/**\\r\\n * @remarks If the money available on the current server is greater than the money available on the accumulator server,\\r\\n * @remarks the callback function returns the name of the current server (b), otherwise it returns the name of the accumulator server (a).\\r\\n * @remarks This process continues until all servers in the array have been compared, at which point the name of the server with the highest amount of money available is returned.\\r\\n * @param ns Netscript namespace\\r\\n * @param serverList List of scanned servers\\r\\n * @returns The server hostname that has the most money available, the server hostname will be a string.\\r\\n */\\r\\nconst serverWithMostMoney = (ns, serverList) => {\\r\\n    const servers = serverList.filter((server) => server !== `home` && !/pserv-\\\\d/.test(server));\\r\\n    return servers.reduce((accumulator, currentValue) => {\\r\\n        return ns.getServerMoneyAvailable(currentValue) > ns.getServerMoneyAvailable(accumulator)\\r\\n            ? currentValue\\r\\n            : accumulator;\\r\\n    });\\r\\n};\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1zZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hhY2stc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFDN0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXpDOztHQUVHO0FBRUg7Ozs7Ozs7O0dBUUc7QUFFSCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLE1BQU0sWUFBWSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDcEQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQ3RELElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNsQixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUM7UUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ25ELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUFFLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFFcEQsRUFBRSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ3JDLElBQUksWUFBWSxFQUFFO1FBQ2QsSUFBSSxVQUFVLEdBQUcsTUFBTSxzQkFBc0IsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDN0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyxlQUFlLE1BQU0sQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxpQ0FBaUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUM7UUFFeEosRUFBRSxDQUFDLE1BQU0sQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFBO1FBQ2pELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxDQUFDLGdKQUFnSjtRQUMvSyxFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksTUFBTSxDQUFDLEtBQUssR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLEtBQUssWUFBWSxDQUFDLENBQUM7UUFFNUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1FBQ2pELFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFnQixFQUFFLEVBQUU7WUFDcEMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzdCLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxnREFBZ0QsQ0FBQyxDQUFDO2dCQUMxRyxTQUFTLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUN4QixJQUFJO29CQUNBLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQ2xCLEVBQUUsQ0FBQyxNQUFNLENBQUMsOENBQThDLENBQUMsQ0FBQztpQkFDN0Q7Z0JBQ0QsTUFBTTtvQkFDRixFQUFFLENBQUMsTUFBTSxDQUFDLDZDQUE2QyxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztpQkFDcEc7YUFDSjtZQUVELHNEQUFzRDtZQUN0RCxpREFBaUQ7WUFDakQsdURBQXVEO1lBQ3ZELElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7Z0JBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNwRyxDQUFDLENBQUMsQ0FBQztRQUVILHdGQUF3RjtRQUV4RixxSEFBcUg7UUFDckgsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUU7WUFDN0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO1lBQzlELEVBQUUsQ0FBQyxHQUFHLENBQUMsNEJBQTRCLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNyRTthQUNJLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLEVBQzVHO1lBQ0ksc0dBQXNHO1lBQ3RHLEVBQUUsQ0FBQyxHQUFHLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNsRTs7WUFDSSxFQUFFLENBQUMsTUFBTSxDQUFDLHlDQUF5QyxDQUFDLENBQUM7UUFFMUQsSUFBSSxXQUFXO1lBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQzs7WUFDOUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxzRkFBc0YsQ0FBQyxDQUFDO1FBRXZHLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztLQUMvQjtTQUNJO1FBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyx5R0FBeUcsQ0FBQyxDQUFDO0tBQ3hIO0lBQUEsQ0FBQztBQUNOLENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEVBQU0sRUFBRSxVQUFlLEVBQUUsRUFBRTtJQUNwRCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3JHLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQW1CLEVBQUUsWUFBb0IsRUFBRSxFQUFFO1FBQ2xFLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLENBQUM7WUFDdkYsQ0FBQyxDQUFDLFlBQVk7WUFDZCxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ2xCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlZCBieSBqX19yMGQgMTAvMTEvMjNcclxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSBcIi4vY29sb3JzXCI7XHJcbmltcG9ydCB7IGJ1aWxkU2Nhbm5lZFNlcnZlckxpc3QgfSBmcm9tIFwiLi9zY2FuLXNlcnZlcnNcIjtcclxuaW1wb3J0IHsgb3BlblBvcnRzIH0gZnJvbSBcIi4vb3Blbi1wb3J0c1wiO1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuLyoqIFxyXG4gKiBAcGFyYW0ge05TfSBucyBOZXRzY3JpcHQgbmFtZXNwYWNlXHJcbiAqL1xyXG5cclxuLyoqIFxyXG4gKiBUT0RPOiB3cml0ZSBhIGxvZ2dlciBzY3JpcHQgdGhhdCB3aWxsIGxvZyBhbGwgdGhlIHRoaW5ncyAtIG1pZ2h0IGJlIHVubmVjZXNzYXJ5PyAgaSdtIG9ubHkgYWZ0ZXIgYSBiZXR0ZXIgd2F5IHRvIGZvcm1hdCB0aGUgdGVybWluYWwgb3V0cHV0XHJcbiAqIFRPRE86IGFkZCBhIGNoZWNrIHRvIGZpbmQgZXhpc3RpbmcgcHVyY2hhc2VkIHNlcnZlcnMsIGFuZCB0aGVuIHB1cmNoYXNlIHRoZW0gaWYgdGhleSBkb24ndCBleGlzdFxyXG4gKiBUT0RPOiBhYnN0cmFjdCB0aGlzIG1lc3Mgb2YgYSBzY3JpcHQgc28gdGhhdCBlYWNoIHNuaXBwZXQgaXMgaXRzIG93biwgY2FsbC1hYmxlIHNjcmlwdCB0aGF0IGNhbiBiZSB1c2VkIGluIG90aGVyIHNjcmlwdHNcclxuXHJcbiAqIFRPRE86IGhhY2sgdGFyZ2V0Pz8gIGZyb20gRG9jdW1lbnRhdGlvbi9iZWdpbm5lcidzIGd1aWRlOiBcclxuICogICAgICBgeW91ciBoYWNraW5nIHRhcmdldCBzaG91bGQgYmUgdGhlICB3aXRoIGhpZ2hlc3QgbWF4IG1vbmV5IHRoYXQncyByZXF1aXJlZCBoYWNraW5nIGxldmVsIGlzIHVuZGVyIDEvMiBvZiB5b3VyIGhhY2tpbmcgbGV2ZWwuYFxyXG4gKiBcclxuICovXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIGNvbnN0IGhhY2tUb0RlcGxveTogc3RyaW5nID0gbnMuYXJnc1swXT8udG9TdHJpbmcoKTtcclxuICAgIGNvbnN0IGluY2x1ZGVIb21lID0gKG5zLmFyZ3NbMV0/LnRvU3RyaW5nKCkgPT09IGAtaGApO1xyXG4gICAgbGV0IHNjYW5EZXB0aCA9IDM7IFxyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoYERlZXBzY2FuVjEuZXhlYCkpIHNjYW5EZXB0aCA9IDU7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhgRGVlcHNjYW5WMi5leGVgKSkgc2NhbkRlcHRoID0gMTA7XHJcbiAgICBcclxuICAgIG5zLnRwcmludChgSU5GTzogaGFjayBpbml0aWF0ZWQuLi5gKTtcclxuICAgIGlmIChoYWNrVG9EZXBsb3kpIHtcclxuICAgICAgICBsZXQgc2VydmVyTGlzdCA9IGF3YWl0IGJ1aWxkU2Nhbm5lZFNlcnZlckxpc3QobnMsIHNjYW5EZXB0aCk7XHJcbiAgICAgICAgbnMudHByaW50KGBJTkZPOiBmb3VuZCAke2NvbG9ycy5DeWFufSR7c2VydmVyTGlzdC5sZW5ndGh9JHtjb2xvcnMuUmVzZXR9IHNlcnZlcnMgZHVyaW5nIHNjYW4gb2YgZGVwdGggJHtjb2xvcnMuTWFnZW50YX0ke3NjYW5EZXB0aH0ke2NvbG9ycy5SZXNldH0uLi5gKTtcclxuXHJcbiAgICAgICAgbnMudHByaW50KGBJTkZPOiBzZWxlY3RpbmcgYmVzdCBzZXJ2ZXIgdG8g8J+Ory4uLmApXHJcbiAgICAgICAgY29uc3QgaGFja1RhcmdldCA9IGBqb2VzZ3Vuc2A7IC8vc2VydmVyV2l0aE1vc3RNb25leShucywgc2VydmVyTGlzdCk7IC0tbmVlZCB0byBhY2NvdW50IGZvciBoYWNraW5nIGxldmVsLCBhbmQgY2hvb3NlIHRoZSBiZXN0IHNlcnZlciB0aGF0IGhhcyBoaWdoIG1vbmV5IGJ1dCBsb3cgaGFja2luZyBsZXZlbFxyXG4gICAgICAgIG5zLnRwcmludChgSU5GTzogLi4uJHtjb2xvcnMuR3JlZW59JHtoYWNrVGFyZ2V0fSR7Y29sb3JzLlJlc2V0fSBzZWxlY3RlZCFgKTtcclxuXHJcbiAgICAgICAgbnMudHByaW50KGBJTkZPOiBhdHRlbXB0aW5nIHRvIGhhY2sgc2VydmVycy4uLmApO1xyXG4gICAgICAgIHNlcnZlckxpc3QuZm9yRWFjaCgoaG9zdG5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBucy5zY3AoaGFja1RvRGVwbG95LCBob3N0bmFtZSk7XHJcbiAgICAgICAgICAgIGlmICghbnMuaGFzUm9vdEFjY2Vzcyhob3N0bmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIG5zLnRwcmludChgV0FSTjogJHtjb2xvcnMuQ3lhbn0ke2hvc3RuYW1lfSR7Y29sb3JzLlJlc2V0fSBkb2VzIG5vdCBoYXZlIHJvb3QgYWNjZXNzLiBhdHRlbXB0aW5nIHJvb3QuLi5gKTtcclxuICAgICAgICAgICAgICAgIG9wZW5Qb3J0cyhucywgaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBucy5udWtlKGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBucy50cHJpbnQoYElORk86IC4uLvCfkqMgc3VjY2Vzc2Z1bC4gcm9vdCBhY2Nlc3MgZ3JhbnRlZCFgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIHtcclxuICAgICAgICAgICAgICAgICAgICBucy50cHJpbnQoYEVSUk9SOiAuLi5yb290IGFjY2VzcyBkZW5pZWQhIGNhbm5vdCBoYWNrICR7Y29sb3JzLkN5YW59JHtob3N0bmFtZX0ke2NvbG9ycy5SZXNldH0hYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGF0IHRoaXMgcG9pbnQgdGhlIHNlcnZlciBfc2hvdWxkXyBoYXZlIHJvb3QgYWNjZXNzLFxyXG4gICAgICAgICAgICAvLyBidXQgc3RpbGwgY291bGQgaGF2ZSBmYWlsZWQgdG8gZGVwbG95IE5VS0UuZXhlXHJcbiAgICAgICAgICAgIC8vIHNvIGNoZWNrIGZvciByb290IGFjY2VzcyBhZ2FpbiBiZWZvcmUgZGVwbG95aW5nIGhhY2tcclxuICAgICAgICAgICAgaWYgKG5zLmhhc1Jvb3RBY2Nlc3MoaG9zdG5hbWUpKSBucy5ydW4oYGRlcGxveS1oYWNrLmpzYCwgMSwgaG9zdG5hbWUsIGhhY2tUb0RlcGxveSwgaGFja1RhcmdldCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vICAgQlJPS0VOIC0gZG9lc24ndCBmaW5kIHB1cmNoYXNlZCBzZXJ2ZXJzLCBoYXZpbmcgdG8gbWFudWFsbHkgZGVwbG95IHRoZSBoYWNrIHRvIHRoZW1cclxuXHJcbiAgICAgICAgLy8gY2hlY2sgZm9yIGV4aXN0aW5nIHB1cmNoYXNlZCBzZXJ2ZXJzIGFuZCBzdGFydCB0aGVtLCBvciBwdXJjaGFzZSB0aGVtIGlmIHRoZXkgZG9uJ3QgZXhpc3QgYW5kIHRoZXJlJ3MgZW5vdWdoIG1vbmV5XHJcbiAgICAgICAgaWYgKG5zLnNjYW4oKS5zb21lKChzZXJ2ZXI6IHN0cmluZykgPT4gL3BzZXJ2LVxcZC8udGVzdChzZXJ2ZXIpKSkge1xyXG4gICAgICAgICAgICBucy50cHJpbnQoYElORk86IGZvdW5kIHB1cmNoYXNlZCBzZXJ2ZXJzLCBkZXBsb3lpbmcgaGFjay4uLmApO1xyXG4gICAgICAgICAgICBucy5ydW4oYHN0YXJ0LXB1cmNoYXNlZC1zZXJ2ZXJzLmpzYCwgMSwgaGFja1RvRGVwbG95LCBoYWNrVGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoYGhvbWVgKSA+IChucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KDE2KSAqIG5zLmdldFB1cmNoYXNlZFNlcnZlckxpbWl0KCkpKVxyXG4gICAgICAgIHsgXHJcbiAgICAgICAgICAgIC8vIFRPRE86IGZpeCB0aGUgcHVyY2hhc2Ugc2VydmVyIHNjcmlwdCB0byBwcm9wZXJseSBkZXBsb3kgdGhlIGhhY2sgaW5zdGVhZCBvZiBhIGhhcmRjb2RlZCBzY3JpcHQgbmFtZVxyXG4gICAgICAgICAgICBucy5ydW4oYHB1cmNoYXNlLXNlcnZlci0xNmdiLmpzYCwgMSwgaGFja1RvRGVwbG95LCBoYWNrVGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBucy50cHJpbnQoYElORk86IG5vIHB1cmNoYXNlZCBzZXJ2ZXJzLCBza2lwcGluZy4uLmApO1xyXG5cclxuICAgICAgICBpZiAoaW5jbHVkZUhvbWUpIG5zLnJ1bihgc3RhcnQtaG9tZS1zZXJ2ZXIuanNgLCAxLCBoYWNrVG9EZXBsb3ksIGhhY2tUYXJnZXQsIGAta2ApO1xyXG4gICAgICAgIGVsc2UgbnMudHByaW50KGBJTkZPOiBza2lwcGluZyBob21lIHNlcnZlci4gdXNlIDJuZCBhcmcgJy1oJyB0byBpbmNsdWRlIGhvbWUgc2VydmVyIGluIGhhY2t0aXZpdGllcy5gKTtcclxuXHJcbiAgICAgICAgbnMudG9hc3QoYGhhY2tzIGRlcGxveWVkIWApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbnMudHByaW50KGBFUlJPUjogbm8gaGFjayB0byBkZXBsb3kuIGluY2x1ZGUgc2NyaXB0IG5hbWUhIHVzZSAybmQgYXJnICctaCcgdG8gaW5jbHVkZSBob21lIHNlcnZlciBpbiBoYWNrdGl2aXRpZXMuYCk7XHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogQHJlbWFya3MgSWYgdGhlIG1vbmV5IGF2YWlsYWJsZSBvbiB0aGUgY3VycmVudCBzZXJ2ZXIgaXMgZ3JlYXRlciB0aGFuIHRoZSBtb25leSBhdmFpbGFibGUgb24gdGhlIGFjY3VtdWxhdG9yIHNlcnZlciwgXHJcbiAqIEByZW1hcmtzIHRoZSBjYWxsYmFjayBmdW5jdGlvbiByZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IHNlcnZlciAoYiksIG90aGVyd2lzZSBpdCByZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBhY2N1bXVsYXRvciBzZXJ2ZXIgKGEpLiBcclxuICogQHJlbWFya3MgVGhpcyBwcm9jZXNzIGNvbnRpbnVlcyB1bnRpbCBhbGwgc2VydmVycyBpbiB0aGUgYXJyYXkgaGF2ZSBiZWVuIGNvbXBhcmVkLCBhdCB3aGljaCBwb2ludCB0aGUgbmFtZSBvZiB0aGUgc2VydmVyIHdpdGggdGhlIGhpZ2hlc3QgYW1vdW50IG9mIG1vbmV5IGF2YWlsYWJsZSBpcyByZXR1cm5lZC5cclxuICogQHBhcmFtIG5zIE5ldHNjcmlwdCBuYW1lc3BhY2VcclxuICogQHBhcmFtIHNlcnZlckxpc3QgTGlzdCBvZiBzY2FubmVkIHNlcnZlcnNcclxuICogQHJldHVybnMgVGhlIHNlcnZlciBob3N0bmFtZSB0aGF0IGhhcyB0aGUgbW9zdCBtb25leSBhdmFpbGFibGUsIHRoZSBzZXJ2ZXIgaG9zdG5hbWUgd2lsbCBiZSBhIHN0cmluZy5cclxuICovXHJcbmNvbnN0IHNlcnZlcldpdGhNb3N0TW9uZXkgPSAobnM6IE5TLCBzZXJ2ZXJMaXN0OiBhbnkpID0+IHtcclxuICAgIGNvbnN0IHNlcnZlcnMgPSBzZXJ2ZXJMaXN0LmZpbHRlcigoc2VydmVyOiBzdHJpbmcpID0+IHNlcnZlciAhPT0gYGhvbWVgICYmICEvcHNlcnYtXFxkLy50ZXN0KHNlcnZlcikpO1xyXG4gICAgcmV0dXJuIHNlcnZlcnMucmVkdWNlKChhY2N1bXVsYXRvcjogc3RyaW5nLCBjdXJyZW50VmFsdWU6IHN0cmluZykgPT4ge1xyXG4gICAgICByZXR1cm4gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoY3VycmVudFZhbHVlKSA+IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKGFjY3VtdWxhdG9yKVxyXG4gICAgICAgID8gY3VycmVudFZhbHVlXHJcbiAgICAgICAgOiBhY2N1bXVsYXRvcjtcclxuICAgIH0pO1xyXG4gIH07Il19\",\"filename\":\"hack-servers.js\",\"server\":\"home\"}}],[\"purchase-server-16gb.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n/**\\r\\n * TODO: fix the purchase server script to properly deploy the hack instead of a hardcoded script name\\r\\n * TODO: allow for the passing of the RAM value\\r\\n * @param {NS} ns\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    // How much RAM each purchased server will have. In this case, it'll\\r\\n    // be 8GB.\\r\\n    const ram = 16;\\r\\n    // Iterator we'll use for our loop\\r\\n    let i = 1; // changed to 1 by j__r0d because 1 is a better place to start than 0 for this counter\\r\\n    // Continuously try to purchase servers until we've reached the maximum\\r\\n    // amount of servers, + 1 to account for 1-based indexing\\r\\n    while (i < ns.getPurchasedServerLimit() + 1) {\\r\\n        // Check if we have enough money to purchase a server\\r\\n        if (ns.getServerMoneyAvailable(`home`) > ns.getPurchasedServerCost(ram)) {\\r\\n            // If we have enough money, then:\\r\\n            //  1. Purchase the server\\r\\n            //  2. Copy our hacking script onto the newly-purchased server\\r\\n            //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n            //  4. Increment our iterator to indicate that we've bought a new server\\r\\n            let hostname = ns.purchaseServer(`pserv-` + i, ram);\\r\\n            ns.scp(`early-hack-template.js`, hostname);\\r\\n            ns.exec(`early-hack-template.js`, hostname, 3);\\r\\n            ++i;\\r\\n        }\\r\\n        //Make the script wait for a second before looping again.\\r\\n        //Removing this line will cause an infinite loop and crash the game.\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2Utc2VydmVyLTE2Z2IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcHVyY2hhc2Utc2VydmVyLTE2Z2IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBRXJCOzs7O0dBSUc7QUFFSCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLG9FQUFvRTtJQUNwRSxVQUFVO0lBQ1YsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBRWYsa0NBQWtDO0lBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLHNGQUFzRjtJQUVqRyx1RUFBdUU7SUFDdkUseURBQXlEO0lBQ3pELE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxHQUFJLENBQUMsRUFBRTtRQUMxQyxxREFBcUQ7UUFDckQsSUFBSSxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3JFLGlDQUFpQztZQUNqQywwQkFBMEI7WUFDMUIsOERBQThEO1lBQzlELDBFQUEwRTtZQUMxRSx3RUFBd0U7WUFDeEUsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3BELEVBQUUsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDM0MsRUFBRSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0MsRUFBRSxDQUFDLENBQUM7U0FDUDtRQUNELHlEQUF5RDtRQUN6RCxvRUFBb0U7UUFDcEUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3hCO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRoZSBjb250ZW50cyBvZiB0aGlzIHNjcmlwdCBjYW1lIGZyb20gdGhlIEJlZ2lubmVyJ3MgR3VpZGUgaW4gdGhlIGdhbWUncyBkb2N1bWVudGF0aW9uLi4uXHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuXHJcbi8qKlxyXG4gKiBUT0RPOiBmaXggdGhlIHB1cmNoYXNlIHNlcnZlciBzY3JpcHQgdG8gcHJvcGVybHkgZGVwbG95IHRoZSBoYWNrIGluc3RlYWQgb2YgYSBoYXJkY29kZWQgc2NyaXB0IG5hbWVcclxuICogVE9ETzogYWxsb3cgZm9yIHRoZSBwYXNzaW5nIG9mIHRoZSBSQU0gdmFsdWVcclxuICogQHBhcmFtIHtOU30gbnMgXHJcbiAqL1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICAvLyBIb3cgbXVjaCBSQU0gZWFjaCBwdXJjaGFzZWQgc2VydmVyIHdpbGwgaGF2ZS4gSW4gdGhpcyBjYXNlLCBpdCdsbFxyXG4gICAgLy8gYmUgOEdCLlxyXG4gICAgY29uc3QgcmFtID0gMTY7XHJcblxyXG4gICAgLy8gSXRlcmF0b3Igd2UnbGwgdXNlIGZvciBvdXIgbG9vcFxyXG4gICAgbGV0IGkgPSAxOyAvLyBjaGFuZ2VkIHRvIDEgYnkgal9fcjBkIGJlY2F1c2UgMSBpcyBhIGJldHRlciBwbGFjZSB0byBzdGFydCB0aGFuIDAgZm9yIHRoaXMgY291bnRlclxyXG5cclxuICAgIC8vIENvbnRpbnVvdXNseSB0cnkgdG8gcHVyY2hhc2Ugc2VydmVycyB1bnRpbCB3ZSd2ZSByZWFjaGVkIHRoZSBtYXhpbXVtXHJcbiAgICAvLyBhbW91bnQgb2Ygc2VydmVycywgKyAxIHRvIGFjY291bnQgZm9yIDEtYmFzZWQgaW5kZXhpbmdcclxuICAgIHdoaWxlIChpIDwgbnMuZ2V0UHVyY2hhc2VkU2VydmVyTGltaXQoKSAgKyAxKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBlbm91Z2ggbW9uZXkgdG8gcHVyY2hhc2UgYSBzZXJ2ZXJcclxuICAgICAgICBpZiAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoYGhvbWVgKSA+IG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QocmFtKSkge1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGVub3VnaCBtb25leSwgdGhlbjpcclxuICAgICAgICAgICAgLy8gIDEuIFB1cmNoYXNlIHRoZSBzZXJ2ZXJcclxuICAgICAgICAgICAgLy8gIDIuIENvcHkgb3VyIGhhY2tpbmcgc2NyaXB0IG9udG8gdGhlIG5ld2x5LXB1cmNoYXNlZCBzZXJ2ZXJcclxuICAgICAgICAgICAgLy8gIDMuIFJ1biBvdXIgaGFja2luZyBzY3JpcHQgb24gdGhlIG5ld2x5LXB1cmNoYXNlZCBzZXJ2ZXIgd2l0aCAzIHRocmVhZHNcclxuICAgICAgICAgICAgLy8gIDQuIEluY3JlbWVudCBvdXIgaXRlcmF0b3IgdG8gaW5kaWNhdGUgdGhhdCB3ZSd2ZSBib3VnaHQgYSBuZXcgc2VydmVyXHJcbiAgICAgICAgICAgIGxldCBob3N0bmFtZSA9IG5zLnB1cmNoYXNlU2VydmVyKGBwc2Vydi1gICsgaSwgcmFtKTtcclxuICAgICAgICAgICAgbnMuc2NwKGBlYXJseS1oYWNrLXRlbXBsYXRlLmpzYCwgaG9zdG5hbWUpO1xyXG4gICAgICAgICAgICBucy5leGVjKGBlYXJseS1oYWNrLXRlbXBsYXRlLmpzYCwgaG9zdG5hbWUsIDMpO1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vTWFrZSB0aGUgc2NyaXB0IHdhaXQgZm9yIGEgc2Vjb25kIGJlZm9yZSBsb29waW5nIGFnYWluLlxyXG4gICAgICAgIC8vUmVtb3ZpbmcgdGhpcyBsaW5lIHdpbGwgY2F1c2UgYW4gaW5maW5pdGUgbG9vcCBhbmQgY3Jhc2ggdGhlIGdhbWUuXHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XHJcbiAgICB9XHJcbn0iXX0=\",\"filename\":\"purchase-server-16gb.js\",\"server\":\"home\"}}],[\"purchase-server-8gb.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // How much RAM each purchased server will have. In this case, it'll\\r\\n    // be 8GB.\\r\\n    const ram = 8;\\r\\n    // Iterator we'll use for our loop\\r\\n    let i = 1; // changed to 1 by j__r0d because 1 is a better place to start than 0 for this counter\\r\\n    // Continuously try to purchase servers until we've reached the maximum\\r\\n    // amount of servers\\r\\n    while (i < ns.getPurchasedServerLimit()) {\\r\\n        // Check if we have enough money to purchase a server\\r\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(ram)) {\\r\\n            // If we have enough money, then:\\r\\n            //  1. Purchase the server\\r\\n            //  2. Copy our hacking script onto the newly-purchased server\\r\\n            //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n            //  4. Increment our iterator to indicate that we've bought a new server\\r\\n            let hostname = ns.purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n            ns.scp(\\\"early-hack-template.js\\\", hostname);\\r\\n            ns.exec(\\\"early-hack-template.js\\\", hostname, 3);\\r\\n            ++i;\\r\\n        }\\r\\n        //Make the script wait for a second before looping again.\\r\\n        //Removing this line will cause an infinite loop and crash the game.\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2Utc2VydmVyLThnYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wdXJjaGFzZS1zZXJ2ZXItOGdiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLG9FQUFvRTtJQUNwRSxVQUFVO0lBQ1YsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBRWQsa0NBQWtDO0lBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLHNGQUFzRjtJQUVqRyx1RUFBdUU7SUFDdkUsb0JBQW9CO0lBQ3BCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1FBQ3JDLHFEQUFxRDtRQUNyRCxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckUsaUNBQWlDO1lBQ2pDLDBCQUEwQjtZQUMxQiw4REFBOEQ7WUFDOUQsMEVBQTBFO1lBQzFFLHdFQUF3RTtZQUN4RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDcEQsRUFBRSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUMzQyxFQUFFLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQyxFQUFFLENBQUMsQ0FBQztTQUNQO1FBQ0QseURBQXlEO1FBQ3pELG9FQUFvRTtRQUNwRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDeEI7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdGhlIGNvbnRlbnRzIG9mIHRoaXMgc2NyaXB0IGNhbWUgZnJvbSB0aGUgQmVnaW5uZXIncyBHdWlkZSBpbiB0aGUgZ2FtZSdzIGRvY3VtZW50YXRpb24uLi5cclxuaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIC8vIEhvdyBtdWNoIFJBTSBlYWNoIHB1cmNoYXNlZCBzZXJ2ZXIgd2lsbCBoYXZlLiBJbiB0aGlzIGNhc2UsIGl0J2xsXHJcbiAgICAvLyBiZSA4R0IuXHJcbiAgICBjb25zdCByYW0gPSA4O1xyXG5cclxuICAgIC8vIEl0ZXJhdG9yIHdlJ2xsIHVzZSBmb3Igb3VyIGxvb3BcclxuICAgIGxldCBpID0gMTsgLy8gY2hhbmdlZCB0byAxIGJ5IGpfX3IwZCBiZWNhdXNlIDEgaXMgYSBiZXR0ZXIgcGxhY2UgdG8gc3RhcnQgdGhhbiAwIGZvciB0aGlzIGNvdW50ZXJcclxuXHJcbiAgICAvLyBDb250aW51b3VzbHkgdHJ5IHRvIHB1cmNoYXNlIHNlcnZlcnMgdW50aWwgd2UndmUgcmVhY2hlZCB0aGUgbWF4aW11bVxyXG4gICAgLy8gYW1vdW50IG9mIHNlcnZlcnNcclxuICAgIHdoaWxlIChpIDwgbnMuZ2V0UHVyY2hhc2VkU2VydmVyTGltaXQoKSkge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgZW5vdWdoIG1vbmV5IHRvIHB1cmNoYXNlIGEgc2VydmVyXHJcbiAgICAgICAgaWYgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKFwiaG9tZVwiKSA+IG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QocmFtKSkge1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGVub3VnaCBtb25leSwgdGhlbjpcclxuICAgICAgICAgICAgLy8gIDEuIFB1cmNoYXNlIHRoZSBzZXJ2ZXJcclxuICAgICAgICAgICAgLy8gIDIuIENvcHkgb3VyIGhhY2tpbmcgc2NyaXB0IG9udG8gdGhlIG5ld2x5LXB1cmNoYXNlZCBzZXJ2ZXJcclxuICAgICAgICAgICAgLy8gIDMuIFJ1biBvdXIgaGFja2luZyBzY3JpcHQgb24gdGhlIG5ld2x5LXB1cmNoYXNlZCBzZXJ2ZXIgd2l0aCAzIHRocmVhZHNcclxuICAgICAgICAgICAgLy8gIDQuIEluY3JlbWVudCBvdXIgaXRlcmF0b3IgdG8gaW5kaWNhdGUgdGhhdCB3ZSd2ZSBib3VnaHQgYSBuZXcgc2VydmVyXHJcbiAgICAgICAgICAgIGxldCBob3N0bmFtZSA9IG5zLnB1cmNoYXNlU2VydmVyKFwicHNlcnYtXCIgKyBpLCByYW0pO1xyXG4gICAgICAgICAgICBucy5zY3AoXCJlYXJseS1oYWNrLXRlbXBsYXRlLmpzXCIsIGhvc3RuYW1lKTtcclxuICAgICAgICAgICAgbnMuZXhlYyhcImVhcmx5LWhhY2stdGVtcGxhdGUuanNcIiwgaG9zdG5hbWUsIDMpO1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vTWFrZSB0aGUgc2NyaXB0IHdhaXQgZm9yIGEgc2Vjb25kIGJlZm9yZSBsb29waW5nIGFnYWluLlxyXG4gICAgICAgIC8vUmVtb3ZpbmcgdGhpcyBsaW5lIHdpbGwgY2F1c2UgYW4gaW5maW5pdGUgbG9vcCBhbmQgY3Jhc2ggdGhlIGdhbWUuXHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwMCk7XHJcbiAgICB9XHJcbn0iXX0=\",\"filename\":\"purchase-server-8gb.js\",\"server\":\"home\"}}],[\"start-home-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from \\\"./colors\\\";\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(`INFO: deploying hack on ${colors.Cyan}home${colors.Reset} server...`);\\r\\n    const hackToDeploy = ns.args[0]?.toString();\\r\\n    const hackTarget = ns.args[1]?.toString();\\r\\n    const killallFlag = ns.args[2]?.toString() === \\\"-k\\\";\\r\\n    let hostname = \\\"home\\\";\\r\\n    if (killallFlag)\\r\\n        ns.killall();\\r\\n    let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n    ns.run(hackToDeploy, ~~threadsToUse, hackTarget);\\r\\n    if (ns.scriptRunning(hackToDeploy, \\\"home\\\"))\\r\\n        ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtaG9tZS1zZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RhcnQtaG9tZS1zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLDJCQUEyQixNQUFNLENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLFlBQVksQ0FBQyxDQUFDO0lBQ2pGLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDNUMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUMxQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQztJQUNwRCxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFDdEIsSUFBSSxXQUFXO1FBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDL0gsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQztRQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0NBQWdDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQztBQUNwSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlZCBieSBqX19yMGQgMTAvMTEvMjNcclxuaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuL2NvbG9yc1wiO1xyXG5cclxuLyoqIEBwYXJhbSB7TlN9IG5zICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudHByaW50KGBJTkZPOiBkZXBsb3lpbmcgaGFjayBvbiAke2NvbG9ycy5DeWFufWhvbWUke2NvbG9ycy5SZXNldH0gc2VydmVyLi4uYCk7XHJcbiAgICBjb25zdCBoYWNrVG9EZXBsb3kgPSBucy5hcmdzWzBdPy50b1N0cmluZygpOyBcclxuICAgIGNvbnN0IGhhY2tUYXJnZXQgPSBucy5hcmdzWzFdPy50b1N0cmluZygpO1xyXG4gICAgY29uc3Qga2lsbGFsbEZsYWcgPSBucy5hcmdzWzJdPy50b1N0cmluZygpID09PSBcIi1rXCI7XHJcbiAgICBsZXQgaG9zdG5hbWUgPSBcImhvbWVcIjtcclxuICAgIGlmIChraWxsYWxsRmxhZykgbnMua2lsbGFsbCgpO1xyXG4gICAgbGV0IHRocmVhZHNUb1VzZSA9IE1hdGgubWF4KDEsIChucy5nZXRTZXJ2ZXJNYXhSYW0oaG9zdG5hbWUpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShob3N0bmFtZSkpIC8gbnMuZ2V0U2NyaXB0UmFtKGhhY2tUb0RlcGxveSkpO1xyXG4gICAgbnMucnVuKGhhY2tUb0RlcGxveSwgfn50aHJlYWRzVG9Vc2UsIGhhY2tUYXJnZXQpO1xyXG4gICAgaWYgKG5zLnNjcmlwdFJ1bm5pbmcoaGFja1RvRGVwbG95LCBcImhvbWVcIikpIG5zLnRwcmludChgSU5GTzogLi4uaGFjayBkZXBsb3llZCB1c2luZyAke2NvbG9ycy5NYWdlbnRhfSR7fn50aHJlYWRzVG9Vc2V9JHtjb2xvcnMuUmVzZXR9IHRocmVhZHNgKTtcclxufSJdfQ==\",\"filename\":\"start-home-server.js\",\"server\":\"home\"}}],[\"start-purchased-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { colors } from \\\"./colors\\\";\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(\\\"INFO: deploying hack on purchased servers...\\\");\\r\\n    const hackToDeploy = ns.args[0].toString();\\r\\n    const hackTarget = ns.args[1].toString();\\r\\n    let hackedCount = 0;\\r\\n    let i = 1;\\r\\n    while (i < ns.getPurchasedServerLimit()) {\\r\\n        let hostname = \\\"pserv-\\\".concat(i.toString());\\r\\n        ns.killall(hostname);\\r\\n        let threadsToUse = Math.max(1, (ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname)) / ns.getScriptRam(hackToDeploy));\\r\\n        ns.scp(hackToDeploy, hostname);\\r\\n        ns.exec(hackToDeploy, hostname, ~~threadsToUse, hackTarget);\\r\\n        if (ns.scriptRunning(hackToDeploy, hostname)) {\\r\\n            ns.tprint(`INFO: ...hack deployed using ${colors.Magenta}${~~threadsToUse}${colors.Reset} threads on ${colors.Cyan}${hostname}${colors.Reset}`);\\r\\n            ++hackedCount;\\r\\n        }\\r\\n        ;\\r\\n        ++i;\\r\\n    }\\r\\n    ns.tprint(`INFO: hacks deployed on ${colors.Green}${hackedCount}${colors.Reset} purchased servers`);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtcHVyY2hhc2VkLXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RhcnQtcHVyY2hhc2VkLXNlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLDhDQUE4QyxDQUFDLENBQUM7SUFDMUQsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsRUFBRTtRQUNyQyxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckIsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUMvSCxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMvQixFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUMzRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxFQUFFO1lBQzFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0NBQWdDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxlQUFlLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO1lBQy9JLEVBQUUsV0FBVyxDQUFDO1NBQ2pCO1FBQUEsQ0FBQztRQUNGLEVBQUUsQ0FBQyxDQUFDO0tBQ1A7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLDJCQUEyQixNQUFNLENBQUMsS0FBSyxHQUFHLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3hHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjcmVhdGVkIGJ5IGpfX3IwZCAxMC8xMS8yM1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSBcIi4vY29sb3JzXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50cHJpbnQoXCJJTkZPOiBkZXBsb3lpbmcgaGFjayBvbiBwdXJjaGFzZWQgc2VydmVycy4uLlwiKTtcclxuICAgIGNvbnN0IGhhY2tUb0RlcGxveSA9IG5zLmFyZ3NbMF0udG9TdHJpbmcoKTtcclxuICAgIGNvbnN0IGhhY2tUYXJnZXQgPSBucy5hcmdzWzFdLnRvU3RyaW5nKCk7XHJcbiAgICBsZXQgaGFja2VkQ291bnQgPSAwO1xyXG4gICAgbGV0IGkgPSAxO1xyXG4gICAgd2hpbGUgKGkgPCBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpKSB7XHJcbiAgICAgICAgbGV0IGhvc3RuYW1lID0gXCJwc2Vydi1cIi5jb25jYXQoaS50b1N0cmluZygpKTtcclxuICAgICAgICBucy5raWxsYWxsKGhvc3RuYW1lKTtcclxuICAgICAgICBsZXQgdGhyZWFkc1RvVXNlID0gTWF0aC5tYXgoMSwgKG5zLmdldFNlcnZlck1heFJhbShob3N0bmFtZSkgLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKGhvc3RuYW1lKSkgLyBucy5nZXRTY3JpcHRSYW0oaGFja1RvRGVwbG95KSk7XHJcbiAgICAgICAgbnMuc2NwKGhhY2tUb0RlcGxveSwgaG9zdG5hbWUpOyAgXHJcbiAgICAgICAgbnMuZXhlYyhoYWNrVG9EZXBsb3ksIGhvc3RuYW1lLCB+fnRocmVhZHNUb1VzZSwgaGFja1RhcmdldClcclxuICAgICAgICBpZiAobnMuc2NyaXB0UnVubmluZyhoYWNrVG9EZXBsb3ksIGhvc3RuYW1lKSkge1xyXG4gICAgICAgICAgICBucy50cHJpbnQoYElORk86IC4uLmhhY2sgZGVwbG95ZWQgdXNpbmcgJHtjb2xvcnMuTWFnZW50YX0ke35+dGhyZWFkc1RvVXNlfSR7Y29sb3JzLlJlc2V0fSB0aHJlYWRzIG9uICR7Y29sb3JzLkN5YW59JHtob3N0bmFtZX0ke2NvbG9ycy5SZXNldH1gKVxyXG4gICAgICAgICAgICArK2hhY2tlZENvdW50O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgKytpO1xyXG4gICAgfVxyXG4gICAgbnMudHByaW50KGBJTkZPOiBoYWNrcyBkZXBsb3llZCBvbiAke2NvbG9ycy5HcmVlbn0ke2hhY2tlZENvdW50fSR7Y29sb3JzLlJlc2V0fSBwdXJjaGFzZWQgc2VydmVyc2ApO1xyXG59Il19\",\"filename\":\"start-purchased-servers.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-1-0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"server-list.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"server-list.txt\",\"text\":\"[home /]> scan-analyze 2\\r\\n┗ home\\r\\n  ┃   Root Access: YES, Required hacking skill: 1\\r\\n  ┃   Number of open ports required to NUKE: 5\\r\\n  ┃   RAM: 8.00GB\\r\\n  ┣ n00dles\\r\\n  ┃ ┃   Root Access: YES, Required hacking skill: 1\\r\\n  ┃ ┃   Number of open ports required to NUKE: 0\\r\\n  ┃ ┃   RAM: 4.00GB\\r\\n  ┃ ┗ CSEC\\r\\n  ┃       Root Access: NO, Required hacking skill: 52\\r\\n  ┃       Number of open ports required to NUKE: 1\\r\\n  ┃       RAM: 8.00GB\\r\\n  ┣ foodnstuff\\r\\n  ┃ ┃   Root Access: NO, Required hacking skill: 1\\r\\n  ┃ ┃   Number of open ports required to NUKE: 0\\r\\n  ┃ ┃   RAM: 16.00GB\\r\\n  ┃ ┗ max-hardware\\r\\n  ┃       Root Access: NO, Required hacking skill: 80\\r\\n  ┃       Number of open ports required to NUKE: 1\\r\\n  ┃       RAM: 32.00GB\\r\\n  ┣ sigma-cosmetics\\r\\n  ┃ ┃   Root Access: NO, Required hacking skill: 5\\r\\n  ┃ ┃   Number of open ports required to NUKE: 0\\r\\n  ┃ ┃   RAM: 16.00GB\\r\\n  ┃ ┗ zer0\\r\\n  ┃       Root Access: NO, Required hacking skill: 75\\r\\n  ┃       Number of open ports required to NUKE: 1\\r\\n  ┃       RAM: 32.00GB\\r\\n  ┣ joesguns\\r\\n  ┃     Root Access: NO, Required hacking skill: 10\\r\\n  ┃     Number of open ports required to NUKE: 0\\r\\n  ┃     RAM: 16.00GB\\r\\n  ┣ hong-fang-tea\\r\\n  ┃     Root Access: NO, Required hacking skill: 30\\r\\n  ┃     Number of open ports required to NUKE: 0\\r\\n  ┃     RAM: 16.00GB\\r\\n  ┣ harakiri-sushi\\r\\n  ┃ ┃   Root Access: NO, Required hacking skill: 40\\r\\n  ┃ ┃   Number of open ports required to NUKE: 0\\r\\n  ┃ ┃   RAM: 16.00GB\\r\\n  ┃ ┗ nectar-net\\r\\n  ┃       Root Access: NO, Required hacking skill: 20\\r\\n  ┃       Number of open ports required to NUKE: 0\\r\\n  ┃       RAM: 16.00GB\\r\\n  ┗ iron-gym\\r\\n        Root Access: NO, Required hacking skill: 100\\r\\n        Number of open ports required to NUKE: 1\\r\\n        RAM: 32.00GB\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3597135.32981786,104,624,624]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15549.970723520668,\"onlineMoneyMade\":3597135.32981786,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"home\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":104,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-561187.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,22],[7,14],[25,33],[5,11],[13,17],[2,9],[17,25],[14,20],[23,28],[5,13],[20,28],[2,9],[20,21],[9,15],[12,14]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-486469.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[86,20,62,184,21,7,132,131,114,127,81,196,132,54,132,124,140,151,164,71,35,62,178,122,159,92],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-874728-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,3,-7,1,8,-8],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-681309.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"aaaaaaaaa584D584D584D5ggYjE5ggYjRcjRwyRwyRwySwyRwygwyRwyg\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"65.7.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":33491512284,\"moneyMax\":837287807100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1373,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"70.5.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":42423253529,\"moneyMax\":1060581338225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1285,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-300125.cct\",\"type\":\"Total Ways to Sum\",\"data\":60,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"27.2.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":23797289891,\"moneyMax\":594932247275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":923,\"serverGrowth\":74,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"17.0.3.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":31999367113,\"moneyMax\":799984177825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1043,\"serverGrowth\":74,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"89.6.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":31307238613,\"moneyMax\":782680965325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1106,\"serverGrowth\":69,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"73.8.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":19639976053,\"moneyMax\":490999401325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1124,\"serverGrowth\":46,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-186654-AlphaEnterprises.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[9,4],[5,2,1],[8,3,2,1],[8,3,1,9,8],[4,7,6,7,9,4],[5,4,7,5,5,5,8],[9,1,4,4,4,2,3,9],[4,8,2,2,1,8,9,3,1],[5,2,1,6,5,9,1,2,6,9],[1,7,5,3,1,7,8,1,6,8,7]],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"77.9.8.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":19886259641,\"moneyMax\":497156491025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":961,\"serverGrowth\":99,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-538238-TheBlackHand.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,0,4,3,0,4,2,1,0,1,0,2,2,6,2,3],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"92.1.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":17543648490,\"moneyMax\":438591212250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1042,\"serverGrowth\":99,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-848127.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"10813115925\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"64.2.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":26894781587,\"moneyMax\":672369539675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1261,\"serverGrowth\":91,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-772905.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"111218110227\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"88.4.5.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1560859982,\"moneyMax\":39021499550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1190,\"serverGrowth\":86,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"85.8.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1240,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-857265-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[10,37,25,1,161,4,192,12,114,46,110,172,181,26,166,27,105,160,55,118,129,160,194,55,96,179,191,11,93,123,12,55,87,79,184,94,199,118,180,178,89,132,150,51,57,195,33,28,41],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"58.1.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1130405288,\"moneyMax\":28260132200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":999,\"serverGrowth\":78,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"26.2.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":868939808,\"moneyMax\":21723495200,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":926,\"serverGrowth\":66,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"43.0.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":845900692,\"moneyMax\":21147517300,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":907,\"serverGrowth\":39,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-230049-CyberSec.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[6,[[0,5],[1,4],[2,5],[1,5],[1,2],[2,3],[2,4]]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"9.6.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":555581246,\"moneyMax\":13889531150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":73,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"10.9.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":766036924,\"moneyMax\":19150923100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":849,\"serverGrowth\":67,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-438560.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,3,3,2,3,2,2,1,4,1,4,3,5,2,1,2,5,2,2,0,4],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"49.7.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":912403358,\"moneyMax\":22810083950,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":882,\"serverGrowth\":89,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-780933.cct\",\"type\":\"Total Ways to Sum\",\"data\":29,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"21.1.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1120137377,\"moneyMax\":28003434425,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":887,\"serverGrowth\":88,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-107569.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[24,146,108,123,42,96,169,198,72,69,36,166,64,52,192,101,129,190,41],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"38.8.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":828548409,\"moneyMax\":20713710225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":71,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"95.9.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":657995910,\"moneyMax\":16449897750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":90,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-846183.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[23,32],[3,10],[8,12],[15,25],[11,15],[17,24],[11,17],[22,29],[1,11],[5,6],[14,24],[17,26],[10,15],[25,30],[5,7]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"97.9.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":876289943,\"moneyMax\":21907248575,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":865,\"serverGrowth\":80,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-958079.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,1,0,0,0,0],[0,0,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0,0],[0,0,1,0,1,0,0,0,0],[0,0,0,0,0,0,1,0,0],[1,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,0,1,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-893359-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[146,1,158,169,175,105,2,114,164,16,26,143,183,14,62,116,142,100,51,13,114,104,165,120,98,194,36,185,155,89,34,132,118,35,79,20,105,184,176,54,9,76,116,154,65,163,39,70],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"84.8.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":756244807,\"moneyMax\":18906120175,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":827,\"serverGrowth\":72,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"16.0.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1088509910,\"moneyMax\":27212747750,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":899,\"serverGrowth\":57,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-490048-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,0,0,9,9,10,2,0,0],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"1.3.1.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":981536666,\"moneyMax\":24538416650,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":868,\"serverGrowth\":70,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"51.5.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":1010434432,\"moneyMax\":25260860800,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":809,\"serverGrowth\":70,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"23.5.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":779792804,\"moneyMax\":19494820100,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":787,\"serverGrowth\":75,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"39.9.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"omnia\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":797447068,\"moneyMax\":19936176700,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":788,\"serverGrowth\":70,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"20.1.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1314832095,\"moneyMax\":32870802375,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":873,\"serverGrowth\":64,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"9.2.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1733919120,\"moneyMax\":43347978000,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":839,\"serverGrowth\":84,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"43.6.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":1175510415,\"moneyMax\":29387760375,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":828,\"serverGrowth\":66,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"93.4.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1478218296,\"moneyMax\":36955457400,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":806,\"serverGrowth\":77,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-903989-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,7],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-8808.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[200,16,106,118,165,54,176,130,149,9,110,65,96,58,197,75,77,14,19,135,12,168],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"29.3.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1096364408,\"moneyMax\":27409110200,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":777,\"serverGrowth\":74,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"2.9.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":787507375,\"moneyMax\":19687684375,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":691,\"serverGrowth\":63,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-412573-CyberSec.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[13,[[7,12],[1,10],[5,6],[8,10],[4,8],[8,12],[4,7],[6,12],[1,2],[4,6],[10,11],[0,6],[2,7],[0,11],[2,9],[0,7],[3,8],[5,11],[0,8],[2,8]]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"25.9.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":677904858,\"moneyMax\":16947621450,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":516,\"serverGrowth\":60,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1110279.3022469708,13,78,78]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1943.7463404400835,\"onlineMoneyMade\":1110279.3022469708,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"60.3.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":707859246,\"moneyMax\":17696481150,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":531,\"serverGrowth\":54,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"58.5.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":285899402,\"moneyMax\":7147485050,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":421,\"serverGrowth\":38,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"45.3.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":213962481,\"moneyMax\":5349062025,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":406,\"serverGrowth\":45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2905230.8086847183,26,156,156]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3887.492680880167,\"onlineMoneyMade\":2905230.8086847183,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-665557-AlphaEnterprises.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,8,-10,-3,10,6,-2,0,5,-10,9,-4],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"39.7.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":938502797,\"moneyMax\":23462569925,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":738,\"serverGrowth\":77,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"89.0.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":292800222,\"moneyMax\":7320005550,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":458,\"serverGrowth\":45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2539828.6033237125,26,156,156]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3887.492680880167,\"onlineMoneyMade\":2539828.6033237125,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-917019.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[5,6],[3,3,4],[9,9,7,7],[8,9,7,4,6],[7,5,1,7,9,9],[5,5,7,8,5,5,3]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-301231-CyberSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[5,6],[6,3,9],[3,9,8,6],[2,9,1,6,5],[2,3,7,5,5,3],[5,5,9,4,9,9,5]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"27.9.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":599700585,\"moneyMax\":14992514625,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":637,\"serverGrowth\":67,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-740458-CyberSec.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"KK777333333333raattVCeHH32mooooooooooooSKrrrrPPuZZZZZZZZZZZZ6666666666\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"74.4.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":422776369,\"moneyMax\":10569409225,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":424,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[789904.985905464,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":789904.985905464,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"catalyst\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"9.4.0.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":152000385,\"moneyMax\":3800009625,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":323,\"serverGrowth\":55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[440513.10512137786,3,18,18]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":448.5568477938652,\"onlineMoneyMade\":440513.10512137786,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"the-hub\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-87496.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":302621496,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"85.2.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":231321643,\"moneyMax\":5783041075,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":389,\"serverGrowth\":65,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"78.9.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":408,\"serverGrowth\":75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1881142.8120761341,13,78,78]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1943.7463404400835,\"onlineMoneyMade\":1881142.8120761341,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"netlink\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"61.4.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":71437128,\"moneyMax\":1785928200,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":275,\"serverGrowth\":58,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"29.6.5.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[302446.0774173002,1,5,7]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":149.51894926462177,\"onlineMoneyMade\":302446.0774173002,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"n00dles\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"33.6.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1805856.9772062488,6,30,42]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":1805856.9772062488,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-401017-AlphaEnterprises.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0110100000000000100101011101011000001011011101000001110110000101\",\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"35.4.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1753203.8526072584,6,30,42]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":1753203.8526072584,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-978371-Sector12.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[65,78,86,32,86,33,163,80,119,187,6,62,96,51],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-293263.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"01000000100010101000101010001100\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"13.8.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.445999999999997,\"minDifficulty\":5,\"moneyAvailable\":55046944.884777956,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1702092.3299483028,6,30,42]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":1702092.3299483028,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"joesguns\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-473340-CyberSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,-4,5,-3,-6,8,-6,5,-9,-2,-7,9,-10,2],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"12.1.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2875897.337328011,13,65,91]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1943.7463404400835,\"onlineMoneyMade\":2875897.337328011,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"zer0\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-126026-AlphaEnterprises.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[135,10,98,130,148,13,89,101,149,200,5,144,80,140,92,135,163,190,183,18,100,195,67,18,139,41,25,121,198,188,47,69,143,190,29,20,129,29,154],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"38.2.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1459240.7570986652,6,30,42]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":1459240.7570986652,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"59.8.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2037219.7097071572,13,78,78]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1943.7463404400835,\"onlineMoneyMade\":2037219.7097071572,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"neo-net\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"81.3.0.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[4975627.645408661,26,156,156]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3887.492680880167,\"onlineMoneyMade\":4975627.645408661,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"83.8.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1652477.0876683553,6,30,42]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":1652477.0876683553,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"37.1.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1604314.142032981,6,30,42]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":1604314.142032981,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-851419.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,1,0,0,0,0,0,0,0],[0,0,0,0,1,1,1,0,1],[1,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,1],[0,0,0,1,0,1,0,0,0],[1,1,1,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0],[0,1,0,1,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"71.9.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2655257.2096788473,13,65,91]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1943.7463404400835,\"onlineMoneyMade\":2655257.2096788473,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"phantasy\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"12.9.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3069586.1344547085,13,65,91]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1943.7463404400835,\"onlineMoneyMade\":3069586.1344547085,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"18.3.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":62062213,\"moneyMax\":1551555325,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":186,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2174216.328484253,13,78,78]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1943.7463404400835,\"onlineMoneyMade\":2174216.328484253,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"omega-net\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-885263.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"4sPQQPq27q27q27FGTv74vcv74vcv74WIb8Idvdvdvdvdvdvdvd611dvdvdF8KKKKKKKIF7dF7de\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"37.2.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":42918080,\"moneyMax\":1072952000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":229,\"serverGrowth\":29,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"18.9.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3374715.0828842325,13,65,91]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1943.7463404400835,\"onlineMoneyMade\":3374715.0828842325,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":13,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"16.7.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":512,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2081028.471416425,26,156,156]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3887.492680880167,\"onlineMoneyMade\":2081028.471416425,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-348881-CyberSec.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,0,0,0,0,1,1,0],[1,0,1,1,1,0,1,1,0,0,0],[0,0,1,1,0,0,0,1,0,0,1],[0,0,0,1,0,0,0,0,0,0,0],[0,0,1,1,0,0,1,1,0,0,1],[0,0,1,0,1,1,1,0,0,0,1],[1,0,0,0,1,0,0,0,0,0,0],[0,0,1,0,0,1,1,0,0,0,0],[0,0,1,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,1,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"31.4.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1017,\"serverGrowth\":56,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"7.1.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":791,\"serverGrowth\":51,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"8.7.5.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":511,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"28.2.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":351,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[3323463.670211302,26,156,156]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3887.492680880167,\"onlineMoneyMade\":3323463.670211302,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":26,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"38.8.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":220,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[813546.7329415877,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":813546.7329415877,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-39187.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"FRAME INBOX POPUP SHIFT ENTER\",3],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"59.6.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":525,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"24.4.1.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":60,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[621802.9546971167,3,15,21]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":448.5568477938652,\"onlineMoneyMade\":621802.9546971167,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"CSEC\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-737830-CyberSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,1,0],[0,0,1,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-59684-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,9],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"35.9.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"25.3.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"95.2.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"60.4.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-1\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[419918.3369820437,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":419918.3369820437,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-1\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"2.5.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-2\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[407748.4355185955,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":407748.4355185955,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-2\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"58.7.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-3\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[395932.72601478186,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":395932.72601478186,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-3\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"74.9.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-4\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[384460.85713466094,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":384460.85713466094,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-4\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"82.8.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-5\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[373322.7813071173,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":373322.7813071173,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-5\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"22.5.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-6\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[362508.74577551504,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":362508.74577551504,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-6\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"41.7.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-7\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[352009.28391212894,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":352009.28391212894,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-7\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"53.2.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-8\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[341815.2067894894,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":341815.2067894894,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-8\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"19.0.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-9\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[331917.595001013,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":331917.595001013,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-9\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"76.9.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-10\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[322307.79072351387,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":322307.79072351387,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-10\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"34.0.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-11\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[312977.3900144182,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":312977.3900144182,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-11\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"58.5.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-12\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[303918.235336711,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":303918.235336711,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-12\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"91.1.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-13\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[295122.40830485756,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":295122.40830485756,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-13\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"89.5.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-14\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[286582.22264514107,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":286582.22264514107,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-14\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"8.7.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-15\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[278290.21736405237,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":278290.21736405237,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-15\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"11.4.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-16\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[270239.15011855983,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":270239.15011855983,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-16\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"74.8.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-17\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[262421.9907822696,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":262421.9907822696,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-17\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"61.6.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-18\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[254831.91520166435,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":254831.91520166435,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-18\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"6.5.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-19\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[247462.29913678407,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":247462.29913678407,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-19\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"55.6.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-20\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[240306.7123808775,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":240306.7123808775,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-20\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"88.0.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-21\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[233358.91305371723,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":233358.91305371723,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-21\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"66.6.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-22\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[226612.8420634304,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":226612.8420634304,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-22\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"11.0.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-23\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[220062.61773184748,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":220062.61773184748,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-23\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"54.8.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-24\"}}],[\"my-first-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// created by j__r0d\\r\\n// modified 'early-hack-template' from beginner's guide\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    //DEBUG: ns.tprintf(`${ns.getHostname()} reporting in...`)\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = ns.args[0];\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    while (true) {\\r\\n        // Infinite loop that continously hacks/grows/weakens the target server\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXktZmlyc3QtaGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9teS1maXJzdC1oYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQix1REFBdUQ7QUFNdkQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsMERBQTBEO0lBRTFELG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqRCwyREFBMkQ7SUFDM0QsNERBQTREO0lBQzVELDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxJQUFJLEVBQUU7UUFDWCx1RUFBdUU7UUFDdkUsSUFBSSxFQUFFLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxFQUFFO1lBQ3RELG1FQUFtRTtZQUNuRSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLEVBQUU7WUFDM0QsNERBQTREO1lBQzVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0wscUJBQXFCO1lBQ3JCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZWQgYnkgal9fcjBkXHJcbi8vIG1vZGlmaWVkICdlYXJseS1oYWNrLXRlbXBsYXRlJyBmcm9tIGJlZ2lubmVyJ3MgZ3VpZGVcclxuXHJcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIG5zLmFyZ3NbMF0udG9TdHJpbmcoKSBjYXVzaW5nIGFuIGVycm9yLCB3aGljaCBpcyBmb3JjaW5nIG1lIHRvIHVzZSA6IGFueSBpbnN0ZWFkIG9mIGEgc3RyaW5nXHJcblxyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbi8qKiBAcGFyYW0ge05TfSBucyAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAvL0RFQlVHOiBucy50cHJpbnRmKGAke25zLmdldEhvc3RuYW1lKCl9IHJlcG9ydGluZyBpbi4uLmApXHJcbiAgXHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldDogYW55ID0gbnMuYXJnc1swXTtcclxuICAvLyBEZWZpbmVzIGhvdyBtdWNoIG1vbmV5IGEgc2VydmVyIHNob3VsZCBoYXZlIGJlZm9yZSB3ZSBoYWNrIGl0XHJcbiAgLy8gSW4gdGhpcyBjYXNlLCBpdCBpcyBzZXQgdG8gdGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5LlxyXG4gIGNvbnN0IG1vbmV5VGhyZXNoID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzZWN1cml0eSBsZXZlbCB0aGUgdGFyZ2V0IHNlcnZlciBjYW5cclxuICAvLyBoYXZlLiBJZiB0aGUgdGFyZ2V0J3Mgc2VjdXJpdHkgbGV2ZWwgaXMgaGlnaGVyIHRoYW4gdGhpcyxcclxuICAvLyB3ZSdsbCB3ZWFrZW4gaXQgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2VcclxuICBjb25zdCBzZWN1cml0eVRocmVzaCA9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KTtcclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgLy8gSW5maW5pdGUgbG9vcCB0aGF0IGNvbnRpbm91c2x5IGhhY2tzL2dyb3dzL3dlYWtlbnMgdGhlIHRhcmdldCBzZXJ2ZXJcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"my-first-hack.js\",\"server\":\"pserv-24\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[213702.53057852254,6,36,36]},\"filename\":\"my-first-hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897.1136955877304,\"onlineMoneyMade\":213702.53057852254,\"onlineRunningTime\":201.80999999999707,\"ramUsage\":2.4,\"server\":\"pserv-24\",\"scriptKey\":\"my-first-hack.js*[\\\"joesguns\\\"]\",\"title\":\"my-first-hack.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"pserv-1-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1-0\",\"httpPortOpen\":false,\"ip\":\"9.4.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"early-hack-template.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. \\r\\n    const target = \\\"joesguns\\\";\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to the maximum amount of money.\\r\\n    const moneyThresh = ns.getServerMaxMoney(target);\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    const securityThresh = ns.getServerMinSecurityLevel(target);\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n        }\\r\\n        else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n        }\\r\\n        else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFybHktaGFjay10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lYXJseS1oYWNrLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLG1EQUFtRDtJQUNuRCw2QkFBNkI7SUFDN0IsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBRTFCLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpELDJEQUEyRDtJQUMzRCw0REFBNEQ7SUFDNUQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU1RCx1RUFBdUU7SUFDdkUsT0FBTyxJQUFJLEVBQUU7UUFDWCxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxjQUFjLEVBQUU7WUFDdEQsbUVBQW1FO1lBQ25FLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjthQUFNLElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsRUFBRTtZQUMzRCw0REFBNEQ7WUFDNUQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxxQkFBcUI7WUFDckIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgLy8gRGVmaW5lcyB0aGUgXCJ0YXJnZXQgc2VydmVyXCIsIHdoaWNoIGlzIHRoZSBzZXJ2ZXJcclxuICAvLyB0aGF0IHdlJ3JlIGdvaW5nIHRvIGhhY2suIFxyXG4gIGNvbnN0IHRhcmdldCA9IFwiam9lc2d1bnNcIjtcclxuXHJcbiAgLy8gRGVmaW5lcyBob3cgbXVjaCBtb25leSBhIHNlcnZlciBzaG91bGQgaGF2ZSBiZWZvcmUgd2UgaGFjayBpdFxyXG4gIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgc2V0IHRvIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leS5cclxuICBjb25zdCBtb25leVRocmVzaCA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gIC8vIERlZmluZXMgdGhlIG1heGltdW0gc2VjdXJpdHkgbGV2ZWwgdGhlIHRhcmdldCBzZXJ2ZXIgY2FuXHJcbiAgLy8gaGF2ZS4gSWYgdGhlIHRhcmdldCdzIHNlY3VyaXR5IGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoaXMsXHJcbiAgLy8gd2UnbGwgd2Vha2VuIGl0IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlXHJcbiAgY29uc3Qgc2VjdXJpdHlUaHJlc2ggPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldCk7XHJcblxyXG4gIC8vIEluZmluaXRlIGxvb3AgdGhhdCBjb250aW5vdXNseSBoYWNrcy9ncm93cy93ZWFrZW5zIHRoZSB0YXJnZXQgc2VydmVyXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPiBzZWN1cml0eVRocmVzaCkge1xyXG4gICAgICAvLyBJZiB0aGUgc2VydmVyJ3Mgc2VjdXJpdHkgbGV2ZWwgaXMgYWJvdmUgb3VyIHRocmVzaG9sZCwgd2Vha2VuIGl0XHJcbiAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXQpO1xyXG4gICAgfSBlbHNlIGlmIChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIDwgbW9uZXlUaHJlc2gpIHtcclxuICAgICAgLy8gSWYgdGhlIHNlcnZlcidzIG1vbmV5IGlzIGxlc3MgdGhhbiBvdXIgdGhyZXNob2xkLCBncm93IGl0XHJcbiAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaGFjayBpdFxyXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19\",\"filename\":\"early-hack-template.js\",\"server\":\"pserv-1-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.5529,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":31.1948,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":5.368,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":2342.8387395433615}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":3.4048,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":102676.65156026099}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":128.1787,\"isBanned\":false,\"isMember\":true,\"playerReputation\":45303.544144548425}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":30.8584,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":101.8281,\"isBanned\":false,\"isMember\":true,\"playerReputation\":64676.031397022365}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":180,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#E3B54A\",\"primary\":\"#CAA243\",\"primarydark\":\"#7E6937\",\"successlight\":\"#82FF82\",\"success\":\"#6FDA6F\",\"successdark\":\"#64C364\",\"errorlight\":\"#FD5555\",\"error\":\"#D84A4A\",\"errordark\":\"#AC3939\",\"secondarylight\":\"#D8D0B8\",\"secondary\":\"#B1AA95\",\"secondarydark\":\"#736E5E\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#111111\",\"white\":\"#fff\",\"black\":\"#070300\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#0A0A0E\",\"backgroundsecondary\":\"#0E0E10\",\"button\":\"#222222\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1232,\"y\":1010,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Consolas\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":true,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1697817773507","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}